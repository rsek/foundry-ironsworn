
diff --git a/node_modules/foundry-types/client/application/form-application/index.d.ts b/node_modules/foundry-types/client/application/form-application/index.d.ts
deleted file mode 100644
index 4555855..0000000
--- a/node_modules/foundry-types/client/application/form-application/index.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import "./base";
-import "./client-settings";
-import "./document-sheet";
-import "./document-sheet-config";
-import "./image-popout";
-import "./other";
-import "./permission";
-import "./placeables-config";
diff --git a/node_modules/foundry-types/client/application/form-application/other.d.ts b/node_modules/foundry-types/client/application/form-application/other.d.ts
index 9210dc9..13d5edf 100644
--- a/node_modules/foundry-types/client/application/form-application/other.d.ts
+++ b/node_modules/foundry-types/client/application/form-application/other.d.ts
@@ -19,10 +19,8 @@ declare class FolderConfig extends FormApplication {
  * @param options           Additional application rendering options
  * @param options.preview   Configure a preview version of a sound which is not yet saved
  */
-declare class MeasuredTemplateConfig<
-    TParent extends MeasuredTemplateDocument<Scene | null>
-> extends DocumentSheet<TParent> {
-    protected override _updateObject(event: Event, formData: Record<string, unknown>): Promise<void>;
+declare class MeasuredTemplateConfig extends FormApplication {
+    protected override _updateObject(event: Event, formData: {}): Promise<void>;
 }

 /**
diff --git a/node_modules/foundry-types/client/application/form-application/document-sheet/roll-table-config.d.ts b/node_modules/foundry-types/client/application/form-application/roll-table-config.d.ts
similarity index 100%
rename from node_modules/foundry-types/client/application/form-application/document-sheet/roll-table-config.d.ts
rename to node_modules/foundry-types/client/application/form-application/roll-table-config.d.ts
diff --git a/node_modules/foundry-types/client/application/form-application/tile-config.d.ts b/node_modules/foundry-types/client/application/form-application/tile-config.d.ts
new file mode 100644
index 0000000..b0022c2
--- /dev/null
+++ b/node_modules/foundry-types/client/application/form-application/tile-config.d.ts
@@ -0,0 +1,8 @@
+/**
+ * Tile Config Sheet
+ * @todo fill this in
+ */
+declare class TileConfig extends FormApplication {
+    /** @override */
+    protected _updateObject(event: Event, formData: Record<string, unknown>): Promise<void>;
+}
diff --git a/node_modules/foundry-types/client/application/form-application/document-sheet/token-config.d.ts b/node_modules/foundry-types/client/application/form-application/token-config.d.ts
similarity index 92%
rename from node_modules/foundry-types/client/application/form-application/document-sheet/token-config.d.ts
rename to node_modules/foundry-types/client/application/form-application/token-config.d.ts
index b4423e5..51e35e4 100644
--- a/node_modules/foundry-types/client/application/form-application/document-sheet/token-config.d.ts
+++ b/node_modules/foundry-types/client/application/form-application/token-config.d.ts
@@ -1,6 +1,6 @@
 /** A Token Configuration Application */
 declare class TokenConfig<
-    TDocument extends TokenDocument<Scene | null>,
+    TDocument extends TokenDocument = TokenDocument,
     TOptions extends DocumentSheetOptions = DocumentSheetOptions
 > extends DocumentSheet<TDocument, TOptions> {
     constructor(object: TDocument, options?: Partial<FormApplicationOptions>);
@@ -58,19 +58,19 @@ declare class TokenConfig<
     protected _onBarChange(event: Event): void;
 }

-declare interface TokenConfigData<TDocument extends TokenDocument<Scene | null>> extends DocumentSheetData<TDocument> {
+declare interface TokenConfigData<T extends TokenDocument> extends DocumentSheetData<T> {
     cssClasses: string;
     isPrototype: boolean;
     hasAlternates: boolean;
     alternateImages: string[];
-    object: TDocument;
+    object: T["data"];
     options: DocumentSheetOptions;
     gridUnits: string;
     barAttributes: string[];
     bar1: string;
     bar2: string;
     displayModes: Record<string, string>;
-    actors: TDocument["actor"][];
+    actors: T["actor"][];
     dispositions: Record<string, string>;
     isGM: boolean;
 }
diff --git a/node_modules/foundry-types/client/application/hud/controls.d.ts b/node_modules/foundry-types/client/application/hud/controls.d.ts
index f540e73..c20864f 100644
--- a/node_modules/foundry-types/client/application/hud/controls.d.ts
+++ b/node_modules/foundry-types/client/application/hud/controls.d.ts
@@ -16,6 +16,7 @@ declare interface SceneControl {
     layer?: string;
     visible: boolean;
     tools: SceneControlTool[];
+    activeTool: string
 }

 /**
diff --git a/node_modules/foundry-types/client/application/i18n.d.ts b/node_modules/foundry-types/client/application/i18n.d.ts
index 0c75d00..0490dba 100644
--- a/node_modules/foundry-types/client/application/i18n.d.ts
+++ b/node_modules/foundry-types/client/application/i18n.d.ts
@@ -72,5 +72,15 @@ declare class Localization {
      * const stringId = "MY_TEST_STRING"; // "Your name is {name}"
      * game.i18n.format("MY_TEST_STRING", {name: "Andrew"}); // Produces "Your name is Andrew"
      */
-    format(stringId: string, data?: { [key: string]: string | number | boolean | null }): string;
+    format(stringId: string, data?: { [key: string]: string | number | boolean | null | undefined }): string;
+
+    /**
+     * Return whether a certain string has a known translation defined.
+     * @param stringId     The string key being translated
+     * @param fallback  Allow fallback translations to count?
+     * @returns {boolean}
+     */
+    has(stringId: string,
+      /** @default true */
+      fallback?: boolean): boolean
 }
diff --git a/node_modules/foundry-types/client/application/sidebar/sidebar-tab/chat-log.d.ts b/node_modules/foundry-types/client/application/sidebar/sidebar-tab/chat-log.d.ts
index 4a44a85..851dfae 100644
--- a/node_modules/foundry-types/client/application/sidebar/sidebar-tab/chat-log.d.ts
+++ b/node_modules/foundry-types/client/application/sidebar/sidebar-tab/chat-log.d.ts
@@ -122,7 +122,7 @@ declare class ChatLog<TChatMessage extends ChatMessage = ChatMessage> extends Si
      * @param message The original string of the message content
      * @return A Promise resolving to the prepared chat data object
      */
-    protected processMessage(message: string): Promise<foundry.documents.ChatMessageSource>;
+    protected processMessage(message: string): Promise<foundry.data.ChatMessageData>;

     /**
      * Process messages which are posted using a dice-roll command
@@ -134,7 +134,7 @@ declare class ChatLog<TChatMessage extends ChatMessage = ChatMessage> extends Si
     protected _processDiceCommand(
         command: string,
         matches: RegExpMatchArray[],
-        chatData: DeepPartial<foundry.documents.ChatMessageSource>,
+        chatData: DeepPartial<foundry.data.ChatMessageSource>,
         createOptions: ChatMessageModificationContext
     ): Promise<void>;

diff --git a/node_modules/foundry-types/client/application/sidebar/sidebar-tab/combat-tracker.d.ts b/node_modules/foundry-types/client/application/sidebar/sidebar-tab/combat-tracker.d.ts
index c362cdc..e3aa5ea 100644
--- a/node_modules/foundry-types/client/application/sidebar/sidebar-tab/combat-tracker.d.ts
+++ b/node_modules/foundry-types/client/application/sidebar/sidebar-tab/combat-tracker.d.ts
@@ -105,7 +105,7 @@ declare class CombatTracker<
      * @param combatant The combatant data being modified
      * @return A Promise that resolves after all operations are complete
      */
-    protected _onToggleDefeatedStatus(combatant: Combatant<TCombat>): Promise<void>;
+    protected _onToggleDefeatedStatus(combatant: Combatant): Promise<void>;

     /**
      * Handle mouse-down event on a combatant name in the tracker
diff --git a/node_modules/foundry-types/client/application/sidebar/sidebar-tab/sidebar-directory/actor-directory.d.ts b/node_modules/foundry-types/client/application/sidebar/sidebar-tab/sidebar-directory/actor-directory.d.ts
index d69a93d..69d7fd8 100644
--- a/node_modules/foundry-types/client/application/sidebar/sidebar-tab/sidebar-directory/actor-directory.d.ts
+++ b/node_modules/foundry-types/client/application/sidebar/sidebar-tab/sidebar-directory/actor-directory.d.ts
@@ -2,7 +2,7 @@ export {};

 declare global {
     /** The sidebar directory which organizes and displays world-level Actor documents. */
-    class ActorDirectory<TActor extends Actor<null>> extends SidebarDirectory<TActor> {
+    class ActorDirectory<TActor extends Actor> extends SidebarDirectory<TActor> {
         constructor(options: SidebarDirectoryOptions);

         static override documentName: "Actor";
diff --git a/node_modules/foundry-types/client/application/sidebar/sidebar-tab/sidebar-directory/item-directory.d.ts b/node_modules/foundry-types/client/application/sidebar/sidebar-tab/sidebar-directory/item-directory.d.ts
index 480a80a..65c6c4c 100644
--- a/node_modules/foundry-types/client/application/sidebar/sidebar-tab/sidebar-directory/item-directory.d.ts
+++ b/node_modules/foundry-types/client/application/sidebar/sidebar-tab/sidebar-directory/item-directory.d.ts
@@ -2,7 +2,7 @@ export {};

 declare global {
     /** The sidebar directory which organizes and displays world-level Item documents. */
-    class ItemDirectory<TItem extends Item<null>> extends SidebarDirectory<TItem> {
+    class ItemDirectory<TItem extends Item> extends SidebarDirectory<TItem> {
         static override documentName: "Item";

         protected override _canDragDrop(selector: string): boolean;
diff --git a/node_modules/foundry-types/client/collections/compendium-collection.d.ts b/node_modules/foundry-types/client/collections/compendium-collection.d.ts
index a4d21f4..0871722 100644
--- a/node_modules/foundry-types/client/collections/compendium-collection.d.ts
+++ b/node_modules/foundry-types/client/collections/compendium-collection.d.ts
@@ -144,45 +144,40 @@ declare global {
         protected override _onCreateDocuments(
             documents: TDocument[],
             result: TDocument["_source"][],
-            options: DocumentModificationContext<null>,
+            options: DocumentModificationContext,
             userId: string
         ): void;

         protected override _onUpdateDocuments(
             documents: TDocument[],
             result: TDocument["_source"][],
-            options: DocumentUpdateContext<null>,
+            options: DocumentModificationContext,
             userId: string
         ): void;

         protected override _onDeleteDocuments(
             documents: TDocument[],
-            result: string[],
-            options: DocumentModificationContext<null>,
+            result: TDocument["_source"][],
+            options: DocumentModificationContext,
             userId: string
         ): void;

         /** Follow-up actions taken when Documents within this Compendium pack are modified */
-        protected _onModifyContents(
-            documents: TDocument[],
-            options: DocumentModificationContext<null>,
-            userId: string
-        ): void;
+        protected _onModifyContents(documents: TDocument[], options: DocumentModificationContext, userId: string): void;
     }

     type CompendiumDocumentType = (typeof CONST.COMPENDIUM_DOCUMENT_TYPES)[number];
     type CompendiumUUID = `Compendium.${string}.${string}`;
     type DocumentUUID = WorldDocumentUUID | CompendiumUUID | TokenDocumentUUID;

-    function fromUuid(uuid: CompendiumUUID, relative?: CompendiumDocument): Promise<CompendiumDocument | null>;
-    function fromUuid(
-        uuid: TokenDocumentUUID,
-        relative?: foundry.abstract.Document
-    ): Promise<TokenDocument<Scene> | null>;
-    function fromUuid<TDocument extends ClientDocument>(
+    function fromUuid<T extends CompendiumDocument = CompendiumDocument>(
+        uuid: CompendiumUUID,
+        relative?: CompendiumDocument
+    ): Promise<T | null>;
+    function fromUuid<T extends foundry.abstract.Document = foundry.abstract.Document>(
         uuid: string,
         relative?: foundry.abstract.Document
-    ): Promise<TDocument | null>;
+    ): Promise<T | null>;

     /**
      * Retrieve a Document by its Universally Unique Identifier (uuid) synchronously. If the uuid resolves to a compendium
@@ -194,12 +189,12 @@ declare global {
      */
     function fromUuidSync(
         uuid: WorldDocumentUUID,
-        relative?: ClientDocument | CompendiumIndexData | null
+        relative?: foundry.abstract.Document | CompendiumIndexData | null
     ): foundry.abstract.Document | null;
     function fromUuidSync(
         uuid: string,
-        relative?: ClientDocument | CompendiumIndexData | null
-    ): ClientDocument | CompendiumIndexData | null;
+        relative?: foundry.abstract.Document | CompendiumIndexData | null
+    ): foundry.abstract.Document | CompendiumIndexData | null;

     /**
      * Parse a UUID into its constituent parts.
@@ -212,11 +207,11 @@ declare global {

     interface ResolvedUUID {
         /** The parent collection. */
-        collection?: DocumentCollection<ClientDocument>;
+        collection?: DocumentCollection<foundry.abstract.Document>;
         /** The parent document. */
         documentId: string;
         /** An already-resolved document. */
-        doc: ClientDocument | null;
+        doc: foundry.abstract.Document | null;
         /** Any remaining Embedded Document parts. */
         embedded: string[];
     }
@@ -227,7 +222,7 @@ declare global {
      * @param parts A series of Embedded Document UUID parts.
      * @returns The resolved Embedded Document.
      */
-    function _resolveEmbedded(parent: ClientDocument, parts: string[]): ClientDocument | undefined;
+    function _resolveEmbedded(parent: foundry.abstract.Document, parts: string[]): foundry.abstract.Document | undefined;

     interface CompendiumMetadata<T extends CompendiumDocument = CompendiumDocument> {
         readonly type: T["documentName"];
@@ -254,5 +249,5 @@ declare global {

     type CompendiumIndex = Collection<CompendiumIndexData>;

-    type CompendiumDocument = Actor<null> | Cards | Item<null> | JournalEntry | Macro | Playlist | RollTable | Scene;
+    type CompendiumDocument = Exclude<WorldDocument, Combat | ChatMessage | Folder | User>;
 }
diff --git a/node_modules/foundry-types/client/collections/document-collection.d.ts b/node_modules/foundry-types/client/collections/document-collection.d.ts
index 905e9e5..a4fba19 100644
--- a/node_modules/foundry-types/client/collections/document-collection.d.ts
+++ b/node_modules/foundry-types/client/collections/document-collection.d.ts
@@ -16,7 +16,7 @@ declare abstract class DocumentCollection<TDocument extends foundry.abstract.Doc
     get name(): string;

     /** A reference to the Document class definition which is contained within this DocumentCollection. */
-    get documentClass(): DocumentConstructorOf<TDocument>;
+    get documentClass(): ConstructorOf<TDocument>;

     /** A reference to the named Document class which is contained within this DocumentCollection. */
     abstract get documentName(): string | null;
@@ -45,7 +45,7 @@ declare abstract class DocumentCollection<TDocument extends foundry.abstract.Doc
     updateAll(
         transformation: DocumentUpdateData<TDocument> | ((document: TDocument) => DocumentUpdateData<TDocument>),
         condition?: ((document: TDocument) => boolean) | null,
-        options?: DocumentModificationContext<null>
+        options?: DocumentModificationContext
     ): Promise<TDocument[]>;

     /**
@@ -56,7 +56,7 @@ declare abstract class DocumentCollection<TDocument extends foundry.abstract.Doc
      */
     protected _preCreateDocuments(
         result: TDocument["_source"][],
-        options: DocumentModificationContext<null>,
+        options: DocumentModificationContext,
         userId: string
     ): void;

@@ -70,7 +70,7 @@ declare abstract class DocumentCollection<TDocument extends foundry.abstract.Doc
     protected _onCreateDocuments(
         documents: TDocument[],
         result: TDocument["_source"][],
-        options: DocumentModificationContext<null>,
+        options: DocumentModificationContext,
         userId: string
     ): void;

@@ -82,7 +82,7 @@ declare abstract class DocumentCollection<TDocument extends foundry.abstract.Doc
      */
     protected _preUpdateDocuments(
         result: TDocument["_source"][],
-        options: DocumentModificationContext<null>,
+        options: DocumentModificationContext,
         userId: string
     ): void;

@@ -96,7 +96,7 @@ declare abstract class DocumentCollection<TDocument extends foundry.abstract.Doc
     protected _onUpdateDocuments(
         documents: TDocument[],
         result: TDocument["_source"][],
-        options: DocumentModificationContext<null>,
+        options: DocumentModificationContext,
         userId: string
     ): void;

@@ -108,7 +108,7 @@ declare abstract class DocumentCollection<TDocument extends foundry.abstract.Doc
      */
     protected _preDeleteDocuments(
         result: TDocument["_source"][],
-        options: DocumentModificationContext<null>,
+        options: DocumentModificationContext,
         userId: string
     ): void;

@@ -121,8 +121,8 @@ declare abstract class DocumentCollection<TDocument extends foundry.abstract.Doc
      */
     protected _onDeleteDocuments(
         documents: TDocument[],
-        result: string[],
-        options: DocumentModificationContext<null>,
+        result: TDocument["_source"][],
+        options: DocumentModificationContext,
         userId: string
     ): void;
 }
diff --git a/node_modules/foundry-types/client/collections/world-collection/actors.d.ts b/node_modules/foundry-types/client/collections/world-collection/actors.d.ts
index 9860ad6..dd494b4 100644
--- a/node_modules/foundry-types/client/collections/world-collection/actors.d.ts
+++ b/node_modules/foundry-types/client/collections/world-collection/actors.d.ts
@@ -11,7 +11,7 @@
  * let actor = game.actors.get(actorId);
  * ```
  */
-declare class Actors<TActor extends Actor<null>> extends WorldCollection<TActor> {
+declare class Actors<TActor extends Actor> extends WorldCollection<TActor> {
     /**
      * A mapping of synthetic Token Actors which are currently active within the viewed Scene.
      * Each Actor is referenced by the Token.id.
@@ -23,6 +23,6 @@ declare class Actors<TActor extends Actor<null>> extends WorldCollection<TActor>
     override fromCompendium(document: TActor | TActor["_source"], options?: FromCompendiumOptions): TActor["_source"];
 }

-declare interface Actors<TActor extends Actor<null>> extends WorldCollection<TActor> {
+declare interface Actors<TActor extends Actor> extends WorldCollection<TActor> {
     get documentName(): "Actor";
 }
diff --git a/node_modules/foundry-types/client/collections/world-collection/base.d.ts b/node_modules/foundry-types/client/collections/world-collection/base.d.ts
index f996e3e..a85038c 100644
--- a/node_modules/foundry-types/client/collections/world-collection/base.d.ts
+++ b/node_modules/foundry-types/client/collections/world-collection/base.d.ts
@@ -59,7 +59,7 @@ declare global {
             pack: CompendiumCollection,
             id: string,
             updateData?: DocumentUpdateData<TDocument>,
-            options?: DocumentModificationContext<null>
+            options?: DocumentModificationContext<TDocument>
         ): Promise<TDocument | null>;

         /**
diff --git a/node_modules/foundry-types/client/collections/world-collection/folders.d.ts b/node_modules/foundry-types/client/collections/world-collection/folders.d.ts
index 5db8895..c17c66b 100644
--- a/node_modules/foundry-types/client/collections/world-collection/folders.d.ts
+++ b/node_modules/foundry-types/client/collections/world-collection/folders.d.ts
@@ -2,8 +2,8 @@
  * The Collection of Folder documents which exist within the active World.
  * This Collection is accessible within the Game object as game.folders.
  */
-declare class Folders<TFolder extends Folder> extends WorldCollection<TFolder> {
-    constructor(data?: foundry.documents.FolderSource[]);
+declare class Folders<TFolder extends Folder = Folder> extends WorldCollection<TFolder> {
+    constructor(data?: foundry.data.FolderSource[]);

     protected _expanded: Record<string, boolean>;

diff --git a/node_modules/foundry-types/client/collections/world-collection/items.d.ts b/node_modules/foundry-types/client/collections/world-collection/items.d.ts
index 11f669f..9d76392 100644
--- a/node_modules/foundry-types/client/collections/world-collection/items.d.ts
+++ b/node_modules/foundry-types/client/collections/world-collection/items.d.ts
@@ -5,6 +5,6 @@
  * @see {@link Item} The Item document
  * @see {@link ItemDirectory} The ItemDirectory sidebar directory
  */
-declare class Items<TItem extends Item<null>> extends WorldCollection<TItem> {
+declare class Items<TItem extends Item> extends WorldCollection<TItem> {
     static override documentName: "Item";
 }
diff --git a/node_modules/foundry-types/client/collections/world-collection/playlists.d.ts b/node_modules/foundry-types/client/collections/world-collection/playlists.d.ts
index 47e4689..674a595 100644
--- a/node_modules/foundry-types/client/collections/world-collection/playlists.d.ts
+++ b/node_modules/foundry-types/client/collections/world-collection/playlists.d.ts
@@ -6,9 +6,11 @@
  * @see {@link PlaylistDirectory} The PlaylistDirectory sidebar directory
  */
 declare class Playlists extends WorldCollection<Playlist> {
-    constructor(data?: foundry.documents.PlaylistSoundSource[]);
+    /** @override */
+    constructor(data?: foundry.data.PlaylistSoundData[]);

-    static override documentName: "Playlist";
+    /** @override */
+    static documentName: "Playlist";

     /** Return the subset of Playlist entities which are currently playing */
     get playing(): Playlist[];
diff --git a/node_modules/foundry-types/client/collections/world-collection/scenes.d.ts b/node_modules/foundry-types/client/collections/world-collection/scenes.d.ts
index f91e3a6..05eab6e 100644
--- a/node_modules/foundry-types/client/collections/world-collection/scenes.d.ts
+++ b/node_modules/foundry-types/client/collections/world-collection/scenes.d.ts
@@ -55,6 +55,6 @@ declare global {
         /* -------------------------------------------- */

         /** @override */
-        fromCompendium(document: TScene): foundry.documents.SceneSource;
+        fromCompendium(document: TScene): foundry.data.SceneSource;
     }
 }
diff --git a/node_modules/foundry-types/client/config.d.ts b/node_modules/foundry-types/client/config.d.ts
index 271ace7..4dbd354 100644
--- a/node_modules/foundry-types/client/config.d.ts
+++ b/node_modules/foundry-types/client/config.d.ts
@@ -2,25 +2,27 @@ import type * as TinyMCE from "tinymce";

 declare global {
     interface Config<
-        TAmbientLightDocument extends AmbientLightDocument<TScene | null>,
-        TActiveEffect extends ActiveEffect<TActor | TItem | null>,
-        TActor extends Actor<TTokenDocument | null>,
+        TAmbientLightDocument extends AmbientLightDocument,
+        TActiveEffect extends ActiveEffect,
+        TActor extends Actor,
+        TActorDirectory extends ActorDirectory<TActor>,
         TChatLog extends ChatLog,
         TChatMessage extends ChatMessage,
         TCombat extends Combat,
-        TCombatant extends Combatant<TCombat | null, TTokenDocument | null>,
+        TCombatant extends Combatant<TCombat | null, TActor | null>,
         TCombatTracker extends CombatTracker<TCombat | null>,
         TCompendiumDirectory extends CompendiumDirectory,
         THotbar extends Hotbar,
-        TItem extends Item<TActor | null>,
+        TItem extends Item,
         TMacro extends Macro,
-        TMeasuredTemplateDocument extends MeasuredTemplateDocument<TScene | null>,
-        TTileDocument extends TileDocument<TScene | null>,
-        TTokenDocument extends TokenDocument<TScene | null>,
+        TMeasuredTemplateDocument extends MeasuredTemplateDocument,
+        TTileDocument extends TileDocument,
+        TTokenDocument extends TokenDocument,
         TWallDocument extends WallDocument<TScene | null>,
         TScene extends Scene,
         TUser extends User,
-        TEffectsCanvasGroup extends EffectsCanvasGroup
+        TEffectsCanvasGroup extends EffectsCanvasGroup,
+        TJournalEntryPage extends JournalEntryPage
     > {
         /** Configure debugging flags to display additional information */
         debug: {
@@ -48,7 +50,7 @@ declare global {
                     context?: DocumentConstructionContext<TActor["parent"]>
                 ): TActor;
             };
-            collection: ConstructorOf<Actors<Actor<null>>>;
+            collection: ConstructorOf<Actors<TActor>>;
             sheetClasses: Record<
                 string,
                 Record<
@@ -60,7 +62,8 @@ declare global {
                     }
                 >
             >;
-            typeLabels: Record<string, string | undefined>;
+            typeLabels: Record<TActor['type'], string | undefined>;
+            typeIcons: Record<TActor['type'], string>,
         };

         /** Configuration for the Cards primary Document type */
@@ -114,7 +117,9 @@ declare global {
                     }
                 >
             >;
-            typeLabels: Record<string, string | undefined>;
+
+            typeLabels: Record<TItem['type'], string | undefined>;
+            typeIcons: Record<TItem['type'], string>,
         };

         /** Configuration for the Combat document */
@@ -131,9 +136,15 @@ declare global {
             };
         };

-        /** Configuration for the JournalEntry entity */
+        /** Configuration for the JournalEntry document */
         JournalEntry: {
-            documentClass: typeof JournalEntry;
+            documentClass: {
+                new (
+                    data: PreCreate<JournalEntry["_source"]>,
+                    context?: DocumentConstructionContext<null>
+                ): JournalEntry;
+            };
+            collection: Journal
             noteIcons: {
                 Anchor: string;
                 [key: string]: string;
@@ -179,11 +190,20 @@ declare global {
         /*  Embedded Documents                          */
         /* -------------------------------------------- */

+        /** Configuration for the JournalEntryPage embedded document type. */
+        JournalEntryPage: {
+          documentClass: ConstructorOf<TJournalEntryPage>,
+          typeLabels: Record<TJournalEntryPage['type'], string | undefined>;
+          typeIcons: Record<TJournalEntryPage['type'], string>,
+          defaultType: TJournalEntryPage['type'],
+          sidebarIcon: string
+        },
+
         /** Configuration for the AmbientLight embedded document type and its representation on the game Canvas */
         AmbientLight: {
             documentClass: ConstructorOf<TAmbientLightDocument>;
-            objectClass: ConstructorOf<NonNullable<TAmbientLightDocument["object"]>>;
-            layerClass: ConstructorOf<NonNullable<TAmbientLightDocument["object"]>["layer"]>;
+            objectClass: ConstructorOf<TAmbientLightDocument["object"]>;
+            layerClass: ConstructorOf<TAmbientLightDocument["object"]["layer"]>;
         };

         /** Configuration for the ActiveEffect embedded document type */
@@ -216,23 +236,26 @@ declare global {
                 rect: string;
                 ray: string;
             };
-            documentClass: ConstructorOf<TMeasuredTemplateDocument>;
-            objectClass: ConstructorOf<NonNullable<TMeasuredTemplateDocument["object"]>>;
-            layerClass: ConstructorOf<NonNullable<TMeasuredTemplateDocument["object"]>["layer"]>;
+            documentClass: new (
+                data: PreCreate<foundry.data.MeasuredTemplateSource>,
+                context?: DocumentConstructionContext<TMeasuredTemplateDocument["parent"]>
+            ) => TMeasuredTemplateDocument;
+            objectClass: ConstructorOf<TMeasuredTemplateDocument["object"]>;
+            layerClass: ConstructorOf<TMeasuredTemplateDocument["object"]["layer"]>;
         };

         /** Configuration for the Tile embedded document type and its representation on the game Canvas */
         Tile: {
             documentClass: ConstructorOf<TTileDocument>;
-            objectClass: ConstructorOf<NonNullable<TTileDocument["object"]>>;
-            layerClass: ConstructorOf<TilesLayer<NonNullable<TTileDocument["object"]>>>;
+            objectClass: ConstructorOf<TTileDocument["object"]>;
+            layerClass: ConstructorOf<BackgroundLayer>;
         };

         /** Configuration for the Token embedded document type and its representation on the game Canvas */
         Token: {
             documentClass: ConstructorOf<TTokenDocument>;
-            objectClass: ConstructorOf<NonNullable<TTokenDocument["object"]>>;
-            layerClass: ConstructorOf<NonNullable<TTokenDocument["object"]>["layer"]>;
+            objectClass: ConstructorOf<TTokenDocument["object"]>;
+            layerClass: ConstructorOf<TTokenDocument["object"]["layer"]>;
             prototypeSheetClass: ConstructorOf<TTokenDocument["sheet"]>;
         };

@@ -240,7 +263,7 @@ declare global {
         Wall: {
             documentClass: ConstructorOf<TWallDocument>;
             objectClass: ConstructorOf<Wall<TWallDocument>>;
-            layerClass: ConstructorOf<NonNullable<TWallDocument["object"]>["layer"]>;
+            layerClass: ConstructorOf<TWallDocument["object"]["layer"]>;
         };

         /* -------------------------------------------- */
@@ -290,6 +313,10 @@ declare global {
                 };
             };
             layers: {
+                background: {
+                    group: "primary";
+                    layerClass: typeof BackgroundLayer;
+                };
                 drawings: {
                     group: "primary";
                     layerClass: typeof DrawingsLayer;
@@ -300,11 +327,11 @@ declare global {
                 };
                 walls: {
                     group: "effects";
-                    layerClass: ConstructorOf<NonNullable<TWallDocument["object"]>["layer"]>;
+                    layerClass: ConstructorOf<TWallDocument["object"]["layer"]>;
                 };
                 templates: {
                     group: "primary";
-                    layerClass: ConstructorOf<NonNullable<TMeasuredTemplateDocument["object"]>["layer"]>;
+                    layerClass: ConstructorOf<TMeasuredTemplateDocument["object"]["layer"]>;
                 };
                 notes: {
                     group: "interface";
@@ -312,11 +339,11 @@ declare global {
                 };
                 tokens: {
                     group: "primary";
-                    layerClass: ConstructorOf<NonNullable<TTokenDocument["object"]>["layer"]>;
+                    layerClass: ConstructorOf<TTokenDocument["object"]["layer"]>;
                 };
-                tiles: {
+                foreground: {
                     group: "primary";
-                    layerClass: typeof TilesLayer;
+                    layerClass: typeof ForegroundLayer;
                 };
                 sounds: {
                     group: "interface";
@@ -324,7 +351,7 @@ declare global {
                 };
                 lighting: {
                     group: "effects";
-                    layerClass: ConstructorOf<NonNullable<TAmbientLightDocument["object"]>["layer"]>;
+                    layerClass: ConstructorOf<TAmbientLightDocument["object"]["layer"]>;
                 };
                 controls: {
                     group: "interface";
@@ -532,13 +559,13 @@ declare global {
         };

         ui: {
-            actors: ConstructorOf<ActorDirectory<Actor<null>>>;
+            actors: ConstructorOf<TActorDirectory>;
             chat: ConstructorOf<TChatLog>;
             combat: ConstructorOf<TCombatTracker>;
             compendium: ConstructorOf<TCompendiumDirectory>;
             controls: typeof SceneControls;
             hotbar: ConstructorOf<THotbar>;
-            items: ConstructorOf<ItemDirectory<Item<null>>>;
+            items: typeof ItemDirectory;
             // journal: typeof JournalDirectory;
             // macros: typeof MacroDirectory;
             menu: typeof MainMenu;
diff --git a/node_modules/foundry-types/client/core/hooks.d.ts b/node_modules/foundry-types/client/core/hooks.d.ts
index 1e898b7..0f66834 100644
--- a/node_modules/foundry-types/client/core/hooks.d.ts
+++ b/node_modules/foundry-types/client/core/hooks.d.ts
@@ -17,14 +17,12 @@ declare global {
     type HookParamsGetSceneControlButtons = HookParameters<"getSceneControlButtons", [SceneControl[]]>;
     type HookParamsHotbarDrop = HookParameters<"hotbarDrop", [Hotbar, unknown, string]>;
     type HookParamsLightingRefresh = HookParameters<"lightingRefresh", [LightingLayer]>;
-    type HookParamsPreCreateItem = HookParameters<
-        "preCreateItem",
-        [
-            PreCreate<foundry.documents.ItemSource>,
-            DocumentModificationContext<Actor<TokenDocument<Scene | null> | null> | null>,
-            string
-        ]
-    >;
+    type HookParamsPreCreate<T extends foundry.abstract.Document, N extends string> = HookParameters<`preCreate${N}`, [
+      T, // @param document
+      PreCreate<T>, // @param data
+      DocumentModificationContext<T>, // @param options
+      string // @param userId
+    ]>;
     type HooksParamsPreUpdateCombat = HookParameters<
         "preUpdateCombat",
         [Combat, object, { diff: boolean; advanceTime: number; [key: string]: unknown }, string]
@@ -33,24 +31,27 @@ declare global {
         "preUpdateToken",
         [
             Scene,
-            foundry.documents.TokenSource,
-            DeepPartial<foundry.documents.TokenSource>,
+            foundry.data.TokenData,
+            Partial<foundry.data.TokenData>,
             { diff: boolean; [key: string]: unknown },
             string
         ]
     >;
+    type HookParamsPreUpdate<T extends Document, N extends string> = HookParameters<`preUpdate${N}`, [T, DocumentUpdateData<T>, DocumentUpdateContext<T>, string]>
+    type HookParamsCreate<T extends Document, N extends string> = HookParameters<`create${N}`,[T,DocumentUpdateContext<T>, string]>
+
     type HookParamsRender<T extends Application, N extends string> = HookParameters<
         `render${N}`,
         [T, JQuery, ReturnType<T["getData"]>]
     >;
     type HookParamsRenderChatMessage = HookParameters<
         "renderChatMessage",
-        [ChatMessage, JQuery, foundry.documents.ChatMessageSource]
+        [ChatMessage, JQuery, foundry.data.ChatMessageSource]
     >;
     type HookParamsTargetToken = HookParameters<"targetToken", [User, Token, boolean]>;
     type HookParamsUpdate<T extends foundry.abstract.Document, N extends string> = HookParameters<
         `update${N}`,
-        [T, DocumentUpdateData<T>, DocumentModificationContext<T["parent"]>]
+        [T, DocumentUpdateData<T>, DocumentModificationContext]
     >;
     type HookParamsUpdateWorldTime = HookParameters<"updateWorldTime", [number, number]>;

@@ -60,6 +61,7 @@ declare global {
          *
          * @param hook The unique name of the hooked event
          * @param fn   The callback function which should be triggered when the hook event occurs
+         * @returns An ID number of the hooked function which can be used to turn off the hook later
          */
         static on(...args: HookParamsSetup): number;
         static on(...args: HookParamsInit): number;
@@ -72,17 +74,22 @@ declare global {
         static on(...args: HookParamsGetSceneControlButtons): number;
         static on(...args: HookParamsHotbarDrop): number;
         static on(...args: HookParamsLightingRefresh): number;
-        static on(...args: HookParamsPreCreateItem): number;
         static on(...args: HooksParamsPreUpdateCombat): number;
         static on(...args: HookParamsPreUpdateToken): number;
+        static on(...args: HookParamsPreUpdate<Actor, 'Actor'>): number
+        static on(...args: HookParamsPreUpdate<Item, 'Item'>): number
+
+        static on(...args: HookParamsPreUpdate<SettingConfig, 'Setting'>): number
+
         static on(...args: HookParamsRenderChatMessage): number;
         static on(...args: HookParamsRender<ChatLog, "ChatLog">): number;
         static on(...args: HookParamsRender<ChatPopout, "ChatPopout">): number;
         static on(...args: HookParamsRender<CombatTrackerConfig, "CombatTrackerConfig">): number;
         static on(...args: HookParamsRender<CompendiumDirectory, "CompendiumDirectory">): number;
+        static on(...args: HookParamsRender<Compendium,'Compendium'>): number
         static on(...args: HookParamsRender<Dialog, "Dialog">): number;
-        static on(...args: HookParamsRender<ActorDirectory<Actor<null>>, "ActorDirectory">): number;
-        static on(...args: HookParamsRender<ItemDirectory<Item<null>>, "ItemDirectory">): number;
+        static on(...args: HookParamsRender<ActorDirectory<Actor>, "ActorDirectory">): number;
+        static on(...args: HookParamsRender<ItemDirectory<Item>, "ItemDirectory">): number;
         static on(...args: HookParamsRender<SceneControls, "SceneControls">): number;
         static on(...args: HookParamsRender<Settings, "Settings">): number;
         static on(...args: HookParamsRender<TokenHUD, "TokenHUD">): number;
@@ -96,9 +103,19 @@ declare global {
             >
         ): number;
         static on(...args: HookParamsTargetToken): number;
+        static on(...args: HookParamsCreate<Actor, "Actor">): number
         static on(...args: HookParamsUpdate<Combat, "Combat">): number;
         static on(...args: HookParamsUpdate<Scene, "Scene">): number;
+        static on(...args: HookParamsUpdate<Actor, 'Actor'>): number
+		    static on(...args: HookParamsUpdate<Item, 'Item'>): number
         static on(...args: HookParamsUpdateWorldTime): number;
+        static on(...args: HookParamsPreCreate<Item, "Item">): number;
+        static on(...args: HookParamsPreCreate<Actor, "Actor">): number;
+        static on(...args: HookParamsPreCreate<JournalEntryPage, "JournalEntryPage">): number;
+        static on(
+          ...args: HookParameters<'preDeleteItem', [Item, any, number]>
+        ): number
+
         static on(...args: HookParameters<string, unknown[]>): number;

         /**
@@ -119,16 +136,15 @@ declare global {
         static once(...args: HookParamsGetSceneControlButtons): number;
         static once(...args: HookParamsHotbarDrop): number;
         static once(...args: HookParamsLightingRefresh): number;
-        static once(...args: HookParamsPreCreateItem): number;
         static once(...args: HookParamsPreUpdateToken): number;
         static once(...args: HookParamsRenderChatMessage): number;
-        static once(...args: HookParamsRender<ActorDirectory<Actor<null>>, "ActorDirectory">): number;
+        static once(...args: HookParamsRender<ActorDirectory<Actor>, "ActorDirectory">): number;
         static once(...args: HookParamsRender<ChatLog, "ChatLog">): number;
         static once(...args: HookParamsRender<ChatPopout, "ChatPopout">): number;
         static once(...args: HookParamsRender<CombatTrackerConfig, "CombatTrackerConfig">): number;
         static once(...args: HookParamsRender<CompendiumDirectory, "CompendiumDirectory">): number;
         static once(...args: HookParamsRender<Dialog, "Dialog">): number;
-        static once(...args: HookParamsRender<ItemDirectory<Item<null>>, "ItemDirectory">): number;
+        static once(...args: HookParamsRender<ItemDirectory<Item>, "ItemDirectory">): number;
         static once(
             ...args: HookParamsRender<JournalPageSheet<JournalEntryPage<JournalEntry | null>>, "JournalPageSheet">
         ): number;
@@ -145,8 +161,23 @@ declare global {
         static once(...args: HookParamsUpdate<Combat, "Combat">): number;
         static once(...args: HookParamsUpdate<Scene, "Scene">): number;
         static once(...args: HookParamsUpdateWorldTime): number;
+
         static once(...args: HookParameters<string, unknown[]>): number;

+        /**
+         * Notify subscribers that an error has occurred within foundry.
+         * @param {string} location                The method where the error was caught.
+         * @param {Error} error                    The error.
+         * @param {object} [options={}]            Additional options to configure behaviour.
+         * @param {string} [options.msg=""]        A message which should prefix the resulting error or notification.
+         * @param {?string} [options.log=null]     The level at which to log the error to console (if at all).
+         * @param {?string} [options.notify=null]  The level at which to spawn a notification in the UI (if at all).
+         * @param {object} [options.data={}]       Additional data to pass to the hook subscribers.
+         */
+        static onError(location: string, error: Error, options?: {
+          msg?: string, log?: string|null, notify?:string|null, data?: object
+        })
+
         /**
          * Unregister a callback handler for a particular hook event
          *
diff --git a/node_modules/foundry-types/client/core/index.d.ts b/node_modules/foundry-types/client/core/index.d.ts
index aeb1a50..0584b88 100644
--- a/node_modules/foundry-types/client/core/index.d.ts
+++ b/node_modules/foundry-types/client/core/index.d.ts
@@ -10,3 +10,4 @@ import "./socket";
 import "./sorting";
 import "./text-editor";
 import "./video";
+import "./utils"
\ No newline at end of file
diff --git a/node_modules/foundry-types/client/core/settings.d.ts b/node_modules/foundry-types/client/core/settings.d.ts
index c97020a..5674309 100644
--- a/node_modules/foundry-types/client/core/settings.d.ts
+++ b/node_modules/foundry-types/client/core/settings.d.ts
@@ -100,21 +100,37 @@ declare global {

         /**
          * Get the value of a game setting for a certain module and setting key
-         * @param module    The module namespace under which the setting is registered
+         * @param namespace    The module namespace under which the setting is registered
          * @param key       The setting key to retrieve
          */
-        get(module: "core", key: "compendiumConfiguration"): Record<string, { private: boolean; locked: boolean }>;
-        get(module: "core", key: "defaultToken"): Partial<foundry.data.PrototypeTokenSource>;
-        get(module: "core", key: "rollMode"): RollMode;
-        get(module: string, key: string): unknown;
+        get<TNamespace extends keyof ClientSettings.Config, TKey extends keyof ClientSettings.Config[TNamespace]>(namespace: TNamespace, key: TKey): ClientSettings.Config[TNamespace][TKey]

         /**
          * Get the value of a game setting for a certain module and setting key
-         * @param module    The module namespace under which the setting is registered
+         * @param namespace    The module namespace under which the setting is registered
          * @param key   The setting key to retrieve
          * @param value The data to assign to the setting key
          */
-        set(module: string, key: string, value: unknown): Promise<unknown>;
+        set<TNamespace extends keyof ClientSettings.Config, TKey extends keyof ClientSettings.Config[TNamespace]>(namespace: TNamespace, key: TKey, value: ClientSettings.Config[TNamespace][TKey]): Promise<unknown>;
+    }
+
+    interface ClientSettings {}
+
+    namespace ClientSettings {
+        type DocType = keyof typeof game.system.documentTypes
+        type DocSubtype<T extends DocType> =
+          (typeof game.system.documentTypes)[T][number]
+
+        interface Config {
+          core:
+            {
+              compendiumConfiguration: Record<string, { private: boolean; locked: boolean }>,
+              defaultToken: Partial<foundry.data.PrototypeTokenSource>
+              rollMode: RollMode
+              sheetClasses: {
+          [TDoc in DocType]: Record<DocSubtype<TDoc>, string>
+        }}
+      }
     }

     interface SettingRegistration<
diff --git a/node_modules/foundry-types/client/core/sorting.d.ts b/node_modules/foundry-types/client/core/sorting.d.ts
index 89580ad..806ba12 100644
--- a/node_modules/foundry-types/client/core/sorting.d.ts
+++ b/node_modules/foundry-types/client/core/sorting.d.ts
@@ -19,13 +19,11 @@ declare class SortingHelpers {
      */
     static performIntegerSort<T extends object>(
         source: T,
-        { target, siblings, sortKey, sortBefore }: SortingOptions<T>
+        {
+            target,
+            siblings,
+            sortKey,
+            sortBefore,
+        }: { target?: T; siblings?: T[]; sortKey?: string; sortBefore?: boolean }
     ): { target: T; update: Record<string, number> }[];
 }
-
-declare interface SortingOptions<T extends object = object> {
-    target?: T;
-    siblings?: T[];
-    sortKey?: string;
-    sortBefore?: boolean;
-}
diff --git a/node_modules/foundry-types/client/core/text-editor.d.ts b/node_modules/foundry-types/client/core/text-editor.d.ts
index 0ca6ed0..fbc9273 100644
--- a/node_modules/foundry-types/client/core/text-editor.d.ts
+++ b/node_modules/foundry-types/client/core/text-editor.d.ts
@@ -146,10 +146,10 @@ declare global {
          * Toggle playing or stopping an embedded {@link PlaylistSound} link.
          * @param doc The PlaylistSound document to play/stop.
          */
-        protected static _onPlaySound(doc: PlaylistSound<Playlist>): void;
+        protected static _onPlaySound(doc: PlaylistSound): void;

         /** Find all content links belonging to a given PlaylistSound. */
-        protected static _getSoundContentLinks(doc: PlaylistSound<Playlist>): NodeListOf<HTMLAnchorElement>;
+        protected static _getSoundContentLinks(doc: PlaylistSound): NodeListOf<HTMLAnchorElement>;

         /**
          * Begin a Drag+Drop workflow for a dynamic content link
diff --git a/node_modules/foundry-types/client/core/utils.d.ts b/node_modules/foundry-types/client/core/utils.d.ts
new file mode 100644
index 0000000..42fa171
--- /dev/null
+++ b/node_modules/foundry-types/client/core/utils.d.ts
@@ -0,0 +1,8 @@
+/**
+ * Return a reference to the Document class implementation which is configured for use.
+ * @param {string} documentName     The canonical Document name, for example "Actor"
+ * @returns {typeof foundry.abstract.Document} The configured Document class implementation
+ */
+function getDocumentClass<T extends keyof typeof CONFIG>(documentName: T): typeof CONFIG[T]['documentClass'] {
+  return CONFIG[documentName]?.documentClass;
+}
\ No newline at end of file
diff --git a/node_modules/foundry-types/client/documents/active-effect.d.ts b/node_modules/foundry-types/client/documents/active-effect.d.ts
index f7b1300..177b932 100644
--- a/node_modules/foundry-types/client/documents/active-effect.d.ts
+++ b/node_modules/foundry-types/client/documents/active-effect.d.ts
@@ -1,4 +1,4 @@
-import { ClientBaseActiveEffect } from "./client-base-mixes.mjs";
+import { ActiveEffectConstructor } from "./constructors";

 declare global {
     /**
@@ -6,25 +6,17 @@ declare global {
      * Each ActiveEffect belongs to the effects collection of its parent Document.
      * Each ActiveEffect contains a ActiveEffectData object which provides its source data.
      */
-    class ActiveEffect<
-            TParent extends
-                | Actor<TokenDocument<Scene | null> | null>
-                | Item<Actor<TokenDocument<Scene | null> | null> | null>
-                | null
-        >
-        extends ClientBaseActiveEffect<TParent>
-        implements TemporaryEffect
-    {
+    class ActiveEffect extends ActiveEffectConstructor implements TemporaryEffect {
         constructor(
-            data: PreCreate<foundry.documents.ActiveEffectSource>,
-            context?: DocumentConstructionContext<TParent>
+            data: PreCreate<foundry.data.ActiveEffectSource>,
+            context?: DocumentConstructionContext<ActiveEffect["parent"]>
         );

         /** A cached reference to the source name to avoid recurring database lookups */
         protected _sourceName: string | null;

         /** A cached reference to the ActiveEffectConfig instance which configures this effect */
-        protected override _sheet: ActiveEffectConfig<this> | null;
+        override _sheet: ActiveEffectConfig<this> | null;

         /** Summarize the active effect duration */
         get duration(): {
@@ -73,7 +65,7 @@ declare global {
          * @param change The change data being applied
          * @return The resulting applied value
          */
-        apply(actor: Actor<TokenDocument<Scene | null>>, change: foundry.documents.EffectChangeSource): unknown;
+        apply(actor: Actor, change: ApplicableChangeData<this>): unknown;

         /**
          * Apply an ActiveEffect that uses an ADD application mode.
@@ -88,10 +80,7 @@ declare global {
          * @param change The change data being applied
          * @return The resulting applied value
          */
-        protected _applyAdd(
-            actor: Actor<TokenDocument<Scene | null>>,
-            change: foundry.documents.EffectChangeSource
-        ): unknown;
+        protected _applyAdd(actor: Actor, change: ApplicableChangeData<this>): unknown;

         /**
          * Apply an ActiveEffect that uses a MULTIPLY application mode.
@@ -100,10 +89,7 @@ declare global {
          * @param change The change data being applied
          * @return The resulting applied value
          */
-        protected _applyMultiply(
-            actor: Actor<TokenDocument<Scene | null>>,
-            change: foundry.documents.EffectChangeSource
-        ): unknown;
+        protected _applyMultiply(actor: Actor, change: ApplicableChangeData<this>): unknown;

         /**
          * Apply an ActiveEffect that uses an OVERRIDE application mode.
@@ -112,10 +98,7 @@ declare global {
          * @param change The change data being applied
          * @return The resulting applied value
          */
-        protected _applyOverride(
-            actor: Actor<TokenDocument<Scene | null>>,
-            change: foundry.documents.EffectChangeSource
-        ): unknown;
+        protected _applyOverride(actor: Actor, change: ApplicableChangeData<this>): unknown;

         /**
          * Apply an ActiveEffect that uses an UPGRADE, or DOWNGRADE application mode.
@@ -124,10 +107,7 @@ declare global {
          * @param change The change data being applied
          * @return The resulting applied value
          */
-        protected _applyUpgrade(
-            actor: Actor<TokenDocument<Scene | null>>,
-            change: foundry.documents.EffectChangeSource
-        ): unknown;
+        protected _applyUpgrade(actor: Actor, change: ApplicableChangeData<this>): unknown;

         /**
          * Apply an ActiveEffect that uses a CUSTOM application mode.
@@ -135,10 +115,7 @@ declare global {
          * @param change The change data being applied
          * @return The resulting applied value
          */
-        protected _applyCustom(
-            actor: Actor<TokenDocument<Scene | null>>,
-            change: foundry.documents.EffectChangeSource
-        ): unknown;
+        protected _applyCustom(actor: Actor, change: ApplicableChangeData<this>): unknown;

         /** Get the name of the source of the Active Effect */
         protected _getSourceName(): Promise<string>;
@@ -149,17 +126,14 @@ declare global {

         protected override _preCreate(
             data: PreDocumentId<this["_source"]>,
-            options: DocumentModificationContext<TParent>,
+            options: DocumentModificationContext,
             user: User
         ): Promise<void>;
     }

-    interface ActiveEffect<
-        TParent extends
-            | Actor<TokenDocument<Scene | null> | null>
-            | Item<Actor<TokenDocument<Scene | null> | null> | null>
-            | null
-    > extends ClientBaseActiveEffect<TParent> {
+    interface ActiveEffect {
+        readonly parent: Actor | Item;
+
         disabled: boolean;
         icon: ImageFilePath;
         tint?: string;
@@ -171,4 +145,8 @@ declare global {
         icon: ImageFilePath;
         tint?: string;
     }
+
+    interface ApplicableChangeData<T extends ActiveEffect> extends foundry.data.EffectChangeSource {
+        effect: T;
+    }
 }
diff --git a/node_modules/foundry-types/client/documents/actor.d.ts b/node_modules/foundry-types/client/documents/actor.d.ts
index 84ef296..3645dfe 100644
--- a/node_modules/foundry-types/client/documents/actor.d.ts
+++ b/node_modules/foundry-types/client/documents/actor.d.ts
@@ -1,4 +1,4 @@
-import { ClientBaseActor } from "./client-base-mixes.mjs";
+import { ActorConstructor } from "./constructors";

 declare global {
     /**
@@ -19,11 +19,14 @@ declare global {
      * @example <caption>Retrieve an existing Actor</caption>
      * let actor = game.actors.get(actorId);
      */
-    class Actor<TParent extends TokenDocument<Scene | null> | null> extends ClientBaseActor<TParent> {
-        constructor(data: PreCreate<foundry.documents.ActorSource>, context?: DocumentConstructionContext<TParent>);
+    class Actor<
+        TParent extends TokenDocument = TokenDocument,
+        TItemTypeMap extends ItemTypeMap = ItemTypeMap
+    > extends ActorConstructor {
+        constructor(data: PreCreate<foundry.data.ActorSource>, context?: DocumentConstructionContext<TParent | null>);

         /** An object that tracks which tracks the changes to the data model which were applied by active effects */
-        overrides: Omit<DeepPartial<this["_source"]>, "prototypeToken">;
+        overrides: DeepPartial<this["_source"]> & { token?: TParent["_source"] };

         /**
          * A cached array of image paths which can be used for this Actor's token.
@@ -38,7 +41,7 @@ declare global {
         get img(): ImageFilePath;

         /** Provide an object which organizes all embedded Item instances by their type */
-        get itemTypes(): object;
+        get itemTypes(): { [K in keyof TItemTypeMap]: Embedded<TItemTypeMap[K]>[] };

         /** Test whether an Actor is a synthetic representation of a Token (if true) or a full Document (if false) */
         get isToken(): boolean;
@@ -67,16 +70,25 @@ declare global {
          * @param [document=false] Return the Document instance rather than the PlaceableObject
          * @return An array of Token instances in the current Scene which reference this Actor.
          */
+        getActiveTokens(linked: boolean | undefined, document: true): Embedded<NonNullable<TParent>>[];
+        getActiveTokens(linked?: undefined, document?: undefined): NonNullable<TParent["object"]>[];
         getActiveTokens(
             linked?: boolean,
             document?: boolean
-        ): Token<TokenDocument<Scene | null>>[] | TokenDocument<Scene | null>[];
+        ): Embedded<NonNullable<TParent>>[] | NonNullable<TParent["object"]>[];

         /** Prepare a data object which defines the data schema used by dice roll commands against this Actor */
         getRollData(): Record<string, unknown>;

         protected override _getSheetClass(): ConstructorOf<NonNullable<this["_sheet"]>>;

+        /**
+         * Create a new TokenData object which can be used to create a Token representation of the Actor.
+         * @param [data={}] Additional data, such as x, y, rotation, etc. for the created token data
+         * @return The created TokenData instance
+         */
+        getTokenData(data?: DocumentModificationContext): Promise<TParent["data"]>;
+
         /** Get an Array of Token images which could represent this Actor */
         getTokenImages(): Promise<ImageFilePath[]>;

@@ -118,37 +130,37 @@ declare global {

         protected override _preCreate(
             data: PreDocumentId<this["_source"]>,
-            options: DocumentModificationContext<TParent>,
+            options: DocumentModificationContext<this>,
             user: User
         ): Promise<void>;

         protected override _onUpdate(
             changed: DeepPartial<this["_source"]>,
-            options: DocumentUpdateContext<TParent>,
+            options: DocumentUpdateContext<this>,
             userId: string
         ): void;

         protected override _onCreateEmbeddedDocuments(
             embeddedName: "ActiveEffect" | "Item",
-            documents: ActiveEffect<this>[] | Item<this>[],
-            result: ActiveEffect<this>["_source"][] | Item<this>["_source"][],
-            options: DocumentModificationContext<this>,
+            documents: ActiveEffect[] | Item[],
+            result: foundry.data.ActiveEffectSource[] | foundry.data.ItemSource[],
+            options: DocumentModificationContext,
             userId: string
         ): void;

         protected override _onUpdateEmbeddedDocuments(
             embeddedName: "ActiveEffect" | "Item",
-            documents: ActiveEffect<this>[] | Item<this>[],
-            result: ActiveEffect<this>["_source"][] | Item<this>["_source"][],
-            options: DocumentUpdateContext<this>,
+            documents: ActiveEffect[] | Item[],
+            result: foundry.data.ActiveEffectSource[] | foundry.data.ItemSource[],
+            options: DocumentModificationContext,
             userId: string
         ): void;

         protected override _onDeleteEmbeddedDocuments(
             embeddedName: "ActiveEffect" | "Item",
-            documents: ActiveEffect<this>[] | Item<this>[],
-            result: string[],
-            options: DocumentModificationContext<this>,
+            documents: ActiveEffect[] | Item[],
+            result: foundry.data.ActiveEffectSource[] | foundry.data.ItemSource[],
+            options: DocumentModificationContext,
             userId: string
         ): void;

@@ -159,34 +171,58 @@ declare global {
         protected _onEmbeddedDocumentChange(embeddedName: "Item" | "ActiveEffect"): void;
     }

-    interface Actor<TParent extends TokenDocument<Scene | null> | null> extends ClientBaseActor<TParent> {
-        readonly effects: foundry.abstract.EmbeddedCollection<ActiveEffect<this>>;
-        readonly items: foundry.abstract.EmbeddedCollection<Item<this>>;
+    interface Actor<TParent extends TokenDocument = TokenDocument> {
+        readonly effects: foundry.abstract.EmbeddedCollection<ActiveEffect>;
+        readonly items: foundry.abstract.EmbeddedCollection<Item>;
+        readonly parent: TParent | null;

         prototypeToken: foundry.data.PrototypeToken;

-        _sheet: ActorSheet<this> | null;
+        get collection(): Actors<this>;
+
+        _sheet: ActorSheet<this, Item> | null;

-        get sheet(): ActorSheet<this>;
+        get sheet(): ActorSheet<this, Item>;

-        get folder(): Folder<Actor<null>> | null;
+        get folder(): Folder<this> | null;

         deleteEmbeddedDocuments(
             embeddedName: "ActiveEffect",
-            ids: string[],
-            context?: DocumentModificationContext<this>
-        ): Promise<CollectionValue<this["effects"]>[]>;
+            dataId: string[],
+            context?: DocumentModificationContext
+        ): Promise<ActiveEffect[]>;
         deleteEmbeddedDocuments(
             embeddedName: "Item",
-            ids: string[],
-            context?: DocumentModificationContext<this>
-        ): Promise<CollectionValue<this["items"]>[]>;
+            dataId: string[],
+            context?: DocumentModificationContext
+        ): Promise<Item[]>;
         deleteEmbeddedDocuments(
             embeddedName: "ActiveEffect" | "Item",
-            ids: string[],
-            context?: DocumentModificationContext<this>
-        ): Promise<CollectionValue<this["effects"]>[] | CollectionValue<this["items"]>[]>;
+            dataId: string[],
+            context?: DocumentModificationContext
+        ): Promise<ActiveEffect[] | Item[]>;
+    }
+
+    namespace Actor {
+        function create<A extends Actor>(
+            this: ConstructorOf<A>,
+            data: PreCreate<A["_source"]>,
+            context?: DocumentModificationContext
+        ): Promise<A | undefined>;
+        function create<A extends Actor>(
+            this: ConstructorOf<A>,
+            data: PreCreate<A["_source"]>[],
+            context?: DocumentModificationContext
+        ): Promise<A[]>;
+        function create<A extends Actor>(
+            this: ConstructorOf<A>,
+            data: PreCreate<A["_source"]>[] | PreCreate<A["_source"]>,
+            context?: DocumentModificationContext
+        ): Promise<A[] | A | undefined>;
     }

     type ActorUUID = `Actor.${string}` | CompendiumUUID;
 }
+
+type ActorTypeMap = Record<string, Actor>;
+type ItemTypeMap = Record<string, Item>;
diff --git a/node_modules/foundry-types/client/documents/ambient-light-document.d.ts b/node_modules/foundry-types/client/documents/ambient-light-document.d.ts
index 5398f7f..9cb8634 100644
--- a/node_modules/foundry-types/client/documents/ambient-light-document.d.ts
+++ b/node_modules/foundry-types/client/documents/ambient-light-document.d.ts
@@ -1,12 +1,12 @@
-import { CanvasBaseAmbientLight } from "./client-base-mixes.mjs";
+import { AmbientLightDocumentConstructor } from "./constructors";

 declare global {
-    class AmbientLightDocument<TParent extends Scene | null> extends CanvasBaseAmbientLight<TParent> {
+    class AmbientLightDocument extends AmbientLightDocumentConstructor {
         /** Is this ambient light source global in nature? */
         get isGlobal(): boolean;
     }

-    interface AmbientLightDocument<TParent extends Scene | null> extends CanvasBaseAmbientLight<TParent> {
-        get object(): AmbientLight<this> | null;
+    interface AmbientLightDocument {
+        readonly parent: Scene | null;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/ambient-sound-document.d.ts b/node_modules/foundry-types/client/documents/ambient-sound-document.d.ts
index 006de5b..c94ffc1 100644
--- a/node_modules/foundry-types/client/documents/ambient-sound-document.d.ts
+++ b/node_modules/foundry-types/client/documents/ambient-sound-document.d.ts
@@ -1,9 +1,9 @@
-import { CanvasBaseAmbientSound } from "./client-base-mixes.mjs";
+import { AmbientSoundDocumentConstructor } from "./constructors";

 declare global {
-    class AmbientSoundDocument<TParent extends Scene | null> extends CanvasBaseAmbientSound<TParent> {}
+    class AmbientSoundDocument extends AmbientSoundDocumentConstructor {}

-    interface AmbientSoundDocument<TParent extends Scene | null> extends CanvasBaseAmbientSound<TParent> {
-        readonly _object: AmbientSound<this> | null;
+    interface AmbientSoundDocument {
+        readonly parent: Scene | null;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/cards.d.ts b/node_modules/foundry-types/client/documents/cards.d.ts
index 9035c96..c5ad03b 100644
--- a/node_modules/foundry-types/client/documents/cards.d.ts
+++ b/node_modules/foundry-types/client/documents/cards.d.ts
@@ -1,9 +1,9 @@
-import { ClientBaseCards } from "./client-base-mixes.mjs";
+import { CardsConstructor } from "./constructors";

 declare global {
     /**
      * The client-side Cards document which extends the common BaseCards model.
      * Each Cards document contains CardsData which defines its data schema.
      */
-    class Cards extends ClientBaseCards {}
+    class Cards extends CardsConstructor {}
 }
diff --git a/node_modules/foundry-types/client/documents/chat-message.d.ts b/node_modules/foundry-types/client/documents/chat-message.d.ts
index 5c6962e..f162896 100644
--- a/node_modules/foundry-types/client/documents/chat-message.d.ts
+++ b/node_modules/foundry-types/client/documents/chat-message.d.ts
@@ -1,4 +1,4 @@
-import { ClientBaseChatMessage } from "./client-base-mixes.mjs";
+import { ChatMessageConstructor } from "./constructors";

 declare global {
     /**
@@ -7,8 +7,8 @@ declare global {
      * @see {@link data.ChatMessageData} The ChatMessage data schema
      * @see {@link documents.Messages} The world-level collection of ChatMessage documents
      */
-    class ChatMessage extends ClientBaseChatMessage {
-        constructor(data: PreCreate<foundry.documents.ChatMessageSource>, context?: DocumentConstructionContext<null>);
+    class ChatMessage<TActor extends Actor = Actor> extends ChatMessageConstructor {
+        constructor(data: PreCreate<foundry.data.ChatMessageSource>, context?: DocumentConstructionContext<null>);

         flavor: string;

@@ -50,7 +50,15 @@ declare global {
          * @param rollMode The rollMode preference to apply to this message data
          * @returns The modified ChatMessage data with rollMode preferences applied
          */
-        static applyRollMode(chatData: ChatMessage["_source"], rollMode: RollMode): ChatMessage["_source"];
+        static applyRollMode(
+            chatData: foundry.data.ChatMessageSource,
+            rollMode: RollMode
+        ): foundry.data.ChatMessageSource;
+        static applyRollMode(chatData: foundry.data.ChatMessageData, rollMode: RollMode): foundry.data.ChatMessageData;
+        static applyRollMode(
+            chatData: foundry.data.ChatMessageSource | foundry.data.ChatMessageData,
+            rollMode: RollMode
+        ): foundry.data.ChatMessageSource | foundry.data.ChatMessageData;

         /**
          * Update the data of a ChatMessage instance to apply a requested rollMode
@@ -75,10 +83,10 @@ declare global {
             alias,
         }?: {
             scene?: Scene | null;
-            actor?: Actor<TokenDocument<Scene | null> | null> | null;
-            token?: TokenDocument<Scene | null> | null;
+            actor?: Actor | null;
+            token?: TokenDocument | null;
             alias?: string;
-        }): foundry.documents.ChatSpeakerData;
+        }): foundry.data.ChatSpeakerSource;

         /** A helper to prepare the speaker object based on a target Token */
         protected static _getSpeakerFromToken({ token, alias }: { token: Token; alias?: string }): {
@@ -97,7 +105,7 @@ declare global {
             alias,
         }: {
             scene?: Scene;
-            actor: Actor<TokenDocument<Scene | null> | null>;
+            actor: Actor;
             alias?: string;
         }): {
             scene: string | null;
@@ -126,9 +134,7 @@ declare global {
          * Obtain an Actor instance which represents the speaker of this message (if any)
          * @param speaker The speaker data object
          */
-        static getSpeakerActor(
-            speaker: DeepPartial<foundry.documents.ChatSpeakerData>
-        ): Actor<TokenDocument<Scene | null> | null> | null;
+        static getSpeakerActor(speaker: DeepPartial<foundry.data.ChatSpeakerSource>): Actor | null;

         /** Obtain a data object used to evaluate any dice rolls associated with this particular chat message */
         getRollData(): object;
@@ -150,35 +156,35 @@ declare global {
         protected _renderRollContent: (messageData: ChatMessageRenderData) => Promise<void>;

         protected override _preUpdate(
-            changed: DeepPartial<this["_source"]>,
-            options: DocumentModificationContext<null>,
-            user: User
+            changed: DeepPartial<foundry.data.ChatMessageSource>,
+            options: DocumentModificationContext<this>,
+            user: User<TActor>
         ): Promise<void>;

         protected override _onCreate(
-            data: this["_source"],
-            options: DocumentModificationContext<null>,
+            data: foundry.data.ChatMessageSource,
+            options: DocumentModificationContext<this>,
             userId: string
         ): void;

         protected override _onUpdate(
             changed: DeepPartial<this["_source"]>,
-            options: DocumentModificationContext<null>,
+            options: DocumentModificationContext<this>,
             userId: string
         ): void;

-        protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
+        protected override _onDelete(options: DocumentModificationContext, userId: string): void;

         /** Export the content of the chat message into a standardized log format */
         export(): string;
     }

     namespace ChatMessage {
-        function create<TDocument extends ChatMessage>(
-            this: ConstructorOf<TDocument>,
-            data: PreCreate<TDocument["_source"]>[],
+        function create<T extends ChatMessage>(
+            this: ConstructorOf<T>,
+            data: PreCreate<T["_source"]>[],
             context?: ChatMessageModificationContext
-        ): Promise<TDocument[]>;
+        ): Promise<T[]>;
         function create<T extends ChatMessage>(
             this: ConstructorOf<T>,
             data: PreCreate<T["_source"]>,
@@ -189,10 +195,16 @@ declare global {
             data: PreCreate<T["_source"]>[] | PreCreate<T["_source"]>,
             context?: ChatMessageModificationContext
         ): Promise<T[] | T | undefined>;
+
+        const implementation: typeof ChatMessage;
+    }
+
+    interface ChatMessageModificationContext extends DocumentModificationContext {
+        rollMode?: RollMode | "roll";
     }

     interface ChatMessageRenderData {
-        message: RawObject<ChatMessage>;
+        message: RawObject<foundry.data.ChatMessageData>;
         user: User;
         author: User;
         alias: string;
diff --git a/node_modules/foundry-types/client/documents/client-base-mixes.d.mts b/node_modules/foundry-types/client/documents/client-base-mixes.d.mts
deleted file mode 100644
index df0b2d4..0000000
--- a/node_modules/foundry-types/client/documents/client-base-mixes.d.mts
+++ /dev/null
@@ -1,9834 +0,0 @@
-declare class ClientBaseAmbientLight<TParent extends ClientBaseScene | null> extends foundry.documents
-    .BaseAmbientLight<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-/**
- * A specialized sub-class of the ClientDocumentMixin which is used for document types that are intended to be
- * represented upon the game Canvas.
- * @category - Mixins
- */
-export class CanvasBaseAmbientLight<TParent extends ClientBaseScene | null> extends ClientBaseAmbientLight<TParent> {
-    /** A reference to the PlaceableObject instance which represents this Embedded Document. */
-    _object: PlaceableObject<this> | null;
-
-    /** Has this object been deliberately destroyed as part of the deletion workflow? */
-    protected _destroyed: boolean;
-
-    constructor(data: object, context: DocumentConstructionContext<TParent>);
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** A lazily constructed PlaceableObject instance which can represent this Document on the game canvas. */
-    get object(): this["_object"];
-
-    /** A reference to the CanvasLayer which contains Document objects of this type. */
-    get layer(): NonNullable<this["object"]>["layer"] | null;
-
-    /** An indicator for whether this document is currently rendered on the game canvas. */
-    get rendered(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    /**
-     * @see abstract.Document#_onCreate
-     */
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onUpdate
-     */
-    protected override _onUpdate(
-        changed: DeepPartial<this["_source"]>,
-        options: DocumentUpdateContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onDelete
-     */
-    protected _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-}
-
-export interface CanvasBaseAmbientLight<TParent extends ClientBaseScene | null>
-    extends ClientBaseAmbientLight<TParent> {
-    // System note: in most but not all canvas documents
-    hidden?: boolean;
-}
-
-declare class ClientBaseAmbientSound<TParent extends ClientBaseScene | null> extends foundry.documents
-    .BaseAmbientSound<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-/**
- * A specialized sub-class of the ClientDocumentMixin which is used for document types that are intended to be
- * represented upon the game Canvas.
- * @category - Mixins
- */
-export class CanvasBaseAmbientSound<TParent extends ClientBaseScene | null> extends ClientBaseAmbientSound<TParent> {
-    /** A reference to the PlaceableObject instance which represents this Embedded Document. */
-    _object: PlaceableObject<this> | null;
-
-    /** Has this object been deliberately destroyed as part of the deletion workflow? */
-    protected _destroyed: boolean;
-
-    constructor(data: object, context: DocumentConstructionContext<TParent>);
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** A lazily constructed PlaceableObject instance which can represent this Document on the game canvas. */
-    get object(): this["_object"];
-
-    /** A reference to the CanvasLayer which contains Document objects of this type. */
-    get layer(): NonNullable<this["object"]>["layer"] | null;
-
-    /** An indicator for whether this document is currently rendered on the game canvas. */
-    get rendered(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    /**
-     * @see abstract.Document#_onCreate
-     */
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onUpdate
-     */
-    protected override _onUpdate(
-        changed: DeepPartial<this["_source"]>,
-        options: DocumentUpdateContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onDelete
-     */
-    protected _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-}
-
-export interface CanvasBaseAmbientSound<TParent extends ClientBaseScene | null>
-    extends ClientBaseAmbientSound<TParent> {
-    // System note: in most but not all canvas documents
-    hidden?: boolean;
-}
-
-export class ClientBaseActiveEffect<TParent extends ClientBaseActor<any> | ClientBaseItem<any> | null> extends foundry
-    .documents.BaseActiveEffect<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseActor<TParent extends ClientBaseToken<any> | null> extends foundry.documents.BaseActor<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseAdventure extends foundry.documents.BaseAdventure {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<null>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseCards extends foundry.documents.BaseCards {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<null>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseChatMessage extends foundry.documents.BaseChatMessage {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<null>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseCombat extends foundry.documents.BaseCombat {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<null>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseCombatant<TParent extends ClientBaseCombat | null> extends foundry.documents
-    .BaseCombatant<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-declare class ClientBaseDrawing<TParent extends ClientBaseScene | null> extends foundry.documents.BaseDrawing<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-/**
- * A specialized sub-class of the ClientDocumentMixin which is used for document types that are intended to be
- * represented upon the game Canvas.
- * @category - Mixins
- */
-export class CanvasBaseDrawing<TParent extends ClientBaseScene | null> extends ClientBaseDrawing<TParent> {
-    /** A reference to the PlaceableObject instance which represents this Embedded Document. */
-    _object: PlaceableObject<this> | null;
-
-    /** Has this object been deliberately destroyed as part of the deletion workflow? */
-    protected _destroyed: boolean;
-
-    constructor(data: object, context: DocumentConstructionContext<TParent>);
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** A lazily constructed PlaceableObject instance which can represent this Document on the game canvas. */
-    get object(): this["_object"];
-
-    /** A reference to the CanvasLayer which contains Document objects of this type. */
-    get layer(): NonNullable<this["object"]>["layer"] | null;
-
-    /** An indicator for whether this document is currently rendered on the game canvas. */
-    get rendered(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    /**
-     * @see abstract.Document#_onCreate
-     */
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onUpdate
-     */
-    protected override _onUpdate(
-        changed: DeepPartial<this["_source"]>,
-        options: DocumentUpdateContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onDelete
-     */
-    protected _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-}
-
-export interface CanvasBaseDrawing<TParent extends ClientBaseScene | null> extends ClientBaseDrawing<TParent> {
-    // System note: in most but not all canvas documents
-    hidden?: boolean;
-}
-
-export class ClientBaseFogExploration extends foundry.documents.BaseFogExploration {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<null>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): null;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseFolder extends foundry.documents.BaseFolder {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<null>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseItem<TParent extends ClientBaseActor<any> | null> extends foundry.documents.BaseItem<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseJournalEntry extends foundry.documents.BaseJournalEntry {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<null>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseJournalEntryPage<TParent extends ClientBaseJournalEntry | null> extends foundry.documents
-    .BaseJournalEntryPage<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseMacro extends foundry.documents.BaseMacro {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<null>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-declare class ClientBaseMeasuredTemplate<TParent extends ClientBaseScene | null> extends foundry.documents
-    .BaseMeasuredTemplate<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-/**
- * A specialized sub-class of the ClientDocumentMixin which is used for document types that are intended to be
- * represented upon the game Canvas.
- * @category - Mixins
- */
-export class CanvasBaseMeasuredTemplate<
-    TParent extends ClientBaseScene | null
-> extends ClientBaseMeasuredTemplate<TParent> {
-    /** A reference to the PlaceableObject instance which represents this Embedded Document. */
-    _object: PlaceableObject<this> | null;
-
-    /** Has this object been deliberately destroyed as part of the deletion workflow? */
-    protected _destroyed: boolean;
-
-    constructor(data: object, context: DocumentConstructionContext<TParent>);
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** A lazily constructed PlaceableObject instance which can represent this Document on the game canvas. */
-    get object(): this["_object"];
-
-    /** A reference to the CanvasLayer which contains Document objects of this type. */
-    get layer(): NonNullable<this["object"]>["layer"] | null;
-
-    /** An indicator for whether this document is currently rendered on the game canvas. */
-    get rendered(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    /**
-     * @see abstract.Document#_onCreate
-     */
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onUpdate
-     */
-    protected override _onUpdate(
-        changed: DeepPartial<this["_source"]>,
-        options: DocumentUpdateContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onDelete
-     */
-    protected _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-}
-
-export interface CanvasBaseMeasuredTemplate<TParent extends ClientBaseScene | null>
-    extends ClientBaseMeasuredTemplate<TParent> {
-    // System note: in most but not all canvas documents
-    hidden?: boolean;
-}
-
-declare class ClientBaseNote<TParent extends ClientBaseScene | null> extends foundry.documents.BaseNote<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-/**
- * A specialized sub-class of the ClientDocumentMixin which is used for document types that are intended to be
- * represented upon the game Canvas.
- * @category - Mixins
- */
-export class CanvasBaseNote<TParent extends ClientBaseScene | null> extends ClientBaseNote<TParent> {
-    /** A reference to the PlaceableObject instance which represents this Embedded Document. */
-    _object: PlaceableObject<this> | null;
-
-    /** Has this object been deliberately destroyed as part of the deletion workflow? */
-    protected _destroyed: boolean;
-
-    constructor(data: object, context: DocumentConstructionContext<TParent>);
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** A lazily constructed PlaceableObject instance which can represent this Document on the game canvas. */
-    get object(): this["_object"];
-
-    /** A reference to the CanvasLayer which contains Document objects of this type. */
-    get layer(): NonNullable<this["object"]>["layer"] | null;
-
-    /** An indicator for whether this document is currently rendered on the game canvas. */
-    get rendered(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    /**
-     * @see abstract.Document#_onCreate
-     */
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onUpdate
-     */
-    protected override _onUpdate(
-        changed: DeepPartial<this["_source"]>,
-        options: DocumentUpdateContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onDelete
-     */
-    protected _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-}
-
-export interface CanvasBaseNote<TParent extends ClientBaseScene | null> extends ClientBaseNote<TParent> {
-    // System note: in most but not all canvas documents
-    hidden?: boolean;
-}
-
-export class ClientBasePlaylist extends foundry.documents.BasePlaylist {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<null>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBasePlaylistSound<TParent extends ClientBasePlaylist | null> extends foundry.documents
-    .BasePlaylistSound<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseRollTable extends foundry.documents.BaseRollTable {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<null>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseScene extends foundry.documents.BaseScene {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<null>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-export class ClientBaseTableResult<TParent extends ClientBaseRollTable | null> extends foundry.documents
-    .BaseTableResult<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-declare class ClientBaseTile<TParent extends ClientBaseScene | null> extends foundry.documents.BaseTile<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-/**
- * A specialized sub-class of the ClientDocumentMixin which is used for document types that are intended to be
- * represented upon the game Canvas.
- * @category - Mixins
- */
-export class CanvasBaseTile<TParent extends ClientBaseScene | null> extends ClientBaseTile<TParent> {
-    /** A reference to the PlaceableObject instance which represents this Embedded Document. */
-    _object: PlaceableObject<this> | null;
-
-    /** Has this object been deliberately destroyed as part of the deletion workflow? */
-    protected _destroyed: boolean;
-
-    constructor(data: object, context: DocumentConstructionContext<TParent>);
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** A lazily constructed PlaceableObject instance which can represent this Document on the game canvas. */
-    get object(): this["_object"];
-
-    /** A reference to the CanvasLayer which contains Document objects of this type. */
-    get layer(): NonNullable<this["object"]>["layer"] | null;
-
-    /** An indicator for whether this document is currently rendered on the game canvas. */
-    get rendered(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    /**
-     * @see abstract.Document#_onCreate
-     */
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onUpdate
-     */
-    protected override _onUpdate(
-        changed: DeepPartial<this["_source"]>,
-        options: DocumentUpdateContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onDelete
-     */
-    protected _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-}
-
-export interface CanvasBaseTile<TParent extends ClientBaseScene | null> extends ClientBaseTile<TParent> {
-    // System note: in most but not all canvas documents
-    hidden?: boolean;
-}
-
-declare class ClientBaseToken<TParent extends ClientBaseScene | null> extends foundry.documents.BaseToken<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-/**
- * A specialized sub-class of the ClientDocumentMixin which is used for document types that are intended to be
- * represented upon the game Canvas.
- * @category - Mixins
- */
-export class CanvasBaseToken<TParent extends ClientBaseScene | null> extends ClientBaseToken<TParent> {
-    /** A reference to the PlaceableObject instance which represents this Embedded Document. */
-    _object: PlaceableObject<this> | null;
-
-    /** Has this object been deliberately destroyed as part of the deletion workflow? */
-    protected _destroyed: boolean;
-
-    constructor(data: object, context: DocumentConstructionContext<TParent>);
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** A lazily constructed PlaceableObject instance which can represent this Document on the game canvas. */
-    get object(): this["_object"];
-
-    /** A reference to the CanvasLayer which contains Document objects of this type. */
-    get layer(): NonNullable<this["object"]>["layer"] | null;
-
-    /** An indicator for whether this document is currently rendered on the game canvas. */
-    get rendered(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    /**
-     * @see abstract.Document#_onCreate
-     */
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onUpdate
-     */
-    protected override _onUpdate(
-        changed: DeepPartial<this["_source"]>,
-        options: DocumentUpdateContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onDelete
-     */
-    protected _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-}
-
-export interface CanvasBaseToken<TParent extends ClientBaseScene | null> extends ClientBaseToken<TParent> {
-    // System note: in most but not all canvas documents
-    hidden?: boolean;
-}
-
-export class ClientBaseUser extends foundry.documents.BaseUser {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<null>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<null>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-declare class ClientBaseWall<TParent extends ClientBaseScene | null> extends foundry.documents.BaseWall<TParent> {
-    protected _sheet: FormApplication<this> | null;
-
-    /**
-     * A collection of Application instances which should be re-rendered whenever this document is updated.
-     * The keys of this object are the application ids and the values are Application instances. Each
-     * Application in this object will have its render method called by {@link Document#render}.
-     * @see {@link Document#render}
-     */
-    apps: { [K in number]?: Application };
-
-    constructor(data: object, context?: DocumentConstructionContext<TParent>);
-
-    static override name: string;
-
-    protected override _initialize(options?: Record<string, unknown>): void;
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** Return a reference to the parent Collection instance which contains this Document. */
-    get collection(): Collection<this>;
-
-    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
-    get compendium(): CompendiumCollection<CompendiumDocument> | undefined;
-
-    /**
-     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
-     * Different Document types may have more specialized rules for what constitutes ownership.
-     */
-    get isOwner(): boolean;
-
-    /** Test whether this Document is owned by any non-Gamemaster User. */
-    get hasPlayerOwner(): boolean;
-
-    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
-    get limited(): boolean;
-
-    /** Return a string which creates a dynamic link to this Document instance. */
-    get link(): string;
-
-    /**
-     * Return the permission level that the current game User has over this Document.
-     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
-     *
-     * @example Get the permission level the current user has for a document
-     * \`\`\`js
-     * game.user.id; // "dkasjkkj23kjf"
-     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
-     * actor.permission; // 2
-     * \`\`\`
-     */
-    get permission(): DocumentOwnershipLevel;
-
-    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): FormApplication<this>;
-
-    /** A Universally Unique Identifier (uuid) for this Document instance. */
-    get uuid(): DocumentUUID;
-
-    /**
-     * A boolean indicator for whether the current game User has at least limited visibility for this Document.
-     * Different Document types may have more specialized rules for what determines visibility.
-     */
-    get visible(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Methods                                     */
-    /* -------------------------------------------- */
-
-    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
-    protected _getSheetClass(): Maybe<Function>;
-
-    /**
-     * Prepare data for the Document. This method is called automatically by the DataModel#_initialize workflow.
-     * This method provides an opportunity for Document classes to define special data preparation logic.
-     * The work done by this method should be idempotent. There are situations in which prepareData may be called more
-     * than once.
-     */
-    prepareData(): void;
-
-    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
-    prepareBaseData(): void;
-
-    /**
-     * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
-     */
-    prepareEmbeddedDocuments(): void;
-
-    /**
-     * Apply transformations or derivations to the values of the source data object.
-     * Compute data fields whose values are not stored to the database.
-     */
-    prepareDerivedData(): void;
-
-    /**
-     * Render all of the Application instances which are connected to this document by calling their respective
-     * @see Application#render
-     * @param [force=false] Force rendering
-     * @param [context={}] Optional context
-     */
-    render(force?: boolean, context?: RenderOptions): void;
-
-    /**
-     * Determine the sort order for this Document by positioning it relative a target sibling.
-     * See SortingHelper.performIntegerSort for more details
-     * @param [options]            Sorting options provided to SortingHelper.performIntegerSort
-     * @param [options.updateData] Additional data changes which are applied to each sorted document
-     * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
-     * @returns The Document after it has been re-sorted
-     */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
-
-    /**
-     * Construct a UUID relative to another document.
-     * @param doc The document to compare against.
-     */
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
-
-    /**
-     * Handle clicking on a content link for this document.
-     * @param event    The triggering click event.
-     */
-    protected _onClickDocumentLink(event: MouseEvent): Promise<this["sheet"]>;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preCreateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of created Documents
-     * @param result       An Array of created data objects
-     * @param options      Options which modified the creation operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onCreateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preUpdateEmbeddedDocuments(
-        embeddedName: string,
-        result: object[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of updated Documents
-     * @param result       An Array of incremental data objects
-     * @param options      Options which modified the update operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onUpdateEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: object,
-        options: DocumentUpdateContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _preDeleteEmbeddedDocuments(
-        embeddedName: string,
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /**
-     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
-     * @param embeddedName The name of the embedded Document type
-     * @param documents    An Array of deleted Documents
-     * @param result       An Array of document IDs being deleted
-     * @param options      Options which modified the deletion operation
-     * @param userId       The ID of the User who triggered the operation
-     */
-    protected _onDeleteEmbeddedDocuments(
-        embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
-        result: string[],
-        options: DocumentModificationContext<this>,
-        userId: string
-    ): void;
-
-    /** Gets the default new name for a Document */
-    static defaultName(): string;
-
-    /* -------------------------------------------- */
-    /*  Importing and Exporting                     */
-    /* -------------------------------------------- */
-
-    /**
-     * Present a Dialog form to create a new Document of this type.
-     * Choose a name and a type from a select menu of types.
-     * @param [data]       Initial data with which to populate the creation form
-     * @param [context={}] Additional context options or dialog positioning options
-     * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
-     */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
-
-    /**
-     * Present a Dialog form to confirm deletion of this Document.
-     * @param [options] Positioning and sizing options for the resulting dialog
-     * @return A Promise which resolves to the deleted Document
-     */
-    deleteDialog(options?: Record<string, unknown>): Promise<this>;
-
-    /**
-     * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
-     */
-    exportToJSON(options?: Record<string, unknown>): void;
-
-    /**
-     * Create a content link for this Document.
-     * @param [options] Additional options to configure how the link is constructed.
-     * @param [options.attrs]   Attributes to set on the link.
-     * @param [options.dataset] Custom data- attributes to set on the link.
-     * @param [options.classes] Classes to add to the link.
-     * @param [options.name]    A name to use for the Document, if different from the Document's name.
-     * @param [options.icon]    A font-awesome icon class to use as the icon, if different to the Document's configured sidebarIcon.
-     */
-    toAnchor(options?: {
-        attrs?: Record<string, string>;
-        dataset?: Record<string, string>;
-        classes?: string[];
-        name?: string;
-        icon?: string;
-    }): HTMLAnchorElement;
-
-    /**
-     * Serialize salient information about this Document when dragging it.
-     * @returns An object of drag data.
-     */
-    toDragData(): { type: string; [key: string]: unknown };
-
-    /**
-     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
-     * The dropped data could have:
-     * 1. A data object explicitly provided
-     * 2. A UUID
-     *
-     * @param data    The data object extracted from a DataTransfer event
-     * @param options Additional options which affect drop data behavior
-     * @returns The resolved Document
-     * @throws If a Document could not be retrieved from the provided data.
-     */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
-
-    /**
-     * Update this Document using a provided JSON string.
-     * @param json Raw JSON data to import
-     * @returns The updated Document instance
-     */
-    importFromJSON(json: string): Promise<this>;
-
-    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
-    importFromJSONDialog(): Promise<void>;
-
-    /**
-     * Transform the Document data to be stored in a Compendium pack.
-     * Remove any features of the data which are world-specific.
-     * @param [pack]    A specific pack being exported to
-     * @param [options] Additional options which modify how the document is converted
-     * @param [options.clearFlags=false]     Clear the flags object
-     * @param [options.clearSort=true]       Clear the currently assigned folder and sort order
-     * @param  [options.clearOwnership=true] Clear document ownership
-     * @param [options.clearState=true]      Clear fields which store document state
-     * @param [options.keepId=false]         Retain the current Document id
-     * @returns A data object of cleaned data suitable for compendium import
-     */
-    toCompendium(
-        pack?: CompendiumCollection<CompendiumDocument>,
-        options?: {
-            clearSort?: boolean;
-            clearFlags?: boolean;
-            clearOwnership?: boolean;
-            clearState?: boolean;
-            keepId?: boolean;
-        }
-    ): this["_source"];
-}
-
-/**
- * A specialized sub-class of the ClientDocumentMixin which is used for document types that are intended to be
- * represented upon the game Canvas.
- * @category - Mixins
- */
-export class CanvasBaseWall<TParent extends ClientBaseScene | null> extends ClientBaseWall<TParent> {
-    /** A reference to the PlaceableObject instance which represents this Embedded Document. */
-    _object: PlaceableObject<this> | null;
-
-    /** Has this object been deliberately destroyed as part of the deletion workflow? */
-    protected _destroyed: boolean;
-
-    constructor(data: object, context: DocumentConstructionContext<TParent>);
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** A lazily constructed PlaceableObject instance which can represent this Document on the game canvas. */
-    get object(): this["_object"];
-
-    /** A reference to the CanvasLayer which contains Document objects of this type. */
-    get layer(): NonNullable<this["object"]>["layer"] | null;
-
-    /** An indicator for whether this document is currently rendered on the game canvas. */
-    get rendered(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    /**
-     * @see abstract.Document#_onCreate
-     */
-    protected override _onCreate(
-        data: this["_source"],
-        options: DocumentModificationContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onUpdate
-     */
-    protected override _onUpdate(
-        changed: DeepPartial<this["_source"]>,
-        options: DocumentUpdateContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onDelete
-     */
-    protected _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
-}
-
-export interface CanvasBaseWall<TParent extends ClientBaseScene | null> extends ClientBaseWall<TParent> {
-    // System note: in most but not all canvas documents
-    hidden?: boolean;
-}
diff --git a/node_modules/foundry-types/client/documents/client-document.ts b/node_modules/foundry-types/client/documents/client-document.ts
deleted file mode 100644
index 7fa3dd2..0000000
--- a/node_modules/foundry-types/client/documents/client-document.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import { ClientBaseScene } from "./client-base-mixes.mjs";
-
-declare global {
-    // Interfaces for ClientDocuments, given there is no common base with the generated intermediate classes
-    interface ClientDocument extends foundry.abstract.Document {
-        get hasPlayerOwner(): boolean;
-        get isOwner(): boolean;
-        get sheet(): FormApplication;
-        get uuid(): DocumentUUID;
-    }
-
-    interface CanvasDocument extends ClientDocument {
-        readonly parent: ClientBaseScene | null;
-        hidden?: boolean;
-    }
-}
diff --git a/node_modules/foundry-types/client/documents/combat.d.ts b/node_modules/foundry-types/client/documents/combat.d.ts
index a0dc734..001731e 100644
--- a/node_modules/foundry-types/client/documents/combat.d.ts
+++ b/node_modules/foundry-types/client/documents/combat.d.ts
@@ -1,4 +1,4 @@
-import { ClientBaseCombat } from "./client-base-mixes.mjs";
+import { CombatConstructor } from "./constructors";

 declare global {
     /**
@@ -6,13 +6,13 @@ declare global {
      * Each Combat document contains CombatData which defines its data schema.
      * @param [data={}] Initial data provided to construct the Combat document
      */
-    class Combat extends ClientBaseCombat {
-        constructor(data: PreCreate<foundry.documents.CombatSource>, context?: DocumentConstructionContext<null>);
+    class Combat extends CombatConstructor {
+        constructor(data: PreCreate<foundry.data.CombatSource>, context?: DocumentConstructionContext<null>);

         active: boolean;

         /** Track the sorted turn order of this combat encounter */
-        turns: CollectionValue<this["combatants"]>[];
+        turns: Combatant<this>[];

         /** Record the current round, turn, and tokenId to understand changes in the encounter state */
         current: {
@@ -38,13 +38,13 @@ declare global {
         /* -------------------------------------------- */

         /** Get the Combatant who has the current turn. */
-        get combatant(): CollectionValue<this["combatants"]> | undefined;
+        get combatant(): Combatant<this> | undefined;

         /** The numeric round of the Combat encounter */
         get round(): number;

         /** A reference to the Scene document within which this Combat encounter occurs */
-        get scene(): NonNullable<CollectionValue<this["combatants"]>["actor"]>["parent"];
+        get scene(): Scene | undefined;

         /** Return the object of settings which modify the Combat Tracker behavior */
         get settings(): Record<string, unknown>;
@@ -158,45 +158,54 @@ declare global {

         protected override _onCreate(
             data: this["_source"],
-            options: DocumentModificationContext<null>,
+            options: DocumentModificationContext<this>,
             userId: string
         ): void;

         protected override _onUpdate(
             changed: DeepPartial<this["_source"]>,
-            options: DocumentModificationContext<null>,
+            options: DocumentModificationContext<this>,
             userId: string
         ): void;

-        protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
+        protected override _onDelete(options: DocumentModificationContext<this>, userId: string): void;

         protected override _onCreateEmbeddedDocuments(
             type: "Combatant",
-            documents: Combatant<this>[],
-            result: Combatant<this>["_source"][],
-            options: DocumentModificationContext<this>,
+            documents: Combatant[],
+            result: Combatant["_source"][],
+            options: DocumentModificationContext<Combatant>,
             userId: string
         ): void;

         protected override _onUpdateEmbeddedDocuments(
             embeddedName: "Combatant",
-            documents: Combatant<this>[],
-            result: Combatant<this>["_source"][],
-            options: DocumentModificationContext<this>,
+            documents: Combatant[],
+            result: Combatant["_source"][],
+            options: DocumentModificationContext<Combatant>,
             userId: string
         ): void;

         protected override _onDeleteEmbeddedDocuments(
             embeddedName: "Combatant",
-            documents: Combatant<this>[],
-            result: string[],
-            options: DocumentModificationContext<this>,
+            documents: Combatant[],
+            result: Combatant["_source"][],
+            options: DocumentModificationContext<Combatant>,
             userId: string
         ): void;
     }

-    interface Combat extends ClientBaseCombat {
-        readonly combatants: foundry.abstract.EmbeddedCollection<Combatant<this>>;
+    interface Combat {
+        readonly data: foundry.data.CombatData<this, Combatant>;
+
+        // V10 shim
+        readonly flags: this["data"]["flags"];
+
+        createEmbeddedDocuments(
+            embeddedName: "Combatant",
+            data: PreCreate<Combatant["_source"]>[],
+            context?: DocumentModificationContext<Combatant>
+        ): Promise<Combatant<this>[]>;
     }

     interface RollInitiativeOptions {
diff --git a/node_modules/foundry-types/client/documents/combatant.d.ts b/node_modules/foundry-types/client/documents/combatant.d.ts
index fe50b8d..640c63b 100644
--- a/node_modules/foundry-types/client/documents/combatant.d.ts
+++ b/node_modules/foundry-types/client/documents/combatant.d.ts
@@ -1,17 +1,25 @@
-import { ClientBaseCombatant } from "./client-base-mixes.mjs";
+import { CombatantConstructor } from "./constructors";

 declare global {
     /**
-     * The client-side Combatant document which extends the common BaseCombatant model.
+     * The Combatant embedded document within a Combat document which extends the BaseRollTable abstraction.
+     * Each Combatant belongs to the effects collection of its parent Document.
+     * Each Combatant contains a CombatantData object which provides its source data.
      *
-     * @see {@link Combat}                  The Combat document which contains Combatant embedded documents
-     * @see {@link CombatantConfig}         The application which configures a Combatant.
+     * @see {@link data.CombatantData} The Combatant data schema
+     * @see {@link documents.Combat}   The Combat document which contains Combatant embedded documents
      */
     class Combatant<
-        TParent extends Combat | null,
-        TTokenDocument extends TokenDocument<Scene | null> | null = TokenDocument<Scene | null> | null
-    > extends ClientBaseCombatant<TParent> {
-        constructor(data: PreCreate<foundry.documents.CombatantSource>, context?: DocumentConstructionContext<TParent>);
+        TParent extends Combat | null = Combat | null,
+        TActor extends Actor | null = Actor | null
+    > extends CombatantConstructor {
+        constructor(data: PreCreate<foundry.data.CombatantSource>, context?: DocumentConstructionContext<TParent>);
+
+        /** A cached reference to the Token which this Combatant represents, if any */
+        protected _token: NonNullable<TActor>["parent"];
+
+        /** A cached reference to the Actor which this Combatant represents, if any */
+        protected _actor: TActor;

         /** The current value of the special tracked resource which pertains to this Combatant */
         resource: { value: number } | null;
@@ -38,10 +46,10 @@ declare global {
         get isVisible(): boolean;

         /** A reference to the Actor document which this Combatant represents, if any */
-        get actor(): NonNullable<TTokenDocument>["actor"];
+        get actor(): TActor;

         /** A reference to the Token document which this Combatant represents, if any */
-        get token(): TTokenDocument;
+        get token(): NonNullable<TActor>["parent"];

         /** An array of User documents who have ownership of this Document */
         get players(): User[];
@@ -54,7 +62,7 @@ declare global {
         /* -------------------------------------------- */

         override testUserPermission(
-            user: User,
+            user: foundry.documents.BaseUser,
             permission: DocumentOwnershipString | DocumentOwnershipLevel,
             { exact }?: { exact?: boolean }
         ): boolean;
@@ -86,10 +94,11 @@ declare global {
         _getInitiativeFormula(): string;
     }

-    interface Combatant<
-        TParent extends Combat | null,
-        TTokenDocument extends TokenDocument<Scene | null> | null = TokenDocument<Scene | null> | null
-    > extends ClientBaseCombatant<TParent> {
+    interface Combatant<TParent extends Combat | null = Combat | null, TActor extends Actor | null = Actor | null> {
+        readonly data: foundry.data.CombatantData<this>;
+
+        readonly parent: TParent;
+
         _sheet: CombatantConfig<this>;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/constructors.d.ts b/node_modules/foundry-types/client/documents/constructors.d.ts
new file mode 100644
index 0000000..a7aaf8c
--- /dev/null
+++ b/node_modules/foundry-types/client/documents/constructors.d.ts
@@ -0,0 +1,56 @@
+export const AmbientLightDocumentConstructor: CanvasDocumentMixin<
+    typeof foundry.documents.BaseAmbientLight,
+    LightingLayer<AmbientLight>
+>;
+
+export const AmbientSoundDocumentConstructor: CanvasDocumentMixin<
+    typeof foundry.documents.BaseAmbientSound,
+    SoundsLayer
+>;
+
+export const ActiveEffectConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseActiveEffect>;
+
+export const ActorConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseActor>;
+
+export const CardsConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseCards>;
+
+export const CombatantConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseCombatant>;
+
+export const CombatConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseCombat>;
+
+export const ChatMessageConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseChatMessage>;
+
+export const DrawingConstructor: CanvasDocumentMixin<typeof foundry.documents.BaseDrawing, DrawingsLayer>;
+
+export const FogExplorationConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseFogExploration>;
+
+export const FolderConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseFolder>;
+
+export const ItemConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseItem>;
+
+export const MacroConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseMacro>;
+
+export const MeasuredTemplateDocumentConstructor: CanvasDocumentMixin<
+    typeof foundry.documents.BaseMeasuredTemplate,
+    TemplateLayer
+>;
+
+export const PlaylistConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BasePlaylist>;
+
+export const PlaylistSoundConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BasePlaylistSound>;
+
+export const RollTableConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseRollTable>;
+
+export const NoteDocumentConstructor: CanvasDocumentMixin<typeof foundry.documents.BaseNote, NotesLayer>;
+
+export const SceneConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseScene>;
+
+export const TableResultConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseTableResult>;
+
+export const TileDocumentConstructor: CanvasDocumentMixin<typeof foundry.documents.BaseTile, TilesLayer>;
+
+export const TokenDocumentConstructor: CanvasDocumentMixin<typeof foundry.documents.BaseToken, TokenLayer<Token>>;
+
+export const WallDocumentConstructor: CanvasDocumentMixin<typeof foundry.documents.BaseWall, WallsLayer>;
+
+export const UserConstructor: foundry.abstract.Documentct.DocumentMixin<typeof foundry.documents.BaseUser>;
diff --git a/node_modules/foundry-types/client/documents/drawing-document.d.ts b/node_modules/foundry-types/client/documents/drawing-document.d.ts
index 7c4b40b..6faf11f 100644
--- a/node_modules/foundry-types/client/documents/drawing-document.d.ts
+++ b/node_modules/foundry-types/client/documents/drawing-document.d.ts
@@ -1,4 +1,4 @@
-import { CanvasBaseDrawing } from "./client-base-mixes.mjs";
+import { DrawingConstructor } from "./constructors";

 declare global {
     /**
@@ -9,7 +9,7 @@ declare global {
      * @see {@link applications.DrawingConfig}    The Drawing configuration application
      *
      */
-    class DrawingDocument<TParent extends Scene | null> extends CanvasBaseDrawing<TParent> {
+    class DrawingDocument extends DrawingConstructor {
         /** A reference to the User who created the Drawing document. */
         get author(): User | undefined;

@@ -17,7 +17,9 @@ declare global {
         override get isOwner(): boolean;
     }

-    interface DrawingDocument<TParent extends Scene | null> extends CanvasBaseDrawing<TParent> {
-        readonly _object: Drawing<this> | null;
+    interface DrawingDocument {
+        readonly parent: Scene | null;
+
+        readonly _object: Drawing;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/fog-exploration.d.ts b/node_modules/foundry-types/client/documents/fog-exploration.d.ts
index 15d54e7..fad0ac7 100644
--- a/node_modules/foundry-types/client/documents/fog-exploration.d.ts
+++ b/node_modules/foundry-types/client/documents/fog-exploration.d.ts
@@ -1,15 +1,15 @@
+import { FogExplorationConstructor } from "./constructors";
 import * as io from "socket.io";
-import { ClientBaseFogExploration } from "./client-base-mixes.mjs";

 declare global {
     /**
      * The client-side FogExploration document which extends the common BaseFogExploration abstraction.
      * Each FogExploration document contains FogExplorationData which defines its data schema.
      */
-    class FogExploration extends ClientBaseFogExploration {
+    class FogExploration<TToken extends Token = Token> extends FogExplorationConstructor {
         constructor(
-            data?: PreCreate<foundry.documents.FogExplorationSource>,
-            context?: DocumentConstructionContext<null>
+            data?: PreCreate<foundry.data.FogExplorationSource>,
+            context?: DocumentConstructionContext<FogExploration>
         );

         /**
@@ -18,7 +18,7 @@ declare global {
          * @param [force=false] Force the position to be re-explored
          * @returns Is the source position newly explored?
          */
-        explore(source: PointSource<Maybe<Token>>, force?: boolean): boolean;
+        explore(source: PointSource<TToken>, force?: boolean): boolean;

         /** Obtain the fog of war exploration progress for a specific Scene and User. */
         static get<T extends FogExploration>(
diff --git a/node_modules/foundry-types/client/documents/folder.d.ts b/node_modules/foundry-types/client/documents/folder.d.ts
index c6d6081..3bc1e54 100644
--- a/node_modules/foundry-types/client/documents/folder.d.ts
+++ b/node_modules/foundry-types/client/documents/folder.d.ts
@@ -1,27 +1,27 @@
-import { ClientBaseFolder } from "./client-base-mixes.mjs";
+import { FolderConstructor } from "./constructors";

 declare global {
     /**
-     * The client-side Folder document which extends the common BaseFolder model.
+     * The client-side Folder document which extends the common BaseFolder abstraction.
+     * Each Folder document contains FolderData which defines its data schema.
+     * @see {@link data.FolderData}              The Folder data schema
+     * @see {@link documents.Folders}            The world-level collection of Folder documents
+     * @see {@link embedded.FolderSound}         The FolderSound embedded document within a parent Folder
+     * @see {@link applications.FolderConfig}    The Folder configuration application
      *
-     * @see {@link Folders}                     The world-level collection of Folder documents
-     * @see {@link FolderConfig}                The Folder configuration application
-     */
-    class Folder<TDocument extends EnfolderableDocument = EnfolderableDocument> extends ClientBaseFolder {
+     ent
+    */
+    class Folder<TDocument extends EnfolderableDocument = EnfolderableDocument> extends FolderConstructor {
         /**
          * Create a new Folder by rendering a dialog window to provide basic creation details
          * @param data Initial data with which to populate the creation form
          * @param options Initial positioning and sizing options for the dialog form
          * @return An active FolderConfig instance for creating the new Folder entity
          */
-        static createDialog<TDocument extends foundry.abstract.Document>(
-            this: ConstructorOf<TDocument>,
-            data?: Record<string, unknown>,
-            context?: {
-                parent?: TDocument["parent"];
-                pack?: Collection<TDocument> | null;
-            } & Partial<FormApplicationOptions>
-        ): Promise<TDocument | null>;
+        static override createDialog(
+            data?: { folder?: string },
+            options?: FormApplicationOptions
+        ): Promise<Folder | undefined>;

         /** The depth of this folder in its sidebar tree */
         depth: number;
@@ -47,6 +47,13 @@ declare global {
         /** Return the named Entity type for elements in this folder. */
         get type(): string;

+        /**
+         * An array of other Folders which are the displayed children of this one. This differs from the results of
+         * {@link Folder.getSubfolders} because reports the subset of child folders which  are displayed to the current User
+         * in the UI.
+         */
+        children: Folder[]
+
         /**
          * Export all Documents contained in this Folder to a given Compendium pack.
          * Optionally update existing Documents within the Pack by name, otherwise append all new entries.
@@ -74,8 +81,8 @@ declare global {
          */
         getSubfolders(recursive?: boolean): this[];

-        protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
+        protected override _onDelete(options: DocumentModificationContext, userId: string): void;
     }

-    type EnfolderableDocument = Actor<null> | Item<null> | Macro | Scene | JournalEntry | RollTable;
+    type EnfolderableDocument = Actor | Item | Macro | Scene | JournalEntry | RollTable;
 }
diff --git a/node_modules/foundry-types/client/documents/index.d.ts b/node_modules/foundry-types/client/documents/index.d.ts
index 464ad26..54d95e9 100644
--- a/node_modules/foundry-types/client/documents/index.d.ts
+++ b/node_modules/foundry-types/client/documents/index.d.ts
@@ -4,7 +4,6 @@ import "./ambient-light-document";
 import "./ambient-sound-document";
 import "./cards";
 import "./chat-message";
-import "./client-document";
 import "./combat";
 import "./combatant";
 import "./drawing-document";
@@ -15,6 +14,7 @@ import "./journal-entry";
 import "./journal-entry-page";
 import "./macro";
 import "./measured-template-document";
+import "./mixins";
 import "./note-document";
 import "./playlist";
 import "./playlist-sound";
@@ -26,16 +26,15 @@ import "./tile-document";
 import "./token-document";
 import "./user";
 import "./wall-document";
-import "./client-base-mixes.mjs";

 declare global {
     type WorldDocument =
-        | Actor<null>
+        | Actor
         | Cards
         | ChatMessage
         | Combat
         | Folder
-        | Item<null>
+        | Item
         | JournalEntry
         | Macro
         | Playlist
diff --git a/node_modules/foundry-types/client/documents/item.d.ts b/node_modules/foundry-types/client/documents/item.d.ts
index 1805dc2..905d709 100644
--- a/node_modules/foundry-types/client/documents/item.d.ts
+++ b/node_modules/foundry-types/client/documents/item.d.ts
@@ -1,4 +1,4 @@
-import { ClientBaseItem } from "./client-base-mixes.mjs";
+import { ItemConstructor } from "./constructors";

 declare global {
     /**
@@ -8,9 +8,9 @@ declare global {
      * @see {@link documents.Items}            The world-level collection of Item documents
      * @see {@link applications.ItemSheet}     The Item configuration application
      */
-    class Item<TParent extends Actor<TokenDocument<Scene | null> | null> | null> extends ClientBaseItem<TParent> {
+    class Item<TParent extends Actor = Actor> extends ItemConstructor {
         /** A convenience alias of Item#parent which is more semantically intuitive */
-        get actor(): TParent;
+        get actor(): this["parent"];

         img: ImageFilePath;

@@ -31,20 +31,24 @@ declare global {

         protected override _getSheetClass(): ConstructorOf<NonNullable<this["_sheet"]>>;

-        protected static override _onCreateDocuments<TDocument extends foundry.abstract.Document>(
-            this: ConstructorOf<TDocument>,
-            items: TDocument[],
-            context: DocumentModificationContext<TDocument["parent"]>
+        protected static override _onCreateDocuments<T extends Item>(
+            this: ConstructorOf<T>,
+            items: T[],
+            context: DocumentModificationContext<T>
         ): void;

-        protected static override _onDeleteDocuments<TDocument extends foundry.abstract.Document>(
-            this: ConstructorOf<TDocument>,
-            items: TDocument[],
-            context: DocumentModificationContext<TDocument["parent"]>
+        protected static override _onDeleteDocuments<T extends Item>(
+            this: ConstructorOf<T>,
+            items: T[],
+            context: DocumentModificationContext<T>
         ): void;
     }

-    interface Item<TParent extends Actor<TokenDocument<Scene | null> | null> | null> extends ClientBaseItem<TParent> {
+    interface Item<TParent extends Actor = Actor> {
+        readonly parent: TParent | null;
+
+        get collection(): Items<this>;
+
         get uuid(): ItemUUID;

         _sheet: ItemSheet<this> | null;
@@ -53,5 +57,5 @@ declare global {
     }

     type EmbeddedItemUUID = `Actor.${string}.Item.${string}`;
-    type ItemUUID = WorldDocumentUUID<Item<null>> | EmbeddedItemUUID | CompendiumUUID;
+    type ItemUUID = WorldDocumentUUID<Item> | EmbeddedItemUUID | CompendiumUUID;
 }
diff --git a/node_modules/foundry-types/client/documents/journal-entry-page.d.ts b/node_modules/foundry-types/client/documents/journal-entry-page.d.ts
index ee0011c..d457bff 100644
--- a/node_modules/foundry-types/client/documents/journal-entry-page.d.ts
+++ b/node_modules/foundry-types/client/documents/journal-entry-page.d.ts
@@ -1,4 +1,4 @@
-import { ClientBaseJournalEntryPage } from "./client-base-mixes.mjs";
+export {};

 declare global {
     /**
@@ -6,7 +6,7 @@ declare global {
      *
      * @see {@link JournalEntry}  The JournalEntry document type which contains JournalEntryPage embedded documents.
      */
-    class JournalEntryPage<TParent extends JournalEntry | null> extends ClientBaseJournalEntryPage<TParent> {
+    class JournalEntryPage<TParent extends JournalEntry | null> extends foundry.abstract.Document<TParent> {
         /** The table of contents for this JournalEntryPage. */
         get toc(): JournalEntryPageHeading;

@@ -61,14 +61,19 @@ declare global {

         protected override _onUpdate(
             data: DeepPartial<this["_source"]>,
-            options: DocumentModificationContext<TParent>,
+            options: DocumentModificationContext<this>,
             userId: string
         ): void;
     }

-    interface JournalEntryPage<TParent extends JournalEntry | null> extends ClientBaseJournalEntryPage<TParent> {
+    interface JournalEntryPage<TParent extends JournalEntry | null, TType extends string = string, TSystemSource extends object = object>
+        extends BaseDocumentWithOmissions<foundry.documents.BaseJournalEntryPage<TParent>>,
+            foundry.abstract.Document<TParent> {
+        readonly _source: foundry.documents.JournalEntryPageSource<TType,TSystemSource>;
+
+        system: TSystemSource
+
         get documentName(): "JournalEntryPage";
-        get sheet(): JournalPageSheet<this>;
     }

     interface JournalEntryPageHeading {
@@ -84,3 +89,5 @@ declare global {
         children: string[];
     }
 }
+
+type JournalEntryPageTypeMap = Record<string, JournalEntryPage>;
diff --git a/node_modules/foundry-types/client/documents/journal-entry.d.ts b/node_modules/foundry-types/client/documents/journal-entry.d.ts
index 47313dd..90a65ea 100644
--- a/node_modules/foundry-types/client/documents/journal-entry.d.ts
+++ b/node_modules/foundry-types/client/documents/journal-entry.d.ts
@@ -1,4 +1,4 @@
-import { ClientBaseJournalEntry } from "./client-base-mixes.mjs";
+export {};

 declare global {
     /**
@@ -7,7 +7,7 @@ declare global {
      * @see {@link Journal}                       The world-level collection of JournalEntry documents
      * @see {@link JournalSheet}                  The JournalEntry configuration application
      */
-    class JournalEntry extends ClientBaseJournalEntry {
+    class JournalEntry extends foundry.abstract.Documentct.Document2<null> {
         /* -------------------------------------------- */
         /*  Properties                                  */
         /* -------------------------------------------- */
@@ -52,16 +52,20 @@ declare global {

         protected override _onUpdate(
             changed: DeepPartial<this["_source"]>,
-            options: DocumentUpdateContext<null>,
+            options: DocumentModificationContext,
             userId: string
         ): void;

-        protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
+        protected override _onDelete(options: DocumentModificationContext, userId: string): void;
     }

-    interface JournalEntry extends ClientBaseJournalEntry {
+    interface JournalEntry
+        extends BaseDocumentWithOmissions<foundry.documents.BaseJournalEntry>,
+            foundry.abstract.Documentct.Document2<null> {
+        readonly _source: foundry.documents.JournalEntrySource;
         readonly pages: foundry.abstract.EmbeddedCollection<JournalEntryPage<this>>;

+        get documentName(): "JournalEntry";
         get sheet(): JournalSheet<this>;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/macro.d.ts b/node_modules/foundry-types/client/documents/macro.d.ts
index 8e9d615..0d2574b 100644
--- a/node_modules/foundry-types/client/documents/macro.d.ts
+++ b/node_modules/foundry-types/client/documents/macro.d.ts
@@ -1,15 +1,16 @@
-import { ClientBaseMacro } from "./client-base-mixes.mjs";
+import { MacroConstructor } from "./constructors";

 declare global {
     /**
-     * The client-side Folder document which extends the common BaseFolder model.
+     * The client-side Macro document which extends the common BaseMacro abstraction.
+     * Each Macro document contains MacroData which defines its data schema.
      *
-     * @see {@link Folders}                     The world-level collection of Folder documents
-     * @see {@link FolderConfig}                The Folder configuration application
+     * @see {@link data.MacroData}              The Macro data schema
+     * @see {@link documents.Macros}            The world-level collection of Macro documents
+     * @see {@link applications.MacroConfig}    The Macro configuration application
      */
-    class Macro extends ClientBaseMacro {
+    class Macro extends MacroConstructor {
         command: string;
-
         /* -------------------------------------------- */
         /*  Properties                                  */
         /* -------------------------------------------- */
@@ -27,30 +28,18 @@ declare global {
          * @param [scope.actor] An Actor who is the protagonist of the executed action
          * @param [scope.token] A Token which is the protagonist of the executed action
          */
-        execute({ actor, token }?: { actor?: Actor<TokenDocument<Scene | null> | null>; token?: Token }): void;
+        execute({ actor, token }?: { actor?: Actor; token?: Token }): void;

         /**
          * Execute the command as a chat macro.
          * Chat macros simulate the process of the command being entered into the Chat Log input textarea.
          */
-        protected _executeChat({
-            actor,
-            token,
-        }?: {
-            actor?: Actor<TokenDocument<Scene | null> | null>;
-            token?: Token;
-        }): void;
+        protected _executeChat({ actor, token }?: { actor?: Actor; token?: Token }): void;

         /**
          * Execute the command as a script macro.
          * Script Macros are wrapped in an async IIFE to allow the use of asynchronous commands and await statements.
          */
-        protected _executeScript({
-            actor,
-            token,
-        }?: {
-            actor?: Actor<TokenDocument<Scene | null> | null>;
-            token?: Token;
-        }): void;
+        protected _executeScript({ actor, token }?: { actor?: Actor; token?: Token }): void;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/measured-template-document.d.ts b/node_modules/foundry-types/client/documents/measured-template-document.d.ts
index fdb90c4..d2a9ae2 100644
--- a/node_modules/foundry-types/client/documents/measured-template-document.d.ts
+++ b/node_modules/foundry-types/client/documents/measured-template-document.d.ts
@@ -1,26 +1,27 @@
-import { CanvasBaseMeasuredTemplate } from "./client-base-mixes.mjs";
+import { MeasuredTemplateDocumentConstructor } from "./constructors";

 declare global {
     /**
-     * The client-side MeasuredTemplate document which extends the common BaseMeasuredTemplate document model.
-     *
-     * @see {@link Scene}                     The Scene document type which contains MeasuredTemplate documents
-     * @see {@link MeasuredTemplateConfig}    The MeasuredTemplate configuration application
+     * The client-side MeasuredTemplate embedded document which extends the common BaseMeasuredTemplate abstraction.
+     * Each MeasuredTemplate document contains MeasuredTemplateData which defines its data schema.
      */
-    class MeasuredTemplateDocument<TParent extends Scene | null> extends CanvasBaseMeasuredTemplate<TParent> {
+    class MeasuredTemplateDocument extends MeasuredTemplateDocumentConstructor {
         /* -------------------------------------------- */
-        /*  Model Properties                            */
+        /*  Properties                                  */
         /* -------------------------------------------- */

-        /** A reference to the User who created the MeasuredTemplate document. */
-        get author(): User;
-
-        /** Rotation is an alias for direction */
-        get rotation(): number;
+        /** A flag for whether the current User has full ownership over the MeasuredTemplate document. */
+        override get isOwner(): boolean;
     }

-    interface MeasuredTemplateDocument<TParent extends Scene | null> extends CanvasBaseMeasuredTemplate<TParent> {
-        _sheet: MeasuredTemplateConfig<this> | null;
-        _object: MeasuredTemplate<this> | null;
+    interface MeasuredTemplateDocument {
+        readonly parent: Scene | null;
+
+        _sheet: MeasuredTemplateConfig | null;
+
+        /** A reference to the User who created the MeasuredTemplate document. */
+        readonly author: User | undefined;
+
+        readonly _object: MeasuredTemplate<MeasuredTemplateDocument> | null;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/mixins/canvas-document-mixin.d.ts b/node_modules/foundry-types/client/documents/mixins/canvas-document-mixin.d.ts
new file mode 100644
index 0000000..47d72ec
--- /dev/null
+++ b/node_modules/foundry-types/client/documents/mixins/canvas-document-mixin.d.ts
@@ -0,0 +1,61 @@
+export {};
+
+declare global {
+    /**
+     * A specialized sub-class of the foundry.abstract.DocumentMixin which is used for document types that are intended to be
+     * represented upon the game Canvas.
+     * @mixin
+     */
+    function CanvasDocumentMixin<TDocument extends typeof foundry.abstract.Document, TLayer extends PlaceablesLayer>(
+        Base: TDocument
+    ): CanvasDocumentMixin<TDocument, TLayer>;
+
+    type CanvasDocumentMixin<
+        TDocument extends typeof foundry.abstract.Document,
+        TLayer extends PlaceablesLayer
+    > = TDocument & {
+        new (...args: any[]): CanvasDocument<InstanceType<TDocument>, TLayer> & InstanceType<TDocument>;
+    };
+
+    class CanvasDocument<
+        TDocument extends foundry.abstract.Document = foundry.abstract.Document,
+        TLayer extends PlaceablesLayer = PlaceablesLayer<any>
+    > extends foundry.abstract.Document<TDocument> {
+        constructor(data: PreCreate<TDocument["_source"]>, context?: DocumentModificationContext);
+
+        /** A reference to the PlaceableObject instance which represents this Embedded Document. */
+        protected _object: TLayer["placeables"][number] | null;
+
+        /** A lazily constructed PlaceableObject instance which can represent this Document on the game canvas. */
+        get object(): TLayer["placeables"][number];
+
+        /** A reference to the CanvasLayer which contains Document objects of this type. */
+        get layer(): TLayer;
+
+        /** An indicator for whether this document is currently rendered on the game canvas. */
+        get rendered(): boolean;
+
+        protected override _onCreate(
+            data: this["_source"],
+            options: DocumentModificationContext<this>,
+            userId: string
+        ): void;
+
+        protected override _onUpdate(
+            changed: DeepPartial<this["_source"]>,
+            options: DocumentModificationContext<this>,
+            userId: string
+        ): void;
+
+        protected override _onDelete(options: DocumentModificationContext, userId: string): void;
+    }
+
+    interface CanvasDocument<
+        TDocument extends foundry.abstract.Document = foundry.abstract.Document,
+        TLayer extends PlaceablesLayer = PlaceablesLayer<any>
+    > extends foundry.abstract.Document<TDocument> {
+        x: number;
+        y: number;
+        hidden: boolean;
+    }
+}
diff --git a/node_modules/foundry-types/client/documents/mixins/canvas-document-mixin2.d.ts b/node_modules/foundry-types/client/documents/mixins/canvas-document-mixin2.d.ts
new file mode 100644
index 0000000..544778a
--- /dev/null
+++ b/node_modules/foundry-types/client/documents/mixins/canvas-document-mixin2.d.ts
@@ -0,0 +1,61 @@
+/**
+ * A specialized sub-class of the foundry.abstract.DocumentMixin which is used for document types that are intended to be
+ * represented upon the game Canvas.
+ * @category - Mixins
+ */
+declare class CanvasDocument2<
+    // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    TParent extends foundry.abstract.Document<any> | null = foundry.abstract.Document<any> | null
+> extends foundry.abstract.Document<TParent> {
+    /** A reference to the PlaceableObject instance which represents this Embedded Document. */
+    _object: PlaceableObject<this> | null;
+
+    /** Has this object been deliberately destroyed as part of the deletion workflow? */
+    protected _destroyed: boolean;
+
+    constructor(data: object, context: DocumentConstructionContext<TParent>);
+
+    /* -------------------------------------------- */
+    /*  Properties                                  */
+    /* -------------------------------------------- */
+
+    /** A lazily constructed PlaceableObject instance which can represent this Document on the game canvas. */
+    get object(): this["_object"];
+
+    /** A reference to the CanvasLayer which contains Document objects of this type. */
+    get layer(): NonNullable<this["object"]>["layer"] | null;
+
+    /** An indicator for whether this document is currently rendered on the game canvas. */
+    get rendered(): boolean;
+
+    /* -------------------------------------------- */
+    /*  Event Handlers                              */
+    /* -------------------------------------------- */
+
+    /**
+     * @see abstract.Document#_onCreate
+     */
+    protected _onCreate(data: this["_source"], options: DocumentModificationContext<this>, userId: string): void;
+
+    /**
+     * @see abstract.Document#_onUpdate
+     */
+    protected _onUpdate(
+        changed: DeepPartial<this["_source"]>,
+        options: DocumentUpdateContext<this>,
+        userId: string
+    ): void;
+
+    /**
+     * @see abstract.Document#_onDelete
+     */
+    protected _onDelete(options: DocumentModificationContext<this>, userId: string): void;
+}
+
+declare interface CanvasDocument2<
+    // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    TParent extends foundry.abstract.Document<any> | null = foundry.abstract.Document<any> | null
+> extends foundry.abstract.Document<TParent> {
+    // System note: in most but not all canvas documents
+    hidden?: boolean;
+}
diff --git a/node_modules/foundry-types/client/documents/mixins/client-document-mixin.d.ts b/node_modules/foundry-types/client/documents/mixins/client-document-mixin.d.ts
new file mode 100644
index 0000000..72b4890
--- /dev/null
+++ b/node_modules/foundry-types/client/documents/mixins/client-document-mixin.d.ts
@@ -0,0 +1,317 @@
+/**
+ * The client-side document mixin which is used to extend the common BaseDocument.
+ * This mixin provides the client-side interface for database operations and common document behaviors.
+ * @mixin
+ */
+declare function foundry.abstract.DocumentMixin<T extends typeof foundry.abstract.Document>(Base: T): foundry.abstract.DocumentMixin<T>;
+
+declare type foundry.abstract.DocumentMixin<T extends typeof foundry.abstract.Document> = {
+    new (...args: any[]): foundry.abstract.Document<InstanceType<T>> & InstanceType<T>;
+
+    /**
+     * Present a Dialog form to create a new Document of this type.
+     * Choose a name and a type from a select menu of types.
+     * @param data Initial data with which to populate the creation form
+     * @param [options] Positioning and sizing options for the resulting dialog
+     * @return A Promise which resolves to the created Document
+     */
+    createDialog(
+        data?: { folder?: string },
+        options?: Partial<FormApplicationOptions>
+    ): Promise<foundry.abstract.Document<InstanceType<T>> | undefined>;
+
+    /**
+     * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
+     * The dropped data could have:
+     * 1. A compendium pack and entry id
+     * 2. A World Entity _id
+     * 3. A data object explicitly provided
+     *
+     * @param data         The data object extracted from a DataTransfer event
+     * @param [options={}] Additional options which configure data retrieval
+     * @param [options.importWorld=false] Import the provided document data into the World, if it is not already a
+     *                                    World-level Document reference
+     * @return The Document data that should be handled by the drop handler
+     */
+    fromDropData<TDocument extends foundry.abstract.Document>(
+        this: ConstructorOf<TDocument>,
+        data: DropCanvasData<TDocument["documentName"]>,
+        { importWorld }?: { importWorld?: boolean }
+    ): Promise<TDocument | undefined>;
+} & T;
+
+declare class foundry.abstract.Document<TDocument extends foundry.abstract.Document = foundry.abstract.Document> extends foundry
+    .abstract.Document {
+    /**
+     * A collection of Application instances which should be re-rendered whenever this document is updated.
+     * The keys of this object are the application ids and the values are Application instances. Each
+     * Application in this object will have its render method called by {@link Document#render}.
+     * @see {@link Document#render}
+     */
+    apps: Record<number, Application>;
+
+    /** A cached reference to the FormApplication instance used to configure this Document. */
+    protected _sheet: FormApplication | null;
+
+    protected override _initialize(): void;
+
+    /* -------------------------------------------- */
+    /*  Properties                                  */
+    /* -------------------------------------------- */
+
+    /** Return a reference to the parent Collection instance which contains this Document. */
+    get collection(): Collection<this>;
+
+    /** A reference to the Compendium Collection which contains this Document, if any, otherwise undefined. */
+    get compendium(): CompendiumCollection<any> | undefined;
+
+    /**
+     * Return a reference to the Folder to which this Document belongs, if any.
+     *
+     * @example <caption>A Document may belong to a Folder</caption>
+     * let folder = game.folders.entities[0];
+     * let actor = await Actor.create({name: "New Actor", folder: folder.id});
+     * console.log(actor.data.folder); // folder.id;
+     * console.log(actor.folder); // folder;
+     */
+    get folder(): Folder | null;
+
+    /**
+     * A boolean indicator for whether or not the current game User has ownership rights for this Document.
+     * Different Document types may have more specialized rules for what constitutes ownership.
+     */
+    get isOwner(): boolean;
+
+    /** Test whether this Document is owned by any non-Gamemaster User. */
+    get hasPlayerOwner(): boolean;
+
+    /** A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater). */
+    get limited(): boolean;
+
+    /** Return a string which creates a dynamic link to this Document instance. */
+    get link(): string;
+
+    /**
+     * Return the permission level that the current game User has over this Document.
+     * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
+     *
+     * @example Get the permission level the current user has for a document
+     * ```js
+     * game.user.id; // "dkasjkkj23kjf"
+     * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
+     * actor.permission; // 2
+     * ```
+     */
+    get permission(): DocumentOwnershipLevel;
+
+    /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
+    get sheet(): FormApplication<this> | null;
+
+    /** A Universally Unique Identifier (uuid) for this Document instance. */
+    get uuid(): DocumentUUID;
+
+    /**
+     * A boolean indicator for whether or not the current game User has at least limited visibility for this Document.
+     * Different Document types may have more specialized rules for what determines visibility.
+     */
+    get visible(): boolean;
+
+    /* -------------------------------------------- */
+    /*  Methods                                     */
+    /* -------------------------------------------- */
+
+    /** Obtain the FormApplication class constructor which should be used to configure this Document. */
+    protected _getSheetClass(): ConstructorOf<FormApplication>;
+
+    /**
+     * Prepare data for the Document.
+     * Begin by resetting the prepared data back to its source state.
+     * Next prepare any embedded Documents and compute any derived data elements.
+     */
+    prepareData(): void;
+
+    /** Prepare data related to this Document itself, before any embedded Documents or derived data is computed. */
+    prepareBaseData(): void;
+
+    /** Prepare all embedded Document instances which exist within this primary Document. */
+    prepareEmbeddedDocuments(): void;
+
+    /**
+     * Apply transformations or derivations to the values of the source data object.
+     * Compute data fields whose values are not stored to the database.
+     */
+    prepareDerivedData(): void;
+
+    /**
+     * Render all of the Application instances which are connected to this document by calling their respective
+     * @see Application#render
+     * @param [force=false] Force rendering
+     * @param [context={}] Optional context
+     */
+    render(force?: boolean, context?: RenderOptions): void;
+
+    /**
+     * Determine the sort order for this Document by positioning it relative a target sibling.
+     * See SortingHelper.performIntegerSort for more details
+     * @param [options]     Sorting options provided to SortingHelper.performIntegerSort
+     * @param [updateData]  Additional data changes which are applied to each sorted document
+     * @param [sortOptions] Options which are passed to the SortingHelpers.performIntegerSort method
+     * @returns The Document after it has been re-sorted
+     */
+    sortRelative<TObject extends object>({
+        target,
+        siblings,
+        sortKey,
+        sortBefore,
+        updateData,
+    }: {
+        target?: TObject;
+        siblings?: TObject[];
+        sortKey?: keyof TObject;
+        sortBefore?: boolean;
+        updateData?: object;
+    }): Promise<this>;
+
+    /* -------------------------------------------- */
+    /*  Event Handlers                              */
+    /* -------------------------------------------- */
+
+    protected override _onCreate(
+        data: this["_source"],
+        options: DocumentModificationContext<this>,
+        userId: string
+    ): void;
+
+    protected override _onUpdate(
+        changed: DeepPartial<this["_source"]>,
+        options: DocumentModificationContext<this>,
+        userId: string
+    ): void;
+
+    protected override _onDelete(options: DocumentModificationContext, userId: string): void;
+
+    /**
+     * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
+     * @param embeddedName The name of the embedded Document type
+     * @param result       An Array of created data objects
+     * @param options      Options which modified the creation operation
+     * @param userId       The ID of the User who triggered the operation
+     */
+    protected _preCreateEmbeddedDocuments(
+        embeddedName: string,
+        result: foundry.abstract.Document["_source"][],
+        options: DocumentModificationContext,
+        userId: string
+    ): void;
+
+    /**
+     * Follow-up actions taken after a set of embedded Documents in this parent Document are created.
+     * @param embeddedName The name of the embedded Document type
+     * @param documents    An Array of created Documents
+     * @param result       An Array of created data objects
+     * @param options      Options which modified the creation operation
+     * @param userId       The ID of the User who triggered the operation
+     */
+    protected _onCreateEmbeddedDocuments(
+        embeddedName: string,
+        documents: foundry.abstract.Document[],
+        result: foundry.abstract.Document["_source"][],
+        options: DocumentModificationContext,
+        userId: string
+    ): void;
+
+    /**
+     * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.
+     * @param embeddedName The name of the embedded Document type
+     * @param result       An Array of incremental data objects
+     * @param options      Options which modified the update operation
+     * @param userId       The ID of the User who triggered the operation
+     */
+    protected _preUpdateEmbeddedDocuments(
+        embeddedName: string,
+        result: foundry.abstract.Document["_source"][],
+        options: DocumentModificationContext,
+        userId: string
+    ): void;
+
+    /**
+     * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.
+     * @param embeddedName The name of the embedded Document type
+     * @param documents    An Array of updated Documents
+     * @param result       An Array of incremental data objects
+     * @param options      Options which modified the update operation
+     * @param userId       The ID of the User who triggered the operation
+     */
+    protected _onUpdateEmbeddedDocuments(
+        embeddedName: string,
+        documents: foundry.abstract.Document[],
+        result: foundry.abstract.Document["_source"][],
+        options: DocumentModificationContext,
+        userId: string
+    ): void;
+
+    /**
+     * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.
+     * @param embeddedName The name of the embedded Document type
+     * @param result       An Array of document IDs being deleted
+     * @param options      Options which modified the deletion operation
+     * @param userId       The ID of the User who triggered the operation
+     */
+    protected _preDeleteEmbeddedDocuments(
+        embeddedName: string,
+        result: foundry.abstract.Document["_source"][],
+        options: DocumentModificationContext,
+        userId: string
+    ): void;
+
+    /**
+     * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.
+     * @param embeddedName The name of the embedded Document type
+     * @param documents    An Array of deleted Documents
+     * @param result       An Array of document IDs being deleted
+     * @param options      Options which modified the deletion operation
+     * @param userId       The ID of the User who triggered the operation
+     */
+    protected _onDeleteEmbeddedDocuments(
+        embeddedName: string,
+        documents: foundry.abstract.Document[],
+        result: foundry.abstract.Document["_source"][],
+        options: DocumentModificationContext,
+        userId: string
+    ): void;
+
+    /**
+     * Present a Dialog form to confirm deletion of this Document.
+     * @param [options] Positioning and sizing options for the resulting dialog
+     * @return A Promise which resolves to the deleted Document
+     */
+    deleteDialog(options?: object): Promise<TDocument>;
+
+    /** Export entity data to a JSON file which can be saved by the client and later imported into a different session. */
+    exportToJSON(): void;
+
+    /**
+     * Update this Document using a provided JSON string.
+     * @param json JSON data string
+     * @return The updated Document
+     */
+    importFromJSON(json: string): Promise<this>;
+
+    /** Render an import dialog for updating the data related to this Document through an exported JSON file */
+    importFromJSONDialog(): Promise<void>;
+
+    /**
+     * Transform the Document data to be stored in a Compendium pack.
+     * Remove any features of the data which are world-specific.
+     * This function is asynchronous in case any complex operations are required prior to exporting.
+     * @param [pack] A specific pack being exported to
+     * @return A data object of cleaned data suitable for compendium import
+     */
+    toCompendium(pack: CompendiumCollection<any>): this["_source"];
+
+    /**
+     * Serialize salient information about this Document when dragging it.
+     * @return An object of drag data.
+     */
+    toDragData(): { type: string; [key: string]: unknown };
+}
diff --git a/node_modules/foundry-types/scripts/generate-client-base-mixes.ts b/node_modules/foundry-types/client/documents/mixins/client-document-mixin2.d.ts
similarity index 70%
rename from node_modules/foundry-types/scripts/generate-client-base-mixes.ts
rename to node_modules/foundry-types/client/documents/mixins/client-document-mixin2.d.ts
index 73cf658..5dedea3 100644
--- a/node_modules/foundry-types/scripts/generate-client-base-mixes.ts
+++ b/node_modules/foundry-types/client/documents/mixins/client-document-mixin2.d.ts
@@ -1,24 +1,7 @@
-type ParentData = { name: string; hasParents: boolean };
-
-const genClientBase = (
-    className: string,
-    {
-        hasSheet = true,
-        isCanvasDoc = false,
-        parents = isCanvasDoc ? [{ name: "Scene", hasParents: false }] : [],
-    }: { hasSheet?: boolean; isCanvasDoc?: boolean; parents?: ParentData[] }
-) => {
-    const declareOrExportClientBase = isCanvasDoc ? "declare" : "export";
-    const clientBaseName = `ClientBase${className}`;
-    const typeParamName = parents
-        .map((p) => (p.hasParents ? `ClientBase${p.name}<any>` : `ClientBase${p.name}`))
-        .join(" | ");
-    const typeParams = typeParamName ? `<TParent extends ${typeParamName} | null>` : "";
-    const tParentOrBlank = typeParamName ? "<TParent>" : "";
-    const tParentOrNull = typeParamName ? "TParent" : "null";
-    console.log(String.raw`${declareOrExportClientBase} class ${clientBaseName}${typeParams} extends foundry.documents.Base${className}${tParentOrBlank} {
-    protected _sheet: FormApplication<this> | null;
-
+/** System note: refactored `foundry.abstract.Document` mixin typing approach in testing */
+// eslint-disable-next-line @typescript-eslint/no-explicit-any
+declare class foundry.abstract.Document<TParent extends foundry.abstract.Document<any> | null = foundry.abstract.Document<any> | null> extends foundry
+    .abstract.Document {
     /**
      * A collection of Application instances which should be re-rendered whenever this document is updated.
      * The keys of this object are the application ids and the values are Application instances. Each
@@ -27,11 +10,10 @@ const genClientBase = (
      */
     apps: { [K in number]?: Application };

-    constructor(data: object, context?: DocumentConstructionContext<${tParentOrNull}>);
+    constructor(data: object, context: DocumentConstructionContext<TParent>);

     static override name: string;

-
     protected override _initialize(options?: Record<string, unknown>): void;

     /* -------------------------------------------- */
@@ -64,16 +46,16 @@ const genClientBase = (
      * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
      *
      * @example Get the permission level the current user has for a document
-     * \`\`\`js
+     * ```js
      * game.user.id; // "dkasjkkj23kjf"
      * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
      * actor.permission; // 2
-     * \`\`\`
+     * ```
      */
     get permission(): DocumentOwnershipLevel;

     /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): ${hasSheet ? "FormApplication<this>" : "null"};
+    get sheet(): FormApplication<this> | null;

     /** A Universally Unique Identifier (uuid) for this Document instance. */
     get uuid(): DocumentUUID;
@@ -104,7 +86,7 @@ const genClientBase = (

     /**
      * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
+     * @memberof foundry.abstract.DocumentMixin#
      */
     prepareEmbeddedDocuments(): void;

@@ -130,14 +112,14 @@ const genClientBase = (
      * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
      * @returns The Document after it has been re-sorted
      */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
+    sortRelative({ updateData, ...sortOptions }: { updateData?: object; sortOptions?: object }): Promise<void>;

     /**
      * Construct a UUID relative to another document.
      * @param doc The document to compare against.
      */
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
+    getRelativeUUID(doc: foundry.abstract.Document<any>): string;

     /**
      * Handle clicking on a content link for this document.
@@ -151,17 +133,17 @@ const genClientBase = (

     protected override _onCreate(
         data: this["_source"],
-        options: DocumentModificationContext<${tParentOrNull}>,
+        options: DocumentModificationContext<this>,
         userId: string
     ): void;

     protected override _onUpdate(
         data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<${tParentOrNull}>,
+        options: DocumentModificationContext<this>,
         userId: string
     ): void;

-    protected override _onDelete(options: DocumentModificationContext<${tParentOrNull}>, userId: string): void;
+    protected override _onDelete(options: DocumentModificationContext<this>, userId: string): void;

     /**
      * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
@@ -247,7 +229,7 @@ const genClientBase = (
      */
     protected _onDeleteEmbeddedDocuments(
         embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
+        documents: foundry.abstract.Document[],
         result: string[],
         options: DocumentModificationContext<this>,
         userId: string
@@ -267,14 +249,18 @@ const genClientBase = (
      * @param [context={}] Additional context options or dialog positioning options
      * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
      */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
+    static createDialog(
         data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
+        {
+            parent,
+            pack,
+            ...options
+        }?: {
+            parent: foundry.abstract.Document | null;
+            pack: CompendiumCollection<CompendiumDocument> | null;
+            options?: Record<string, unknown>;
+        }
+    ): Promise<InstanceType<typeof this> | null>;

     /**
      * Present a Dialog form to confirm deletion of this Document.
@@ -285,7 +271,7 @@ const genClientBase = (

     /**
      * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
+     * @param [options] Additional options passed to the {@link foundry.abstract.DocumentMixin#toCompendium} method
      */
     exportToJSON(options?: Record<string, unknown>): void;

@@ -310,24 +296,21 @@ const genClientBase = (
      * Serialize salient information about this Document when dragging it.
      * @returns An object of drag data.
      */
-    toDragData(): { type: string; [key: string]: unknown };
+    toDragData(): object;

     /**
      * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
      * The dropped data could have:
      * 1. A data object explicitly provided
      * 2. A UUID
+     * @memberof foundry.abstract.DocumentMixin
      *
      * @param data    The data object extracted from a DataTransfer event
      * @param options Additional options which affect drop data behavior
      * @returns The resolved Document
      * @throws If a Document could not be retrieved from the provided data.
      */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
+    static fromDropData(data?: object, options?: Record<string, unknown>): Promise<foundry.abstract.Document>;

     /**
      * Update this Document using a provided JSON string.
@@ -362,109 +345,26 @@ const genClientBase = (
         }
     ): this["_source"];
 }
-`);
-
-    if (isCanvasDoc) {
-        const canvasBaseName = `CanvasBase${className}`;
-
-        console.log(String.raw`/**
- * A specialized sub-class of the ClientDocumentMixin which is used for document types that are intended to be
- * represented upon the game Canvas.
- * @category - Mixins
- */
-export class ${canvasBaseName}<
-    TParent extends ClientBaseScene | null
-> extends ${clientBaseName}<TParent> {
-    /** A reference to the PlaceableObject instance which represents this Embedded Document. */
-    _object: PlaceableObject<this> | null;
-
-    /** Has this object been deliberately destroyed as part of the deletion workflow? */
-    protected _destroyed: boolean;
-
-    constructor(data: object, context: DocumentConstructionContext<TParent>);
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** A lazily constructed PlaceableObject instance which can represent this Document on the game canvas. */
-    get object(): this["_object"];
-
-    /** A reference to the CanvasLayer which contains Document objects of this type. */
-    get layer(): NonNullable<this["object"]>["layer"] | null;

-    /** An indicator for whether this document is currently rendered on the game canvas. */
-    get rendered(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    /**
-     * @see abstract.Document#_onCreate
-     */
-    protected override _onCreate(data: this["_source"], options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * @see abstract.Document#_onUpdate
-     */
-    protected override _onUpdate(
-        changed: DeepPartial<this["_source"]>,
-        options: DocumentUpdateContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onDelete
-     */
-    protected _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
+// eslint-disable-next-line @typescript-eslint/no-explicit-any
+declare interface foundry.abstract.Document<TParent extends foundry.abstract.Document<any> | null = foundry.abstract.Document<any> | null>
+    extends foundry.abstract.Document {
+    readonly parent: TParent;
 }

-export interface ${canvasBaseName}<
-    TParent extends ClientBaseScene | null
-> extends ${clientBaseName}<TParent> {
-    // System note: in most but not all canvas documents
-    hidden?: boolean;
-}
-`);
-    }
-};
-
-const clientDocs: Record<string, { hasSheet?: boolean; isCanvasDoc?: boolean; parents?: ParentData[] }> = {
-    AmbientLight: { isCanvasDoc: true },
-    AmbientSound: { isCanvasDoc: true },
-    ActiveEffect: {
-        parents: [
-            { name: "Actor", hasParents: true },
-            { name: "Item", hasParents: true },
-        ],
-    },
-    Actor: { parents: [{ name: "Token", hasParents: true }] },
-    Adventure: {},
-    Cards: {},
-    ChatMessage: {},
-    Combat: {},
-    Combatant: { parents: [{ name: "Combat", hasParents: false }] },
-    Drawing: { isCanvasDoc: true },
-    FogExploration: { hasSheet: false },
-    Folder: {},
-    Item: { parents: [{ name: "Actor", hasParents: true }] },
-    JournalEntry: {},
-    JournalEntryPage: { parents: [{ name: "JournalEntry", hasParents: false }] },
-    Macro: {},
-    MeasuredTemplate: { isCanvasDoc: true },
-    Note: { isCanvasDoc: true },
-    Playlist: {},
-    PlaylistSound: { parents: [{ name: "Playlist", hasParents: false }] },
-    RollTable: {},
-    Scene: {},
-    TableResult: { parents: [{ name: "RollTable", hasParents: false }] },
-    Tile: { isCanvasDoc: true },
-    Token: { isCanvasDoc: true },
-    User: {},
-    Wall: { isCanvasDoc: true },
-};
-
-for (const [className, data] of Object.entries(clientDocs)) {
-    genClientBase(className, data);
-}
+type BaseDocumentWithOmissions<TDocument extends foundry.abstract.Document> = Omit<
+    TDocument,
+    | "_initialize"
+    | "_source"
+    | "clone"
+    | "delete"
+    | "documentName"
+    | "getUserLevel"
+    | "parent"
+    | "setFlag"
+    | "toJSON"
+    | "toObject"
+    | "unsetFlag"
+    | "update"
+    | "updateSource"
+>;
diff --git a/node_modules/foundry-types/client/documents/mixins/index.d.ts b/node_modules/foundry-types/client/documents/mixins/index.d.ts
new file mode 100644
index 0000000..b03c800
--- /dev/null
+++ b/node_modules/foundry-types/client/documents/mixins/index.d.ts
@@ -0,0 +1,4 @@
+import "./canvas-document-mixin";
+import "./canvas-document-mixin2";
+import "./client-document-mixin";
+import "./client-document-mixin2";
diff --git a/node_modules/foundry-types/client/documents/note-document.d.ts b/node_modules/foundry-types/client/documents/note-document.d.ts
index 1f607b3..ca39f92 100644
--- a/node_modules/foundry-types/client/documents/note-document.d.ts
+++ b/node_modules/foundry-types/client/documents/note-document.d.ts
@@ -1,4 +1,4 @@
-import { CanvasBaseNote } from "./client-base-mixes.mjs";
+import { NoteDocumentConstructor } from "./constructors";

 declare global {
     /**
@@ -8,7 +8,7 @@ declare global {
      * @see {@link documents.Scene}               The Scene document type which contains Note embedded documents
      * @see {@link applications.NoteConfig}       The Note configuration application
      */
-    class NoteDocument<TParent extends Scene | null> extends CanvasBaseNote<TParent> {
+    class NoteDocument extends NoteDocumentConstructor {
         /** The associated JournalEntry which is referenced by this Note */
         get entry(): JournalEntry;

@@ -16,7 +16,9 @@ declare global {
         get label(): string;
     }

-    interface NoteDocument<TParent extends Scene | null> extends CanvasBaseNote<TParent> {
-        readonly _object: Note<this> | null;
+    interface NoteDocument {
+        readonly parent: Scene | null;
+
+        readonly _object: Note;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/playlist-sound.d.ts b/node_modules/foundry-types/client/documents/playlist-sound.d.ts
index c78d2ff..8c64184 100644
--- a/node_modules/foundry-types/client/documents/playlist-sound.d.ts
+++ b/node_modules/foundry-types/client/documents/playlist-sound.d.ts
@@ -1,4 +1,4 @@
-import { ClientBasePlaylistSound } from "./client-base-mixes.mjs";
+import { PlaylistSoundConstructor } from "./constructors";

 declare global {
     /**
@@ -10,10 +10,11 @@ declare global {
      * @see {@link documents.Playlist}        The Playlist document which contains PlaylistSound embedded documents
      * @see {@link Sound}                     The Sound API which manages web audio playback
      */
-    class PlaylistSound<TParent extends Playlist | null> extends ClientBasePlaylistSound<TParent> {
+    class PlaylistSound extends PlaylistSoundConstructor {
+        /** @override */
         constructor(
-            data: PreCreate<foundry.documents.PlaylistSoundSource>,
-            context?: DocumentConstructionContext<TParent>
+            data: PreCreate<foundry.data.PlaylistSoundSource>,
+            context?: DocumentConstructionContext<PlaylistSound>
         );

         /** The Sound which manages playback for this playlist sound */
@@ -31,6 +32,10 @@ declare global {
         /** @todo fill the rest of this in */
     }

+    interface PlaylistSound {
+        readonly parent: Playlist | null;
+    }
+
     /** @todo: fill in */
     class Sound {}
 }
diff --git a/node_modules/foundry-types/client/documents/playlist.d.ts b/node_modules/foundry-types/client/documents/playlist.d.ts
index c5f2694..6aa23b1 100644
--- a/node_modules/foundry-types/client/documents/playlist.d.ts
+++ b/node_modules/foundry-types/client/documents/playlist.d.ts
@@ -1,15 +1,17 @@
-import { ClientBasePlaylist } from "./client-base-mixes.mjs";
+import { PlaylistConstructor } from "./constructors";

 declare global {
     /**
-     * The client-side Playlist document which extends the common BasePlaylist model.
-     *
-     * @see {@link Playlists}             The world-level collection of Playlist documents
-     * @see {@link PlaylistSound}         The PlaylistSound embedded document within a parent Playlist
-     * @see {@link PlaylistConfig}        The Playlist configuration application
+     * The client-side Playlist document which extends the common BasePlaylist abstraction.
+     * Each Playlist document contains PlaylistData which defines its data schema.
+     * @see {@link data.PlaylistData}               The Playlist data schema
+     * @see {@link documents.Playlists}             The world-level collection of Playlist documents
+     * @see {@link embedded.PlaylistSound}          The PlaylistSound embedded document within a parent Playlist
+     * @see {@link applications.PlaylistConfig}     The Playlist configuration application
      */
-    class Playlist extends ClientBasePlaylist {
-        constructor(data: PreCreate<foundry.documents.PlaylistSource>, context?: DocumentConstructionContext<null>);
+    class Playlist extends PlaylistConstructor {
+        /** @override */
+        constructor(data: PreCreate<foundry.data.PlaylistSource>, context?: DocumentConstructionContext<Playlist>);

         /**
          * Each sound which is played within the Playlist has a created Howl instance.
@@ -59,7 +61,7 @@ declare global {
          * @param sound The desired sound that should play
          * @returns The updated Playlist
          */
-        playSound(sound: PlaylistSound<this>): Promise<this>;
+        playSound(sound: PlaylistSound): Promise<this>;

         /**
          * Stop playback of a specific Sound within this Playlist.
@@ -67,7 +69,7 @@ declare global {
          * @param sound The desired sound that should play
          * @returns The updated Plaaylist
          */
-        stopSound(sound: PlaylistSound<this>): Promise<this | undefined>;
+        stopSound(sound: PlaylistSound): Promise<this | undefined>;
         /**
          * End playback for any/all currently playing sounds within the Playlist.
          * @returns The updated Playlist entity
@@ -81,65 +83,63 @@ declare global {
         cycleMode(): Promise<this | undefined>;

         /** Get the next sound in the cached playback order. For internal use. */
-        protected _getNextSound(soundId: string): PlaylistSound<this>;
+        protected _getNextSound(soundId: string): PlaylistSound;

-        /** Get the previous sound in the cached playback order. For internal use. */
-        protected _getPreviousSound(soundId: string): PlaylistSound<this>;
+        /**
+         * Get the previous sound in the cached playback order. For internal use.
+         */
+        protected _getPreviousSound(soundId: string): PlaylistSound;

         /** Define the sorting order for the Sounds within this Playlist. For internal use. */
-        protected _sortSounds(a: PlaylistSound<this>, b: PlaylistSound<this>): number;
+        protected _sortSounds(a: PlaylistSound, b: PlaylistSound): number;

         protected override _preUpdate(
             data: DocumentUpdateData<this>,
-            options: DocumentModificationContext<null>,
+            options: DocumentModificationContext,
             user: User
         ): Promise<void>;

         protected override _onUpdate(
             changed: DeepPartial<this["_source"]>,
-            options: DocumentModificationContext<null>,
+            options: DocumentModificationContext,
             userId: string
         ): void;

-        protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
+        protected override _onDelete(options: DocumentModificationContext, userId: string): void;

         protected override _onCreateEmbeddedDocuments(
             embeddedName: "PlaylistSound",
-            documents: PlaylistSound<this>[],
-            result: PlaylistSound<this>["_source"][],
-            options: DocumentModificationContext<this>,
+            documents: PlaylistSound[],
+            result: foundry.data.PlaylistSoundSource[],
+            options: DocumentModificationContext,
             userId: string
         ): void;

         protected override _onUpdateEmbeddedDocuments(
             embeddedName: "PlaylistSound",
-            documents: PlaylistSound<this>[],
-            result: PlaylistSound<this>["_source"][],
-            options: DocumentModificationContext<this>,
+            documents: PlaylistSound[],
+            result: foundry.data.PlaylistSoundSource[],
+            options: DocumentModificationContext,
             userId: string
         ): void;

         protected override _onDeleteEmbeddedDocuments(
             embeddedName: "PlaylistSound",
-            documents: PlaylistSound<this>[],
-            result: string[],
-            options: DocumentModificationContext<this>,
+            documents: foundry.abstract.Documentct.Document[],
+            result: PlaylistSound[],
+            options: DocumentModificationContext,
             userId: string
         ): void;

         /** Handle callback logic when an individual sound within the Playlist concludes playback naturally */
-        protected _onSoundEnd(sound: PlaylistSound<this>): Promise<this | undefined>;
+        protected _onSoundEnd(sound: PlaylistSound): Promise<this | undefined>;

         /**
          * Handle callback logic when playback for an individual sound within the Playlist is started.
          * Schedule auto-preload of next track
          */
-        protected _onSoundStart(sound: PlaylistSound<this>): Promise<void>;
-
-        override toCompendium(pack: CompendiumCollection<this>): this["_source"];
-    }
+        protected _onSoundStart(sound: PlaylistSound): Promise<void>;

-    interface Playlist extends ClientBasePlaylist {
-        readonly sounds: foundry.abstract.EmbeddedCollection<PlaylistSound<this>>;
+        override toCompendium(pack: CompendiumCollection<this>): foundry.data.PlaylistSource;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/roll-table.d.ts b/node_modules/foundry-types/client/documents/roll-table.d.ts
index 63fecf6..c5276d0 100644
--- a/node_modules/foundry-types/client/documents/roll-table.d.ts
+++ b/node_modules/foundry-types/client/documents/roll-table.d.ts
@@ -1,4 +1,4 @@
-import { ClientBaseRollTable } from "./client-base-mixes.mjs";
+import { RollTableConstructor } from "./constructors";

 declare global {
     /**
@@ -8,7 +8,7 @@ declare global {
      * @see {@link documents.RollTables}            The world-level collection of RollTable documents
      * @see {@link applications.RollTableConfig}    The RollTable configuration application
      */
-    class RollTable extends ClientBaseRollTable {
+    class RollTable extends RollTableConstructor {
         /* -------------------------------------------- */
         /*  Methods                                     */
         /* -------------------------------------------- */
@@ -24,15 +24,15 @@ declare global {
          * @param [options.messageOptions={}] Additional options which customize the created messages
          */
         toMessage(
-            results: TableResult<this>[],
+            results: TableResult[],
             {
                 roll,
                 messageData,
                 messageOptions,
             }?: {
                 roll?: Roll | null;
-                messageData?: Partial<foundry.documents.ChatMessageSource>;
-                messageOptions?: ChatMessageModificationContext;
+                messageData?: Partial<foundry.data.ChatMessageSource>;
+                messageOptions?: DocumentModificationContext;
             }
         ): Promise<ChatMessage | undefined>;

@@ -55,10 +55,10 @@ declare global {
         }?: {
             roll?: Roll | null;
             recursive?: boolean;
-            results?: TableResult<RollTable>[];
+            results?: TableResult[];
             displayChat?: boolean;
-            rollMode?: RollMode | "roll" | null;
-        }): Promise<RollTableDraw<this>>;
+            rollMode?: RollMode | null;
+        }): Promise<RollTableDraw>;

         /**
          * Draw multiple results from a RollTable, constructing a final synthetic Roll as a dice pool of inner rolls.
@@ -78,7 +78,7 @@ declare global {
                 displayChat,
                 rollMode,
             }?: { roll?: Roll | null; recursive?: boolean; displayChat?: boolean; rollMode?: RollMode | null }
-        ): Promise<RollTableDraw<this>>;
+        ): Promise<RollTableDraw>;

         /** Normalize the probabilities of rolling each item in the RollTable based on their assigned weights */
         normalize(): Promise<this>;
@@ -113,14 +113,14 @@ declare global {
             roll?: Roll;
             recursive?: boolean;
             _depth?: number;
-        }): Promise<RollTableDraw<this>>;
+        }): Promise<RollTableDraw>;

         /**
          * Get an Array of valid results for a given rolled total
          * @param value The rolled value
          * @return An Array of results
          */
-        getResultsForRoll(value: number): TableResult<this>[];
+        getResultsForRoll(value: number): TableResult[];

         /* -------------------------------------------- */
         /*  Event Handlers                              */
@@ -128,17 +128,17 @@ declare global {

         protected override _onCreateEmbeddedDocuments(
             embeddedName: "TableResult",
-            documents: TableResult<this>[],
-            result: TableResult<this>["_source"][],
-            options: DocumentModificationContext<this>,
+            documents: TableResult[],
+            result: foundry.data.TableResultSource[],
+            options: DocumentModificationContext,
             userId: string
         ): void;

         protected override _onDeleteEmbeddedDocuments(
             embeddedName: "TableResult",
-            documents: TableResult<this>[],
-            result: string[],
-            options: DocumentModificationContext<this>,
+            documents: TableResult[],
+            result: foundry.data.TableResultSource[],
+            options: DocumentModificationContext,
             userId: string
         ): void;

@@ -146,18 +146,14 @@ declare global {
         /*  Importing and Exporting                     */
         /* -------------------------------------------- */

-        override toCompendium(pack: CompendiumCollection<this>): this["_source"];
+        override toCompendium(pack: CompendiumCollection<this>): foundry.data.RollTableSource;

         /**
          * Create a new RollTable entity using all of the Entities from a specific Folder as new results.
          * @param folder  The Folder entity from which to create a roll table
          * @param options Additional options passed to the RollTable.create method
          */
-        static fromFolder(folder: Folder, options?: DocumentModificationContext<null>): Promise<RollTable | undefined>;
-    }
-
-    interface RollTable extends ClientBaseRollTable {
-        readonly results: foundry.abstract.EmbeddedCollection<TableResult<this>>;
+        static fromFolder(folder: Folder, options?: DocumentModificationContext): Promise<RollTable | undefined>;
     }

     /**
@@ -165,8 +161,8 @@ declare global {
      * @property roll    The Dice roll which generated the draw
      * @property results An array of drawn TableResult documents
      */
-    interface RollTableDraw<TParent extends RollTable> {
+    interface RollTableDraw {
         roll: Roll;
-        results: TableResult<TParent>[];
+        results: TableResult[];
     }
 }
diff --git a/node_modules/foundry-types/client/documents/scene.d.ts b/node_modules/foundry-types/client/documents/scene.d.ts
index 2f7c1f5..e1ae770 100644
--- a/node_modules/foundry-types/client/documents/scene.d.ts
+++ b/node_modules/foundry-types/client/documents/scene.d.ts
@@ -1,4 +1,4 @@
-import { ClientBaseScene } from "./client-base-mixes.mjs";
+import { SceneConstructor } from "./constructors";

 declare global {
     /**
@@ -6,22 +6,36 @@ declare global {
      * Each Scene document contains SceneData which defines its data schema.
      * @param [data={}]        Initial data provided to construct the Scene document
      */
-    class Scene extends ClientBaseScene {
+    class Scene extends SceneConstructor {
+        constructor(data: PreCreate<foundry.data.SceneSource>, context?: DocumentConstructionContext<Scene>);
+
+        /** Track whether the scene is the active view */
+        protected _view: boolean;
+
         /**
          * Track the viewed position of each scene (while in memory only, not persisted)
          * When switching back to a previously viewed scene, we can automatically pan to the previous position.
          */
         protected _viewPosition: {} | { x: number; y: number; scale: number };

-        /** Track whether the scene is the active view */
-        protected _view: boolean;
+        /** A convenience accessor for whether the Scene is currently active */
+        get active(): boolean;

-        /** Provide a thumbnail image path used to represent this document. */
-        get thumbnail(): string;
+        /** A convenience accessor for the background image of the Scene */
+        get img(): string;

         /** A convenience accessor for whether the Scene is currently viewed */
         get isView(): boolean;

+        /** A reference to the JournalEntry entity associated with this Scene, or null */
+        get journal(): JournalEntry | null;
+
+        /** A reference to the Playlist entity for this Scene, or null */
+        get playlist(): Playlist | null;
+
+        /** A reference to the PlaylistSound document which should automatically play for this Scene, if any */
+        get playlistSound(): PlaylistSound | null;
+
         /* -------------------------------------------- */
         /*  Scene Methods                               */
         /* -------------------------------------------- */
@@ -33,12 +47,15 @@ declare global {
         activate(): Promise<this>;

         override clone(
-            data: DeepPartial<this["_source"]> | undefined,
+            data: DeepPartial<foundry.data.SceneSource> | undefined,
             options: { save: true; keepId?: boolean }
         ): Promise<this>;
-        override clone(data?: DeepPartial<this["_source"]>, options?: { save?: false; keepId?: boolean }): this;
         override clone(
-            data?: DeepPartial<this["_source"]>,
+            data?: DeepPartial<foundry.data.SceneSource>,
+            options?: { save?: false; keepId?: boolean }
+        ): this;
+        override clone(
+            data?: DeepPartial<foundry.data.SceneSource>,
             options?: { save?: boolean; keepId?: boolean }
         ): this | Promise<this>;

@@ -48,28 +65,32 @@ declare global {
         override prepareBaseData(): void;

         protected override _preCreate(
-            data: PreDocumentId<this["_source"]>,
-            options: DocumentModificationContext<null>,
+            data: PreDocumentId<foundry.data.SceneSource>,
+            options: DocumentModificationContext,
             user: User
         ): Promise<void>;

         protected override _onCreate(
-            data: this["_source"],
-            options: DocumentModificationContext<null>,
+            data: foundry.data.SceneSource,
+            options: DocumentModificationContext,
             userId: string
         ): void;

         protected override _preUpdate(
             data: DocumentUpdateData<this>,
-            options: SceneUpdateContext,
+            options: DocumentModificationContext,
             user: User
         ): Promise<void>;

-        override _onUpdate(changed: DeepPartial<this["_source"]>, options: SceneUpdateContext, userId: string): void;
+        override _onUpdate(
+            changed: DeepPartial<this["_source"]>,
+            options: DocumentModificationContext,
+            userId: string
+        ): void;

-        protected override _preDelete(options: DocumentModificationContext<null>, user: User): Promise<void>;
+        protected override _preDelete(options: DocumentModificationContext, user: User): Promise<void>;

-        protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
+        protected override _onDelete(options: DocumentModificationContext, userId: string): void;

         /**
          * Handle Scene activation workflow if the active state is changed to true
@@ -79,60 +100,60 @@ declare global {

         protected override _preCreateEmbeddedDocuments(
             embeddedName: "Token",
-            result: foundry.documents.TokenSource[],
-            options: SceneEmbeddedModificationContext<this>,
+            result: foundry.data.TokenSource[],
+            options: SceneEmbeddedModificationContext,
             userId: string
         ): void;

         protected override _onCreateEmbeddedDocuments(
             embeddedName: "Token",
-            documents: TokenDocument<this>[],
-            result: foundry.documents.TokenSource[],
-            options: SceneEmbeddedModificationContext<this>,
+            documents: TokenDocument[],
+            result: foundry.data.TokenSource[],
+            options: SceneEmbeddedModificationContext,
             userId: string
         ): void;
         protected override _onCreateEmbeddedDocuments(
             embeddedName: string,
-            documents: foundry.abstract.Document<this>[],
+            documents: foundry.abstract.Documentct.Document[],
             result: object[],
-            options: SceneEmbeddedModificationContext<this>,
+            options: SceneEmbeddedModificationContext,
             userId: string
         ): void;

         protected override _preUpdateEmbeddedDocuments(
             embeddedName: "Token",
-            result: TokenDocument<this>["_source"][],
-            options: SceneEmbeddedModificationContext<this>,
+            result: foundry.data.TokenSource[],
+            options: SceneEmbeddedModificationContext,
             userId: string
         ): void;

         protected override _onUpdateEmbeddedDocuments(
             embeddedName: "Token",
-            documents: TokenDocument<this>[],
-            result: TokenDocument<this>["_source"][],
-            options: SceneEmbeddedModificationContext<this>,
+            documents: TokenDocument[],
+            result: TokenDocument["_source"][],
+            options: SceneEmbeddedModificationContext,
             userId: string
         ): void;

         protected override _preDeleteEmbeddedDocuments(
             embeddedName: "Token",
-            result: string[],
-            options: SceneEmbeddedModificationContext<this>,
+            result: TokenDocument["_source"][],
+            options: SceneEmbeddedModificationContext,
             userId: string
         ): void;

         protected override _onDeleteEmbeddedDocuments(
             embeddedName: "Token",
-            documents: TokenDocument<this>[],
-            result: string[],
-            options: SceneEmbeddedModificationContext<this>,
+            documents: TokenDocument[],
+            result: foundry.data.TokenSource[],
+            options: SceneEmbeddedModificationContext,
             userId: string
         ): void;
         protected override _onDeleteEmbeddedDocuments(
             embeddedName: string,
-            documents: foundry.abstract.Document<this>[],
-            result: string[],
-            options: SceneEmbeddedModificationContext<this>,
+            documents: foundry.abstract.Documentct.Document[],
+            result: object[],
+            options: SceneEmbeddedModificationContext,
             userId: string
         ): void;

@@ -158,13 +179,15 @@ declare global {
     }

     interface Scene {
-        readonly drawings: foundry.abstract.EmbeddedCollection<DrawingDocument<this>>;
-        readonly lights: foundry.abstract.EmbeddedCollection<AmbientLightDocument<this>>;
-        readonly notes: foundry.abstract.EmbeddedCollection<NoteDocument<this>>;
-        readonly sounds: foundry.abstract.EmbeddedCollection<AmbientSoundDocument<this>>;
-        readonly templates: foundry.abstract.EmbeddedCollection<MeasuredTemplateDocument<this>>;
-        readonly tokens: foundry.abstract.EmbeddedCollection<TokenDocument<this>>;
-        readonly tiles: foundry.abstract.EmbeddedCollection<TileDocument<this>>;
+        readonly data: foundry.data.SceneData<this>;
+
+        readonly drawings: foundry.abstract.EmbeddedCollection<DrawingDocument>;
+        readonly lights: foundry.abstract.EmbeddedCollection<AmbientLightDocument>;
+        readonly notes: foundry.abstract.EmbeddedCollection<NoteDocument>;
+        readonly sounds: foundry.abstract.EmbeddedCollection<AmbientSoundDocument>;
+        readonly templates: foundry.abstract.EmbeddedCollection<MeasuredTemplateDocument>;
+        readonly tokens: foundry.abstract.EmbeddedCollection<TokenDocument>;
+        readonly tiles: foundry.abstract.EmbeddedCollection<TileDocument>;
         readonly walls: foundry.abstract.EmbeddedCollection<WallDocument<this>>;

         _sheet: SceneConfig<this> | null;
@@ -177,43 +200,43 @@ declare global {

         updateEmbeddedDocuments(
             embeddedName: "Token",
-            updateData: EmbeddedDocumentUpdateData<TokenDocument<this>>[],
-            options?: SceneEmbeddedModificationContext<this>
+            updateData: EmbeddedDocumentUpdateData<TokenDocument>[],
+            options?: SceneEmbeddedModificationContext
         ): Promise<CollectionValue<this["tokens"]>[]>;
         updateEmbeddedDocuments(
             embeddedName: "AmbientLight",
-            updateData: EmbeddedDocumentUpdateData<AmbientLightDocument<this>>[],
-            options?: SceneEmbeddedModificationContext<this>
+            updateData: EmbeddedDocumentUpdateData<AmbientLightDocument>[],
+            options?: SceneEmbeddedModificationContext
         ): Promise<CollectionValue<this["lights"]>[]>;
         updateEmbeddedDocuments(
             embeddedName: "AmbientSound",
-            updateData: EmbeddedDocumentUpdateData<AmbientSoundDocument<this>>[],
-            options?: SceneEmbeddedModificationContext<this>
+            updateData: EmbeddedDocumentUpdateData<AmbientSoundDocument>[],
+            options?: SceneEmbeddedModificationContext
         ): Promise<CollectionValue<this["sounds"]>[]>;
         updateEmbeddedDocuments(
             embeddedName: "Drawing",
-            updateData: EmbeddedDocumentUpdateData<DrawingDocument<this>>[],
-            options?: SceneEmbeddedModificationContext<this>
+            updateData: EmbeddedDocumentUpdateData<DrawingDocument>[],
+            options?: SceneEmbeddedModificationContext
         ): Promise<CollectionValue<this["drawings"]>[]>;
         updateEmbeddedDocuments(
             embeddedName: "MeasuredTemplate",
-            updateData: EmbeddedDocumentUpdateData<MeasuredTemplateDocument<this>>[],
-            options?: SceneEmbeddedModificationContext<this>
+            updateData: EmbeddedDocumentUpdateData<MeasuredTemplateDocument>[],
+            options?: SceneEmbeddedModificationContext
         ): Promise<CollectionValue<this["tokens"]>[]>;
         updateEmbeddedDocuments(
             embeddedName: "Note",
-            updateData: EmbeddedDocumentUpdateData<NoteDocument<this>>[],
-            options?: SceneEmbeddedModificationContext<this>
+            updateData: EmbeddedDocumentUpdateData<NoteDocument>[],
+            options?: SceneEmbeddedModificationContext
         ): Promise<CollectionValue<this["notes"]>[]>;
         updateEmbeddedDocuments(
             embeddedName: "Tile",
-            updateData: EmbeddedDocumentUpdateData<TileDocument<this>>[],
-            options?: SceneEmbeddedModificationContext<this>
+            updateData: EmbeddedDocumentUpdateData<TileDocument>[],
+            options?: SceneEmbeddedModificationContext
         ): Promise<CollectionValue<this["tiles"]>[]>;
         updateEmbeddedDocuments(
             embeddedName: "Wall",
             updateData: EmbeddedDocumentUpdateData<WallDocument<this>>[],
-            options?: SceneEmbeddedModificationContext<this>
+            options?: SceneEmbeddedModificationContext
         ): Promise<CollectionValue<this["walls"]>[]>;
         updateEmbeddedDocuments(
             embeddedName:
@@ -226,15 +249,15 @@ declare global {
                 | "Tile"
                 | "Wall",
             updateData:
-                | EmbeddedDocumentUpdateData<TokenDocument<this>>[]
-                | EmbeddedDocumentUpdateData<AmbientLightDocument<this>>[]
-                | EmbeddedDocumentUpdateData<AmbientSoundDocument<this>>[]
-                | EmbeddedDocumentUpdateData<DrawingDocument<this>>[]
-                | EmbeddedDocumentUpdateData<MeasuredTemplateDocument<this>>[]
-                | EmbeddedDocumentUpdateData<NoteDocument<this>>[]
-                | EmbeddedDocumentUpdateData<TileDocument<this>>[]
+                | EmbeddedDocumentUpdateData<TokenDocument>[]
+                | EmbeddedDocumentUpdateData<AmbientLightDocument>[]
+                | EmbeddedDocumentUpdateData<AmbientSoundDocument>[]
+                | EmbeddedDocumentUpdateData<DrawingDocument>[]
+                | EmbeddedDocumentUpdateData<MeasuredTemplateDocument>[]
+                | EmbeddedDocumentUpdateData<NoteDocument>[]
+                | EmbeddedDocumentUpdateData<TileDocument>[]
                 | EmbeddedDocumentUpdateData<WallDocument<this>>[],
-            options?: SceneEmbeddedModificationContext<this>
+            options?: SceneEmbeddedModificationContext
         ): Promise<
             | CollectionValue<this["tokens"]>[]
             | CollectionValue<this["lights"]>[]
@@ -247,7 +270,7 @@ declare global {
         >;
     }

-    interface SceneUpdateContext extends DocumentModificationContext<null> {
+    interface SceneUpdateContext extends DocumentModificationContext {
         animateDarkness?: number;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/table-result.d.ts b/node_modules/foundry-types/client/documents/table-result.d.ts
index 8444c3f..ebb857b 100644
--- a/node_modules/foundry-types/client/documents/table-result.d.ts
+++ b/node_modules/foundry-types/client/documents/table-result.d.ts
@@ -1,12 +1,14 @@
-import { ClientBaseTableResult } from "./client-base-mixes.mjs";
-
+import { TableResultConstructor } from "./constructors";
 declare global {
     /**
-     * The client-side TableResult document which extends the common BaseTableResult document model.
+     * The TableResult embedded document within a RollTable document which extends the BaseRollTable abstraction.
+     * Each TableResult belongs to the results collection of a RollTable entity.
+     * Each TableResult contains a TableResultData object which provides its source data.
      *
-     * @see {@link RollTable} The RollTable document type which contains TableResult documents
+     * @see {@link data.TableResultData}        The TableResult data schema
+     * @see {@link documents.RollTable}         The RollTable document which contains TableResult embedded documents
      */
-    class TableResult<TParent extends RollTable> extends ClientBaseTableResult<TParent> {
+    class TableResult extends TableResultConstructor {
         /** A path reference to the icon image used to represent this result */
         get icon(): string;

@@ -16,4 +18,8 @@ declare global {
          */
         getChatText(): string;
     }
+
+    interface TableResult {
+        readonly parent: RollTable | null;
+    }
 }
diff --git a/node_modules/foundry-types/client/documents/tile-document.d.ts b/node_modules/foundry-types/client/documents/tile-document.d.ts
index 0ca5726..9c8bb44 100644
--- a/node_modules/foundry-types/client/documents/tile-document.d.ts
+++ b/node_modules/foundry-types/client/documents/tile-document.d.ts
@@ -1,9 +1,11 @@
-import { CanvasBaseTile } from "./client-base-mixes.mjs";
+import { TileDocumentConstructor } from "./constructors";

 declare global {
-    class TileDocument<TParent extends Scene | null> extends CanvasBaseTile<TParent> {}
+    class TileDocument extends TileDocumentConstructor {}

-    interface TileDocument<TParent extends Scene | null> extends CanvasBaseTile<TParent> {
-        readonly _object: Tile<this> | null;
+    interface TileDocument {
+        readonly parent: Scene | null;
+
+        readonly _object: Tile;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/token-document.d.ts b/node_modules/foundry-types/client/documents/token-document.d.ts
index d106e4e..9990c8a 100644
--- a/node_modules/foundry-types/client/documents/token-document.d.ts
+++ b/node_modules/foundry-types/client/documents/token-document.d.ts
@@ -1,10 +1,12 @@
-import { CanvasBaseToken } from "./client-base-mixes.mjs";
+import { TokenDocumentConstructor } from "./constructors";
+
+type _Actor = Actor<TokenDocument<_Actor>>;

 declare global {
-    class TokenDocument<TParent extends Scene | null> extends CanvasBaseToken<TParent> {
+    class TokenDocument<TActor extends Actor = _Actor> extends TokenDocumentConstructor {
         constructor(
-            data: PreCreate<foundry.documents.TokenSource>,
-            context?: TokenDocumentConstructionContext<TParent, Actor<TokenDocument<Scene | null>> | null>
+            data: PreCreate<foundry.data.TokenSource>,
+            context?: TokenDocumentConstructionContext<Scene | null, TActor | null>
         );

         /** An array of detection modes which are available to this Token */
@@ -12,12 +14,18 @@ declare global {

         sort: number;

+        /**
+         * A cached reference to the Actor document that this Token modifies.
+         * This may be a "synthetic" unlinked Token Actor which does not exist in the World.
+         */
+        protected _actor: TActor | null;
+
         /**
          * A lazily evaluated reference to the Actor this Token modifies.
-         * If actorLink is true, then the document is the primary Actor document.
-         * Otherwise, the Actor document is a synthetic (ephemeral) document constructed using the Token's actorData.
+         * If actorLink is true, then the entity is the primary Actor document.
+         * Otherwise the Actor entity is a synthetic (ephemeral) document constructed using the Token's actorData.
          */
-        get actor(): Actor<this | null> | null;
+        get actor(): TActor | null;

         /** An indicator for whether or not the current User has full control over this Token document. */
         override get isOwner(): boolean;
@@ -26,7 +34,7 @@ declare global {
         get isLinked(): this["actorLink"];

         /** Return a reference to a Combatant that represents this Token, if one is present in the current encounter. */
-        get combatant(): Combatant<Combat, this> | null;
+        get combatant(): Combatant<Combat> | null;

         /** An indicator for whether or not this Token is currently involved in the active combat encounter. */
         get inCombat(): boolean;
@@ -44,21 +52,24 @@ declare global {
         protected _prepareDetectionModes(): void;

         override clone(
-            data: DeepPartial<this["_source"]> | undefined,
+            data: DeepPartial<foundry.data.TokenSource> | undefined,
             options: { save: true; keepId?: boolean }
         ): Promise<this>;
-        override clone(data?: DeepPartial<this["_source"]>, options?: { save?: false; keepId?: boolean }): this;
         override clone(
-            data?: DeepPartial<this["_source"]>,
+            data?: DeepPartial<foundry.data.TokenSource>,
+            options?: { save?: false; keepId?: boolean }
+        ): this;
+        override clone(
+            data?: DeepPartial<foundry.data.TokenSource>,
             options?: { save?: boolean; keepId?: boolean }
         ): this | Promise<this>;

         /**
          * Create a synthetic Actor using a provided Token instance
-         * If the Token data is linked, return the true Actor document
+         * If the Token data is linked, return the true Actor entity
          * If the Token data is not linked, create a synthetic Actor using the Token's actorData override
          */
-        getActor(): Actor<this | null> | null;
+        getActor(): TActor | null;

         /**
          * A helper method to retrieve the underlying data behind one of the Token's attribute bars
@@ -87,10 +98,11 @@ declare global {
          * @param options  Provided options which modify the update request
          * @returns The updated un-linked Actor instance
          */
-        modifyActorDocument(
-            update: Record<string, unknown>,
-            options: DocumentModificationContext<this>
-        ): Promise<Actor<this>[]>;
+        modifyActorDocument(update: Record<string, unknown>, options: DocumentModificationContext): Promise<TActor[]>;
+
+        override getEmbeddedCollection(
+            embeddedName: "Item" | "ActiveEffect"
+        ): ReturnType<TActor["getEmbeddedCollection"]>;

         /**
          * Redirect creation of Documents within a synthetic Token Actor to instead update the tokenData override object.
@@ -101,9 +113,9 @@ declare global {
          */
         createActorEmbeddedDocuments(
             embeddedName: "ActiveEffect" | "Item",
-            data: PreCreate<foundry.documents.ActiveEffectSource>[] | Partial<foundry.documents.ActiveEffectSource>[],
-            options?: DocumentModificationContext<this>
-        ): ActiveEffect<Actor<this>> | Item<Actor<this>>[];
+            data: PreCreate<foundry.data.ActiveEffectSource>[] | Partial<foundry.data.ActiveEffectSource>[],
+            options?: DocumentModificationContext
+        ): ActiveEffect | Item[];

         /**
          * Redirect updating of Documents within a synthetic Token Actor to instead update the tokenData override object.
@@ -114,9 +126,9 @@ declare global {
          */
         updateActorEmbeddedDocuments(
             embeddedName: "ActiveEffect" | "Item",
-            updates: EmbeddedDocumentUpdateData<ActiveEffect<Actor<this>> | Item<Actor<this>>>[],
-            options: DocumentModificationContext<this>
-        ): Promise<ActiveEffect<Actor<this>>[] | Item<Actor<this>>[]>;
+            updates: EmbeddedDocumentUpdateData<ActiveEffect | Item>[],
+            options: DocumentModificationContext
+        ): Promise<ActiveEffect[] | Item[]>;

         /**
          * Redirect deletion of Documents within a synthetic Token Actor to instead update the tokenData override object.
@@ -128,8 +140,8 @@ declare global {
         deleteActorEmbeddedDocuments(
             embeddedName: "ActiveEffect" | "Item",
             ids: string[],
-            options: DocumentModificationContext<this>
-        ): Promise<ActiveEffect<Actor<this>>[] | Item<Actor<this>>[]>;
+            options: DocumentModificationContext
+        ): Promise<ActiveEffect[] | Item[]>;

         /* -------------------------------------------- */
         /*  Event Handlers                              */
@@ -137,30 +149,30 @@ declare global {

         protected override _preUpdate(
             data: DocumentUpdateData<this>,
-            options: TokenUpdateContext<TParent>,
+            options: DocumentModificationContext<this>,
             user: User
         ): Promise<void>;

         /** When the Actor data overrides change for an un-linked Token Actor, simulate the pre-update process. */
         protected _preUpdateTokenActor(
-            data: DocumentUpdateData<Actor<this>>,
-            options: TokenUpdateContext<TParent>,
+            data: DocumentUpdateData<TActor>,
+            options: TokenUpdateContext<this>,
             userId: string
         ): Promise<void>;

         protected override _onUpdate(
             changed: DeepPartial<this["_source"]>,
-            options: DocumentModificationContext<TParent>,
+            options: DocumentModificationContext,
             userId: string
         ): void;

         /** When the base Actor for a TokenDocument changes, we may need to update its Actor instance */
-        _onUpdateBaseActor(update?: Record<string, unknown>, options?: DocumentModificationContext<null>): void;
+        _onUpdateBaseActor(update?: Record<string, unknown>, options?: DocumentModificationContext<Actor>): void;

         /** When the Actor data overrides change for an un-linked Token Actor, simulate the post-update process. */
         protected _onUpdateTokenActor(
             data: DeepPartial<this["_source"]["actorData"]>,
-            options: DocumentModificationContext<TParent>,
+            options: DocumentModificationContext,
             userId: string
         ): void;

@@ -171,24 +183,35 @@ declare global {
         static getTrackedAttributeChoices(attributes: TokenAttributes): TokenAttributes;
     }

-    interface TokenDocument<TParent extends Scene | null> extends CanvasBaseToken<TParent> {
-        get object(): Token<this> | null;
-        get sheet(): TokenConfig<this>;
+    interface TokenDocument {
+        readonly data: foundry.data.TokenData<this>;
+
+        readonly parent: Scene | null;
+
+        // V10 shim
+        readonly flags: this["data"]["flags"];
+
         get uuid(): TokenDocumentUUID;
+
+        _sheet: TokenConfig<TokenDocument> | null;
+
+        readonly _object: Token<TokenDocument> | null;
     }

-    interface TokenDocumentConstructionContext<
-        TParent extends Scene | null,
-        TActor extends Actor<TokenDocument<Scene | null>> | null
-    > extends DocumentConstructionContext<TParent> {
+    interface TokenDocumentConstructionContext<TParent extends Scene | null, TActor extends Actor | null>
+        extends DocumentConstructionContext<TParent> {
         actor?: TActor;
     }

-    interface TokenUpdateContext<TParent extends Scene | null> extends DocumentModificationContext<TParent> {
+    interface TokenUpdateContext<T extends TokenDocument> extends DocumentModificationContext<T> {
         action?: "create" | "update" | "delete";
         embedded?: { embeddedName: string; hookData: { _id?: string }[] };
     }

+    namespace TokenDocument {
+        function _canUpdate(user: User, doc: TokenDocument, data: foundry.data.TokenData<TokenDocument>): boolean;
+    }
+
     type TokenDocumentUUID = `Scene.${string}.Token.${string}`;

     interface TokenAttributes {
diff --git a/node_modules/foundry-types/client/documents/user.d.ts b/node_modules/foundry-types/client/documents/user.d.ts
index 559d6e0..c2e7fb3 100644
--- a/node_modules/foundry-types/client/documents/user.d.ts
+++ b/node_modules/foundry-types/client/documents/user.d.ts
@@ -1,24 +1,21 @@
-import { ClientBaseUser } from "./client-base-mixes.mjs";
+import { UserConstructor } from "./constructors";

 declare global {
     /**
      * The client-side User document which extends the common BaseUser model.
      * Each User document contains UserData which defines its data schema.
      *
-     * @extends documents.BaseUser
-     * @mixes ClientDocumentMixin
-     *
      * @see {@link documents.Users}             The world-level collection of User documents
      * @see {@link applications.UserConfig}     The User configuration application
      */
-    class User extends ClientBaseUser {
+    class User<TActor extends Actor = Actor> extends UserConstructor {
         constructor(data: PreCreate<foundry.documents.UserSource>, context?: DocumentConstructionContext<null>);

         /** Track whether the user is currently active in the game */
         active: boolean;

         /** Track references to the current set of Tokens which are targeted by the User */
-        targets: Set<Token>;
+        targets: Set<NonNullable<NonNullable<TActor["token"]>["object"]>>;

         /** Track the ID of the Scene that is currently being viewed by the User */
         viewedScene: string | null;
@@ -88,15 +85,15 @@ declare global {

         protected override _onUpdate(
             changed: DeepPartial<foundry.documents.UserSource>,
-            options: DocumentModificationContext<null>,
+            options: DocumentModificationContext<this>,
             userId: string
         ): void;

-        protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
+        protected override _onDelete(options: DocumentModificationContext<this>, userId: string): void;
     }

-    interface User extends ClientBaseUser {
-        character: Actor<null> | null;
+    interface User<TActor extends Actor = Actor> {
+        character: TActor | null | undefined;
     }

     interface UserActivity {
diff --git a/node_modules/foundry-types/client/documents/wall-document.d.ts b/node_modules/foundry-types/client/documents/wall-document.d.ts
index 9c4dbd6..314568d 100644
--- a/node_modules/foundry-types/client/documents/wall-document.d.ts
+++ b/node_modules/foundry-types/client/documents/wall-document.d.ts
@@ -1,9 +1,11 @@
-import { CanvasBaseWall } from "./client-base-mixes.mjs";
+import { WallDocumentConstructor } from "./constructors";

 declare global {
-    class WallDocument<TParent extends Scene | null> extends CanvasBaseWall<TParent> {}
+    class WallDocument<TParent extends Scene | null> extends WallDocumentConstructor {}

-    interface WallDocument<TParent extends Scene | null> extends CanvasBaseWall<TParent> {
-        get object(): Wall<this> | null;
+    interface WallDocument<TParent extends Scene | null> {
+        readonly parent: TParent;
+
+        readonly _object: Wall<this>;
     }
 }
diff --git a/node_modules/foundry-types/client/game.d.ts b/node_modules/foundry-types/client/game.d.ts
index 9e20318..0243f7f 100644
--- a/node_modules/foundry-types/client/game.d.ts
+++ b/node_modules/foundry-types/client/game.d.ts
@@ -14,14 +14,14 @@ declare global {
      * @param socket    The open web-socket which should be used to transact game-state data
      */
     class Game<
-        TActor extends Actor<null>,
+        TActor extends Actor,
         TActors extends Actors<TActor>,
-        TChatMessage extends ChatMessage,
+        TChatMessage extends ChatMessage<TActor>,
         TCombat extends Combat,
-        TItem extends Item<null>,
+        TItem extends Item<TActor>,
         TMacro extends Macro,
         TScene extends Scene,
-        TUser extends User
+        TUser extends User<TActor>
     > {
         /**
          * The named view which is currently active.
@@ -36,11 +36,11 @@ declare global {
         data: {
             actors: TActor["_source"][];
             items: TItem["_source"][];
-            macros: TMacro["_source"][];
-            messages: TChatMessage["_source"][];
+            macros: foundry.data.MacroSource[];
+            messages: foundry.data.ChatMessageSource[];
             packs: CompendiumMetadata[];
-            tables: foundry.documents.RollTableSource[];
-            users: TUser["_source"][];
+            tables: foundry.data.RollTableSource[];
+            users: foundry.documents.UserSource[];
             version: string;
         };

@@ -163,9 +163,7 @@ declare global {
          * Fetch World data and return a Game instance
          * @return A Promise which resolves to the created Game instance
          */
-        static create(): Promise<
-            Game<Actor<null>, Actors<Actor<null>>, ChatMessage, Combat, Item<null>, Macro, Scene, User>
-        >;
+        static create(): Promise<Game<Actor, Actors<Actor>, ChatMessage, Combat, Item, Macro, Scene, User>>;

         /** Request World data from server and return it */
         static getWorldData(socket: io.Socket): Promise<object>;
diff --git a/node_modules/foundry-types/client/keyboard/client-keybindings.d.ts b/node_modules/foundry-types/client/keyboard/client-keybindings.d.ts
index 64cefe6..f2d7a2d 100644
--- a/node_modules/foundry-types/client/keyboard/client-keybindings.d.ts
+++ b/node_modules/foundry-types/client/keyboard/client-keybindings.d.ts
@@ -157,9 +157,7 @@ declare global {
         private static _onToggleCharacterSheet(
             event: KeyboardEvent,
             context: KeyboardEventContext
-        ):
-            | ActorSheet<Actor<TokenDocument<Scene | null> | null>>
-            | Promise<ActorSheet<Actor<TokenDocument<Scene | null> | null>>>;
+        ): ActorSheet | Promise<ActorSheet>;

         /**
          * Handle action to target the currently hovered token.
@@ -179,7 +177,7 @@ declare global {
          * @param context The context data of the event
          * @param layer   The Placeables layer
          */
-        private _handleMovement(context: KeyboardEventContext, layer: TokenLayer<Token> | TilesLayer<Tile>): void;
+        private _handleMovement(context: KeyboardEventContext, layer: TokenLayer | BackgroundLayer): void;

         /** Handle panning the canvas using CTRL + directional keys */
         private _handleCanvasPan(): Promise<void>;
diff --git a/node_modules/foundry-types/client/pixi/canvas.d.ts b/node_modules/foundry-types/client/pixi/canvas.d.ts
index afb30e6..eafbbf2 100644
--- a/node_modules/foundry-types/client/pixi/canvas.d.ts
+++ b/node_modules/foundry-types/client/pixi/canvas.d.ts
@@ -92,14 +92,15 @@ declare global {
         primary: PrimaryCanvasGroup;

         // Layers
+        background: BackgroundLayer;
         controls: ControlsLayer;
         drawings: DrawingsLayer;
+        foreground: ForegroundLayer;
         grid: GridLayer;
         lighting: TAmbientLight["layer"];
         notes: NotesLayer;
         sounds: SoundsLayer;
         templates: TMeasuredTemplate["layer"];
-        tiles: Tile["layer"];
         tokens: TToken["layer"];
         walls: WallsLayer;

diff --git a/node_modules/foundry-types/client/pixi/helpers/point-source/base.d.ts b/node_modules/foundry-types/client/pixi/helpers/point-source/base.d.ts
index 766462d..cd27ade 100644
--- a/node_modules/foundry-types/client/pixi/helpers/point-source/base.d.ts
+++ b/node_modules/foundry-types/client/pixi/helpers/point-source/base.d.ts
@@ -5,7 +5,7 @@ declare global {
      * A helper class used by the Sight Layer to represent a source of vision or illumination.
      * @param object The object responsible for the PointSource
      */
-    abstract class PointSource<TObject extends Maybe<PlaceableObject> = Maybe<PlaceableObject>> {
+    abstract class PointSource<TObject extends PlaceableObject | undefined = PlaceableObject | undefined> {
         constructor(object: TObject);

         /** The PlaceableObject which is the origin of this PointSource. */
diff --git a/node_modules/foundry-types/client/pixi/helpers/point-source/light-source.d.ts b/node_modules/foundry-types/client/pixi/helpers/point-source/light-source.d.ts
index e73cc34..e62f235 100644
--- a/node_modules/foundry-types/client/pixi/helpers/point-source/light-source.d.ts
+++ b/node_modules/foundry-types/client/pixi/helpers/point-source/light-source.d.ts
@@ -5,7 +5,7 @@ declare global {
      * A specialized subclass of the PointSource abstraction which is used to control the rendering of light sources.
      * @param object The light-emitting object that generates this light source
      */
-    class LightSource<TObject extends Maybe<AmbientLight | Token>> extends PointSource<TObject> {
+    class LightSource<TObject extends AmbientLight | Token | undefined> extends PointSource<TObject> {
         constructor(object: TObject);

         /** The light or darkness container for this source */
diff --git a/node_modules/foundry-types/client/pixi/perception/vision-mode.d.ts b/node_modules/foundry-types/client/pixi/perception/vision-mode.d.ts
index dfc6540..bbca401 100644
--- a/node_modules/foundry-types/client/pixi/perception/vision-mode.d.ts
+++ b/node_modules/foundry-types/client/pixi/perception/vision-mode.d.ts
@@ -49,10 +49,7 @@ declare global {
                 adaptive: boolean;
             };
             defaults: Partial<
-                Pick<
-                    TokenDocument<Scene | null>["sight"],
-                    "attenuation" | "brightness" | "saturation" | "contrast" | "range"
-                >
+                Pick<TokenDocument["sight"], "attenuation" | "brightness" | "saturation" | "contrast" | "range">
             >;
         };

diff --git a/node_modules/foundry-types/client/pixi/placeable-object/ambient-light.d.ts b/node_modules/foundry-types/client/pixi/placeable-object/ambient-light.d.ts
index 523c4e4..3e5bf6d 100644
--- a/node_modules/foundry-types/client/pixi/placeable-object/ambient-light.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeable-object/ambient-light.d.ts
@@ -1,5 +1,5 @@
 declare class AmbientLight<
-    TDocument extends AmbientLightDocument<Scene | null> = AmbientLightDocument<Scene | null>
+    TDocument extends AmbientLightDocument = AmbientLightDocument
 > extends PlaceableObject<TDocument> {
     constructor(document: TDocument);

@@ -36,8 +36,6 @@ declare class AmbientLight<

     override refresh(): this;

-    protected override _refresh(options: object): void;
-
     /** Refresh the display of the ControlIcon for this AmbientLight source */
     refreshControl(): void;

@@ -59,19 +57,19 @@ declare class AmbientLight<
     /*  Socket Listeners and Handlers               */
     /* -------------------------------------------- */

-    protected override _onCreate(
+    override _onCreate(
         data: TDocument["_source"],
-        options: DocumentModificationContext<TDocument["parent"]>,
+        options: DocumentModificationContext<TDocument>,
         userId: string
     ): void;

-    protected override _onUpdate(
-        changed: DeepPartial<TDocument["_source"]>,
-        options: DocumentModificationContext<TDocument["parent"]>,
+    override _onUpdate(
+        changed: DocumentUpdateData<TDocument>,
+        options: DocumentModificationContext<TDocument>,
         userId: string
     ): void;

-    protected override _onDelete(options: DocumentModificationContext<TDocument["parent"]>, userId: string): void;
+    override _onDelete(options: DocumentModificationContext<TDocument>, userId: string): void;

     /* -------------------------------------------- */
     /*  Mouse Interaction Handlers                  */
diff --git a/node_modules/foundry-types/client/pixi/placeable-object/ambient-sound.d.ts b/node_modules/foundry-types/client/pixi/placeable-object/ambient-sound.d.ts
index 2f916e7..ab3f805 100644
--- a/node_modules/foundry-types/client/pixi/placeable-object/ambient-sound.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeable-object/ambient-sound.d.ts
@@ -1,94 +1,5 @@
 declare class AmbientSound<
-    TDocument extends AmbientSoundDocument<Scene | null> = AmbientSoundDocument<Scene | null>
+    TDocument extends AmbientSoundDocument = AmbientSoundDocument
 > extends PlaceableObject<TDocument> {
-    /** The Sound which manages playback for this AmbientSound effect */
-    sound: Sound | null;
-
-    /** A SoundSource object which manages the area of effect for this ambient sound */
-    source: SoundSource<this>;
-
-    static override embeddedName: "AmbientSound";
-
-    /** Create a Sound used to play this AmbientSound object */
-    protected _createSound(): Sound | null;
-
-    /* -------------------------------------------- */
-    /* Properties                                   */
-    /* -------------------------------------------- */
-
-    /** Is this ambient sound is currently audible based on its hidden state and the darkness level of the Scene? */
-    get isAudible(): boolean;
-
-    override get bounds(): PIXI.Rectangle;
-
-    /** A convenience accessor for the sound radius in pixels */
-    get radius(): number;
-
-    /* -------------------------------------------- */
-    /* Methods                                      */
-    /* -------------------------------------------- */
-
-    /**
-     * Toggle playback of the sound depending on whether or not it is audible
-     * @param isAudible    Is the sound audible?
-     * @param volume       The target playback volume
-     * @param [options={}] Additional options which affect sound synchronization
-     * @param [options.fade=250] A duration in milliseconds to fade volume transition
-     */
-    sync(isAudible: boolean, volume: number, options?: { fade?: number }): void;
-
-    /* -------------------------------------------- */
-    /* Rendering                                    */
-    /* -------------------------------------------- */
-
-    override clear(): this;
-
-    protected override _draw(): Promise<void>;
-
-    protected override _destroy(options: object): void;
-
-    protected _drawControlIcon(): ControlIcon;
-
-    protected override _refresh(options: object): void;
-
-    /** Refresh the display of the ControlIcon for this AmbientSound source */
-    refreshControl(): void;
-
-    /**
-     * Compute the field-of-vision for an object, determining its effective line-of-sight and field-of-vision polygons
-     * @param [options={}]   Options which modify how the audio source is updated
-     * @param [options.defer]    Defer refreshing the SoundsLayer to manually call that refresh later.
-     * @param [options.deleted]  Indicate that this SoundSource has been deleted.
-     */
-    updateSource(options?: { defer?: boolean; deleted?: boolean }): void;
-
-    /* -------------------------------------------- */
-    /*  Document Event Handlers                     */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: TDocument["_source"],
-        options: DocumentModificationContext<TDocument["parent"]>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        changed: DeepPartial<TDocument["_source"]>,
-        options: DocumentUpdateContext<TDocument["parent"]>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TDocument["parent"]>, userId: string): void;
-
-    /* -------------------------------------------- */
-    /*  Interaction Event Handlers                  */
-    /* -------------------------------------------- */
-
-    protected override _canHUD(user: User, event: PIXI.InteractionEvent): boolean;
-
-    protected override _canConfigure(user: User, event: PIXI.InteractionEvent): boolean;
-
-    protected override _onClickRight(event: PIXI.InteractionEvent): void;
-
-    protected override _onDragLeftMove(event: PIXI.InteractionEvent): void;
+    protected _draw(): Promise<void>;
 }
diff --git a/node_modules/foundry-types/client/pixi/placeable-object/base.d.ts b/node_modules/foundry-types/client/pixi/placeable-object/base.d.ts
index c5c5fee..f7c5002 100644
--- a/node_modules/foundry-types/client/pixi/placeable-object/base.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeable-object/base.d.ts
@@ -5,7 +5,9 @@ declare global {
      * An Abstract Base Class which defines a Placeable Object which represents an Entity placed on the Canvas
      * @param document The Document instance which is represented by this object
      */
-    abstract class PlaceableObject<TDocument extends CanvasDocument = CanvasDocument> extends PIXI.Container {
+    abstract class PlaceableObject<
+        TDocument extends CanvasDocument | CanvasDocument2 = CanvasDocument | CanvasDocument2
+    > extends PIXI.Container {
         constructor(document: TDocument);

         /** Retain a reference to the Scene within which this Placeable Object resides */
@@ -156,30 +158,18 @@ declare global {
          */
         refresh(): this;

-        /**
-         * The inner _refresh method which must be defined by each PlaceableObject subclass.
-         * @param options Options which may modify the refresh workflow
-         */
-        protected abstract _refresh(options: object): void;
-
         /** Register pending canvas operations which should occur after a new PlaceableObject of this type is created */
-        protected _onCreate(
-            data: TDocument["_source"],
-            options: DocumentModificationContext<TDocument["parent"]>,
-            userId: string
-        ): void;
+        _onCreate(data: TDocument["_source"], options: DocumentModificationContext<TDocument>, userId: string): void;

         /** Define additional steps taken when an existing placeable object of this type is updated with new data */
-
-        protected _onUpdate(
-            changed: DeepPartial<TDocument["_source"]>,
-            options: DocumentUpdateContext<TDocument["parent"]>,
+        _onUpdate(
+            changed: DocumentUpdateData<TDocument>,
+            options: DocumentModificationContext<TDocument>,
             userId: string
         ): void;

         /** Define additional steps taken when an existing placeable object of this type is deleted */
-
-        protected _onDelete(options: DocumentModificationContext<TDocument["parent"]>, userId: string): void;
+        _onDelete(options: DocumentModificationContext<TDocument>, userId: string): void;

         /* -------------------------------------------- */
         /*  Methods                                     */
@@ -299,7 +289,8 @@ declare global {
         protected _onDragLeftCancel(event: PIXI.InteractionEvent): void;
     }

-    interface PlaceableObject<TDocument extends CanvasDocument = CanvasDocument> extends PIXI.Container {
+    interface PlaceableObject<TDocument extends CanvasDocument | CanvasDocument2 = CanvasDocument | CanvasDocument2>
+        extends PIXI.Container {
         hitArea: PIXI.Rectangle;
     }
 }
diff --git a/node_modules/foundry-types/client/pixi/placeable-object/drawing.d.ts b/node_modules/foundry-types/client/pixi/placeable-object/drawing.d.ts
index 7397bf9..99310a6 100644
--- a/node_modules/foundry-types/client/pixi/placeable-object/drawing.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeable-object/drawing.d.ts
@@ -2,9 +2,7 @@
  * The Drawing object is an implementation of the PlaceableObject container.
  * Each Drawing is a placeable object in the DrawingsLayer.
  */
-declare class Drawing<
-    TDocument extends DrawingDocument<Scene | null> = DrawingDocument<Scene | null>
-> extends PlaceableObject<TDocument> {
+declare class Drawing<TDocument extends DrawingDocument = DrawingDocument> extends PlaceableObject<TDocument> {
     constructor(document: TDocument);

     /** The inner drawing container */
@@ -59,8 +57,6 @@ declare class Drawing<

     override refresh(): this;

-    protected override _refresh(options: object): void;
-
     /** Draw rectangular shapes */
     protected _drawRectangle(): void;

@@ -101,13 +97,12 @@ declare class Drawing<

     protected override _onRelease(options?: object): void;

-    override _onDelete(options: DocumentModificationContext<TDocument["parent"]>, userId: string): void;
+    override _onDelete(options: DocumentModificationContext<TDocument>, userId: string): void;

     /** Handle text entry in an active text tool */
     protected _onDrawingTextKeydown(event: KeyboardEvent): void;
 }

-declare interface Drawing<TDocument extends DrawingDocument<Scene | null> = DrawingDocument<Scene | null>>
-    extends PlaceableObject<TDocument> {
+declare interface Drawing {
     get layer(): DrawingsLayer<this>;
 }
diff --git a/node_modules/foundry-types/client/pixi/placeable-object/measured-template.d.ts b/node_modules/foundry-types/client/pixi/placeable-object/measured-template.d.ts
index a6ab2f0..af46660 100644
--- a/node_modules/foundry-types/client/pixi/placeable-object/measured-template.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeable-object/measured-template.d.ts
@@ -17,7 +17,7 @@
  * });
  */
 declare class MeasuredTemplate<
-    TDocument extends MeasuredTemplateDocument<Scene | null> = MeasuredTemplateDocument<Scene | null>
+    TDocument extends MeasuredTemplateDocument = MeasuredTemplateDocument
 > extends PlaceableObject<TDocument> {
     /** The template shape used for testing point intersection */
     shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle;
@@ -76,8 +76,6 @@ declare class MeasuredTemplate<

     override refresh(): this;

-    protected override _refresh(options: object): void;
-
     /** Get a Circular area of effect given a radius of effect */
     protected _getCircleShape(distance: number): PIXI.Circle;

@@ -119,17 +117,16 @@ declare class MeasuredTemplate<
     /*  Socket Listeners and Handlers               */
     /* -------------------------------------------- */

-    protected override _onUpdate(
+    override _onUpdate(
         changed: DeepPartial<TDocument["_source"]>,
-        options: DocumentModificationContext<TDocument["parent"]>,
+        options: DocumentModificationContext<TDocument>,
         userId: string
     ): void;

-    protected override _onDelete(options: DocumentModificationContext<TDocument["parent"]>, userId: string): void;
+    override _onDelete(options: DocumentModificationContext<TDocument>, userId: string): void;
 }

-declare interface MeasuredTemplate<
-    TDocument extends MeasuredTemplateDocument<Scene | null> = MeasuredTemplateDocument<Scene | null>
-> extends PlaceableObject<TDocument> {
+declare interface MeasuredTemplate<TDocument extends MeasuredTemplateDocument = MeasuredTemplateDocument>
+    extends PlaceableObject<TDocument> {
     get layer(): TemplateLayer<this>;
 }
diff --git a/node_modules/foundry-types/client/pixi/placeable-object/note.d.ts b/node_modules/foundry-types/client/pixi/placeable-object/note.d.ts
index 11898ef..ce02b83 100644
--- a/node_modules/foundry-types/client/pixi/placeable-object/note.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeable-object/note.d.ts
@@ -3,9 +3,7 @@
  * Each Note links to a JournalEntry document and represents its location on the map.
  * @todo fill in ... some day
  */
-declare class Note<
-    TDocument extends NoteDocument<Scene | null> = NoteDocument<Scene | null>
-> extends PlaceableObject<TDocument> {
+declare class Note<TDocument extends NoteDocument = NoteDocument> extends PlaceableObject<TDocument> {
     static override embeddedName: "Note";

     override get bounds(): PIXI.Rectangle;
@@ -43,22 +41,19 @@ declare class Note<

     override refresh(): this;

-    protected override _refresh(options: object): void;
-
     /* -------------------------------------------- */
     /*  Event Handlers                              */
     /* -------------------------------------------- */

-    protected override _onUpdate(
+    override _onUpdate(
         changed: DeepPartial<TDocument["_source"]>,
-        options: DocumentModificationContext<TDocument["parent"]>,
+        options: DocumentModificationContext<TDocument>,
         userId: string
     ): void;

     protected override _canHover(user: User): boolean;
 }

-declare interface Note<TDocument extends NoteDocument<Scene | null> = NoteDocument<Scene | null>>
-    extends PlaceableObject<TDocument> {
+declare interface Note<TDocument extends NoteDocument = NoteDocument> extends PlaceableObject<TDocument> {
     get layer(): NotesLayer<this>;
 }
diff --git a/node_modules/foundry-types/client/pixi/placeable-object/tile.d.ts b/node_modules/foundry-types/client/pixi/placeable-object/tile.d.ts
index d365557..262e11e 100644
--- a/node_modules/foundry-types/client/pixi/placeable-object/tile.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeable-object/tile.d.ts
@@ -2,12 +2,15 @@ export {};

 declare global {
     /**
-     * A PlaceablesLayer designed for rendering the visual Scene for a specific vertical cross-section.
-     * @category - Canvas
+     * A Tile is an implementation of PlaceableObject which represents a static piece of artwork or prop within the Scene.
+     * Tiles are drawn inside a {@link BackgroundLayer} container.
+     *
+     * @see {@link TileDocument}
+     * @see {@link BackgroundLayer}
+     * @see {@link TileSheet}
+     * @see {@link TileHUD}
      */
-    class Tile<
-        TDocument extends TileDocument<Scene | null> = TileDocument<Scene | null>
-    > extends PlaceableObject<TDocument> {
+    class Tile<TDocument extends TileDocument = TileDocument> extends PlaceableObject<TDocument> {
         /* -------------------------------------------- */
         /*  Attributes                                  */
         /* -------------------------------------------- */
@@ -69,10 +72,10 @@ declare global {

         override destroy(options: object): void;

-        /** @param [options.refreshPerception=false]  Also refresh the perception layer. */
-        override refresh(options?: { refreshPerception?: boolean }): this;
-
-        protected override _refresh(options: { refreshPerception?: boolean }): void;
+        /**
+         * @param [refreshPerception=false]  Also refresh the perception layer.
+         */
+        override refresh({ refreshPerception }?: { refreshPerception?: boolean }): this;

         /** Refresh the display of the Tile border */
         protected _refreshBorder(b: PIXI.Rectangle): void;
@@ -86,11 +89,11 @@ declare global {

         override _onUpdate(
             changed: DeepPartial<TDocument["_source"]>,
-            options: DocumentModificationContext<TDocument["parent"]>,
+            options: DocumentModificationContext<TDocument>,
             userId: string
         ): void;

-        override _onDelete(options: DocumentModificationContext<TDocument["parent"]>, userId: string): void;
+        override _onDelete(options: DocumentModificationContext<TDocument>, userId: string): void;

         /**
          * Update wall states and refresh lighting and vision when a tile becomes a roof, or when an existing roof tile's
@@ -166,11 +169,10 @@ declare global {
          * Create a preview tile with a background texture instead of an image
          * @param data Initial data with which to create the preview Tile
          */
-        static createPreview(data: DeepPartial<foundry.documents.TileSource>): Tile;
+        static createPreview(data: DeepPartial<foundry.data.TileSource>): Tile;
     }

-    interface Tile<TDocument extends TileDocument<Scene | null> = TileDocument<Scene | null>>
-        extends PlaceableObject<TDocument> {
+    interface Tile<TDocument extends TileDocument = TileDocument> extends PlaceableObject<TDocument> {
         get layer(): TilesLayer<this>;
     }
 }
diff --git a/node_modules/foundry-types/client/pixi/placeable-object/token.d.ts b/node_modules/foundry-types/client/pixi/placeable-object/token.d.ts
index c8697ef..073eac2 100644
--- a/node_modules/foundry-types/client/pixi/placeable-object/token.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeable-object/token.d.ts
@@ -2,9 +2,7 @@ export {};

 declare global {
     /** A Token is an implementation of PlaceableObject that represents an Actor within a viewed Scene on the game canvas. */
-    class Token<
-        TDocument extends TokenDocument<Scene | null> = TokenDocument<Scene | null>
-    > extends PlaceableObject<TDocument> {
+    class Token<TDocument extends TokenDocument = TokenDocument> extends PlaceableObject<TDocument> {
         constructor(document: TDocument);

         /** A reference to an animation that is currently in progress for this Token, if any */
@@ -223,8 +221,6 @@ declare global {
         /** Update display of the Token, pulling latest data and re-rendering the display of Token components */
         refresh(): this;

-        protected override _refresh(options: object): void;
-
         /** Draw the Token border, taking into consideration the grid type and border color */
         protected _refreshBorder(): void;

@@ -451,27 +447,27 @@ declare global {
         /*  Event Listeners and Handlers                */
         /* -------------------------------------------- */

-        protected override _onCreate(
+        override _onCreate(
             data: TDocument["_source"],
-            options: DocumentModificationContext<TDocument["parent"]>,
+            options: DocumentModificationContext<TDocument>,
             userId: string
         ): void;

-        protected override _onUpdate(
+        override _onUpdate(
             changed: DeepPartial<TDocument["_source"]>,
-            options: DocumentModificationContext<TDocument["parent"]>,
+            options: DocumentModificationContext,
             userId: string
         ): void;

         /** Control updates to the appearance of the Token and its linked TokenMesh when a data update occurs. */
         protected _onUpdateAppearance(
-            data: DeepPartial<TDocument["_source"]>,
+            data: DeepPartial<foundry.data.TokenSource>,
             changed: Set<string>,
-            options: DocumentModificationContext<TDocument["parent"]>
+            options: DocumentModificationContext
         ): Promise<void>;

         /** Define additional steps taken when an existing placeable object of this type is deleted */
-        protected override _onDelete(options: DocumentModificationContext<TDocument["parent"]>, userId: string): void;
+        override _onDelete(options: DocumentModificationContext<TDocument>, userId: string): void;

         protected override _canControl(user: User, event?: PIXI.InteractionEvent): boolean;

@@ -509,8 +505,7 @@ declare global {
         protected override _onDragEnd(): void;
     }

-    interface Token<TDocument extends TokenDocument<Scene | null> = TokenDocument<Scene | null>>
-        extends PlaceableObject<TDocument> {
+    interface Token<TDocument extends TokenDocument = TokenDocument> extends PlaceableObject<TDocument> {
         get layer(): TokenLayer<this>;
     }

diff --git a/node_modules/foundry-types/client/pixi/placeable-object/wall.d.ts b/node_modules/foundry-types/client/pixi/placeable-object/wall.d.ts
index 2d459d5..8117970 100644
--- a/node_modules/foundry-types/client/pixi/placeable-object/wall.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeable-object/wall.d.ts
@@ -58,8 +58,6 @@ declare class Wall<TDocument extends WallDocument<Scene | null>> extends Placeab

     refresh(): this;

-    protected override _refresh(options: object): void;
-
     /**
      * Compute an approximate Polygon which encloses the line segment providing a specific hitArea for the line
      * @param coords The original wall coordinates
@@ -106,19 +104,19 @@ declare class Wall<TDocument extends WallDocument<Scene | null>> extends Placeab
     /*  Socket Listeners and Handlers               */
     /* -------------------------------------------- */

-    protected override _onCreate(
-        data: TDocument["_source"],
-        options: DocumentModificationContext<TDocument["parent"]>,
+    override _onCreate(
+        data: foundry.data.WallSource,
+        options: DocumentModificationContext<TDocument>,
         userId: string
     ): void;

-    protected override _onUpdate(
-        changed: DeepPartial<TDocument["_source"]>,
-        options: DocumentModificationContext<TDocument["parent"]>,
+    override _onUpdate(
+        changed: DocumentUpdateData,
+        options: DocumentModificationContext<TDocument>,
         userId: string
     ): void;

-    protected override _onDelete(options: DocumentModificationContext<TDocument["parent"]>, userId: string): void;
+    override _onDelete(options: DocumentModificationContext<TDocument>, userId: string): void;

     /**
      * Callback actions when a wall that contains a door is moved or its state is changed
diff --git a/node_modules/foundry-types/client/pixi/placeables-layer/base.d.ts b/node_modules/foundry-types/client/pixi/placeables-layer/base.d.ts
index ab90b03..482dc2d 100644
--- a/node_modules/foundry-types/client/pixi/placeables-layer/base.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeables-layer/base.d.ts
@@ -114,14 +114,13 @@ declare global {
          * Simultaneously rotate multiple PlaceableObjects using a provided angle or incremental.
          * This executes a single database operation using Scene.update.
          * If rotating only a single object, it is better to use the PlaceableObject.rotate instance method.
-         *
-         * @param  options Options which configure how multiple objects are rotated
-         * @param [options.angle] A target angle of rotation (in degrees) where zero faces "south"
-         * @param [options.delta] An incremental angle of rotation (in degrees)
-         * @param [options.snap]  Snap the resulting angle to a multiple of some increment (in degrees)
-         * @param [options.ids]   An Array of object IDs to target for rotation
-         *
-         * @return An array of objects which were rotated
+
+         * @param angle A target angle of rotation (in degrees) where zero faces "south"
+         * @param delta An incremental angle of rotation (in degrees)
+         * @param snap  Snap the resulting angle to a multiple of some increment (in degrees)
+         * @param ids   An Array or Set of object IDs to target for rotation
+
+         * @return      The resulting Promise from the Scene.update operation
          */
         rotateMany({
             angle,
@@ -132,21 +131,20 @@ declare global {
             angle?: number;
             delta?: number;
             snap?: number;
-            ids?: string[];
-        }): Promise<TObject[]>;
+            ids?: number[] | Set<number>;
+        }): Promise<any>;

         /**
          * Simultaneously move multiple PlaceableObjects via keyboard movement offsets.
          * This executes a single database operation using Scene.update.
          * If moving only a single object, this will delegate to PlaceableObject.update for performance reasons.
          *
-         * @param options Options which configure how multiple objects are moved
-         * @param [options.dx=0]         The number of incremental grid units in the horizontal direction
-         * @param [options.dy=0]         The number of incremental grid units in the vertical direction
-         * @param [options.rotate=false] Rotate the token to the keyboard direction instead of moving
-         * @param [options.ids]          An Array of object IDs to target for movement
+         * @param dx        The number of incremental grid units in the horizontal direction
+         * @param dy        The number of incremental grid units in the vertical direction
+         * @param rotate    Rotate the token to the keyboard direction instead of moving
+         * @param ids       An Array or Set of object IDs to target for rotation
          *
-         * @returns An array of objects which were moved during the operation
+         * @return          The resulting Promise from the Scene.update operation
          */
         moveMany({
             dx,
@@ -157,20 +155,40 @@ declare global {
             dx?: number;
             dy?: number;
             rotate?: boolean;
-            ids?: string[];
-        }): Promise<TObject[]>;
+            ids?: number[] | Set<number>;
+        }): Promise<any>;

         /**
          * Undo a change to the objects in this layer
          * This method is typically activated using CTRL+Z while the layer is active
-         * @returns An array of documents which were modified by the undo operation
          */
-        undoHistory(): Promise<TObject["document"][]>;
+        undoHistory(): Promise<any>;
+
+        /**
+         * Update multiple embedded entities in a parent Entity collection using an Array of provided data
+         *
+         * @param data      An Array of update data Objects which provide incremental data
+         * @param options   Additional options which customize the update workflow
+         *
+         * @return          A Promise which resolves to the returned socket response (if successful)
+         */
+        updateMany(data: any[], options?: any): Promise<any>;
+
+        /**
+         * Simultaneously delete multiple PlaceableObjects.
+         * This executes a single database operation using Scene.update.
+         * If deleting only a single object, this will delegate to PlaceableObject.delete for performance reasons.
+         *
+         * @param ids       An Array of object IDs to target for deletion
+         * @param options   Additional options which customize the update workflow
+         *
+         * @return          A Promise which resolves to the returned socket response (if successful)
+         */
+        deleteMany(ids: number[], options?: any): Promise<any>;

         /**
          * A helper method to prompt for deletion of all PlaceableObject instances within the Scene
          * Renders a confirmation dialogue to confirm with the requester that all objects will be deleted
-         * @returns An array of Document objects which were deleted by the operation
          */
         deleteAll(): Promise<TObject["document"][] | void>;

@@ -232,9 +250,11 @@ declare global {
          * @return An array of updated data once the operation is complete
          */
         updateAll(
-            transformation: (document: TObject) => Record<string, unknown>,
+            transformation: (
+                document: TObject
+            ) => DocumentUpdateData<TObject["document"]> | DocumentUpdateData<TObject["document"]>,
             condition?: Function | null,
-            options?: DocumentModificationContext<TObject["document"]["parent"]>
+            options?: DocumentModificationContext
         ): Promise<TObject["document"][]>;

         /* -------------------------------------------- */
diff --git a/node_modules/foundry-types/client/pixi/placeables-layer/drawings-layer.d.ts b/node_modules/foundry-types/client/pixi/placeables-layer/drawings-layer.d.ts
index 5d8fd2b..4db549e 100644
--- a/node_modules/foundry-types/client/pixi/placeables-layer/drawings-layer.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeables-layer/drawings-layer.d.ts
@@ -1,7 +1,6 @@
 /**
  * The DrawingsLayer subclass of PlaceablesLayer.
- * This layer implements a container for drawings.
- * @category - Canvas
+ * This layer implements a container for drawings which are rendered immediately above the BackgroundLayer. *
  * @todo: fill in
  */
 declare class DrawingsLayer<TDrawing extends Drawing = Drawing> extends PlaceablesLayer<TDrawing> {}
diff --git a/node_modules/foundry-types/client/pixi/placeables-layer/map-layer/background-layer.d.ts b/node_modules/foundry-types/client/pixi/placeables-layer/map-layer/background-layer.d.ts
new file mode 100644
index 0000000..445ef27
--- /dev/null
+++ b/node_modules/foundry-types/client/pixi/placeables-layer/map-layer/background-layer.d.ts
@@ -0,0 +1,20 @@
+/** An extension of the MapLayer that displays underfoot in the background of the Scene. */
+declare class BackgroundLayer extends MapLayer {
+    /** The outline of the scene */
+    outline: PIXI.Graphics;
+
+    /* -------------------------------------------- */
+    /*  Layer Methods                               */
+    /* -------------------------------------------- */
+
+    override draw(): Promise<this>;
+
+    /** Draw a background outline which emphasizes what portion of the canvas is playable space and what is buffer. */
+    protected _drawOutline(): PIXI.Graphics;
+
+    override getDocuments(): TileDocument[];
+
+    override getZIndex(): number;
+
+    override storeHistory(type: string, data: Record<string, unknown>): void;
+}
diff --git a/node_modules/foundry-types/client/pixi/placeables-layer/map-layer/base.d.ts b/node_modules/foundry-types/client/pixi/placeables-layer/map-layer/base.d.ts
new file mode 100644
index 0000000..6e2bc3b
--- /dev/null
+++ b/node_modules/foundry-types/client/pixi/placeables-layer/map-layer/base.d.ts
@@ -0,0 +1,92 @@
+/**
+ * A PlaceablesLayer designed for rendering the visual Scene for a specific vertical cross-section.
+ * Each MapLayer contains a single background image as well as an arbitrary number of Tile objects.
+ */
+declare abstract class MapLayer extends PlaceablesLayer<Tile> {
+    constructor({ bgPath, level }?: { bgPath?: string; level?: number });
+
+    /** The numeric Scene level to which this layer belongs */
+    level: number;
+
+    /** The background source path */
+    bgPath: VideoFilePath;
+
+    /** The layer background image */
+    bg: PIXI.Sprite;
+
+    static documentName: "Tile";
+
+    /* -------------------------------------------- */
+    /*  Layer Attributes                            */
+    /* -------------------------------------------- */
+
+    static override get layerOptions(): MapLayerOptions;
+
+    /** Return the base HTML image or video element which is used to generate the background Sprite.*/
+    get bgSource(): HTMLImageElement | HTMLVideoElement;
+
+    get hud(): TileHUD;
+
+    /** Is the background texture used in this layer a video? */
+    get isVideo(): boolean;
+
+    /** An array of Tile objects which are rendered within the objects container */
+    get tiles(): Tile;
+
+    /* -------------------------------------------- */
+    /*  Layer Methods                               */
+    /* -------------------------------------------- */
+
+    override deactivate(): this;
+
+    override tearDown(): Promise<void>;
+
+    /* -------------------------------------------- */
+    /*  Layer Rendering                             */
+    /* -------------------------------------------- */
+
+    override draw(): Promise<this>;
+
+    /**
+     * Draw the background Sprite for the layer, aligning its dimensions with those configured for the canvas.
+     * @returns The rendered Sprite, or undefined if no background is present
+     */
+    protected _drawBackground(): PIXI.Sprite | undefined;
+
+    /* -------------------------------------------- */
+    /*  Event Handlers                              */
+    /* -------------------------------------------- */
+
+    protected override _onDragLeftStart(event: PIXI.InteractionEvent): Promise<void>;
+
+    protected override _onDragLeftMove(event: PIXI.InteractionEvent): Promise<void>;
+
+    protected override _onDragLeftDrop(event: PIXI.InteractionEvent): Promise<void>;
+
+    protected override _onDragLeftCancel(event: PIXI.InteractionEvent): void;
+
+    /**
+     * Handle drop events for Tile data on the Tiles Layer
+     * @param event The concluding drag event
+     * @param data  The extracted Tile data
+     */
+    protected _onDropData(event: PIXI.InteractionEvent, data: Record<string, Tile>): Promise<TileDocument>;
+
+    /**
+     * Prepare the data object when a new Tile is dropped onto the canvas
+     * @param event The concluding drag event
+     * @param data  The extracted Tile data
+     * @returns The prepared data to create
+     */
+    protected _getDropData(
+        event: PIXI.InteractionEvent,
+        data: foundry.data.TileSource
+    ): Promise<foundry.data.TileSource>;
+}
+
+declare interface MapLayerOptions extends PlaceablesLayerOptions {
+    name: string;
+    zIndex: number;
+    controllableObjects: true;
+    rotatableObjects: true;
+}
diff --git a/node_modules/foundry-types/client/pixi/placeables-layer/map-layer/foreground-layer.d.ts b/node_modules/foundry-types/client/pixi/placeables-layer/map-layer/foreground-layer.d.ts
new file mode 100644
index 0000000..3c3003f
--- /dev/null
+++ b/node_modules/foundry-types/client/pixi/placeables-layer/map-layer/foreground-layer.d.ts
@@ -0,0 +1,54 @@
+/** An extension of the MapLayer that displays overhead in the foreground of the Scene. */
+declare class ForegroundLayer extends MapLayer {
+    occlusionMask: PIXI.Container;
+
+    static get layerOptions(): MapLayerOptions & {
+        name: "foreground";
+    };
+
+    /** Get an array of overhead Tile objects which are roofs */
+    get roofs(): PIXI.DisplayObject[];
+
+    /** Determine whether to display roofs */
+    get displayRoofs(): boolean;
+
+    /* -------------------------------------------- */
+    /*  Layer Methods                               */
+    /* -------------------------------------------- */
+
+    override draw(): Promise<this>;
+
+    /**
+     * Draw the container used to cache the position of Token occlusion shapes to a RenderTexture
+     * @returns {CachedContainer}
+     * @todo define `CachedContainer`
+     */
+    protected _drawOcclusionMask(): PIXI.Container;
+
+    override deactivate(): this;
+
+    override tearDown(): Promise<void>;
+
+    override getZIndex(): number;
+
+    override getDocuments(): TileDocument[];
+
+    /**
+     * Refresh the display of tiles on the Foreground Layer depending on Token occlusion.
+     */
+    refresh(): void;
+
+    /** Update occlusion for all tiles on the foreground layer */
+    updateOcclusion(): void;
+
+    /**
+     * Draw the container which caches token-based occlusion shapes
+     * @param tokens The set of currently observed tokens
+     */
+    protected _drawOcclusionShapes(tokens: Token[]): void;
+
+    protected override _getDropData(
+        event: PIXI.InteractionEvent,
+        data: foundry.data.TileSource
+    ): Promise<foundry.data.TileSource>;
+}
diff --git a/node_modules/foundry-types/client/pixi/placeables-layer/tiles-layer.d.ts b/node_modules/foundry-types/client/pixi/placeables-layer/tiles-layer.d.ts
index 4caf0b9..8547e2a 100644
--- a/node_modules/foundry-types/client/pixi/placeables-layer/tiles-layer.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeables-layer/tiles-layer.d.ts
@@ -1,9 +1 @@
-/**
- * A PlaceablesLayer designed for rendering the visual Scene for a specific vertical cross-section.
- * @category - Canvas
- * @todo fill in
- */
-
-declare class TilesLayer<TTile extends Tile> extends PlaceablesLayer<TTile> {
-    static override documentName: "Tile";
-}
+declare class TilesLayer<TTile extends Tile = Tile> extends PlaceablesLayer<TTile> {}
diff --git a/node_modules/foundry-types/client/pixi/placeables-layer/walls-layer.d.ts b/node_modules/foundry-types/client/pixi/placeables-layer/walls-layer.d.ts
index af2f49f..1a5c384 100644
--- a/node_modules/foundry-types/client/pixi/placeables-layer/walls-layer.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeables-layer/walls-layer.d.ts
@@ -25,7 +25,7 @@ declare global {
         protected _forceSnap: boolean;

         /** Track the most recently created or updated wall data for use with the clone tool */
-        protected _cloneType: foundry.documents.WallSource;
+        protected _cloneType: foundry.data.WallSource;

         /** Reference the last interacted wall endpoint for the purposes of chaining */
         last: { id: string | null; point: PointArray };
@@ -133,7 +133,7 @@ declare global {
          * This method helps to translate each tool into a default wall data configuration for that type
          * @param tool The active canvas tool
          */
-        protected _getWallDataFromActiveTool(tool: string): Partial<foundry.documents.WallSource>;
+        protected _getWallDataFromActiveTool(tool: string): Partial<foundry.data.WallSource>;

         /* -------------------------------------------- */
         /*  Event Listeners and Handlers                */
diff --git a/node_modules/foundry-types/client/roll.d.ts b/node_modules/foundry-types/client/roll.d.ts
index a0d02b0..a633492 100644
--- a/node_modules/foundry-types/client/roll.d.ts
+++ b/node_modules/foundry-types/client/roll.d.ts
@@ -355,17 +355,17 @@ declare global {
          *         or the Object of prepared chatData otherwise.
          */
         toMessage(
-            messageData: PreCreate<foundry.documents.ChatMessageSource> | undefined,
+            messageData: PreCreate<foundry.data.ChatMessageSource> | undefined,
             { rollMode, create }: { rollMode?: RollMode | "roll"; create: false }
-        ): Promise<foundry.documents.ChatMessageSource>;
+        ): Promise<foundry.data.ChatMessageSource>;
         toMessage(
-            messageData?: PreCreate<foundry.documents.ChatMessageSource>,
+            messageData?: PreCreate<foundry.data.ChatMessageSource>,
             { rollMode, create }?: { rollMode?: RollMode | "roll"; create?: true }
         ): Promise<ChatMessage>;
         toMessage(
-            messageData?: PreCreate<foundry.documents.ChatMessageSource>,
+            messageData?: PreCreate<foundry.data.ChatMessageSource>,
             { rollMode, create }?: { rollMode?: RollMode | "roll"; create?: boolean }
-        ): Promise<ChatMessage | foundry.documents.ChatMessageSource>;
+        ): Promise<ChatMessage | foundry.data.ChatMessageSource>;

         /* -------------------------------------------- */
         /*  Interface Helpers                           */
diff --git a/node_modules/foundry-types/client/ui/filepicker.d.ts b/node_modules/foundry-types/client/ui/filepicker.d.ts
index c5dca0f..81362ce 100644
--- a/node_modules/foundry-types/client/ui/filepicker.d.ts
+++ b/node_modules/foundry-types/client/ui/filepicker.d.ts
@@ -24,7 +24,7 @@ declare class FilePicker extends Application {
     /** The current set of file extensions which are being filtered upon */
     extension: string[];

-    constructor(options: ApplicationOptions);
+    constructor(options: FilePickerOptions);

     /**
      * Given a current file path, determine the directory it belongs to
@@ -157,3 +157,46 @@ declare class FilePicker extends Application {
      */
     static fromButton(button: HTMLElement, options: object): FilePicker;
 }
+
+declare interface FilePickerOptions extends Partial<ApplicationOptions> {
+  /**
+   * A type of file to target, in "audio", "image", "video", "imagevideo", "folder", "font", "graphics", "text", or "any"
+   * @default "any"
+   */
+  type?: "audio" | "image" | "video" | "imagevideo" | "folder" | "font" | "graphics" | "text" | "any"
+  /**
+   *  The current file path being modified, if any
+   */
+  current?: FilePath
+  /**
+   * A current file source in "data", "public", or "s3"
+   * @default "data"
+   */
+  activeSource?: "data" | "public" | "s3"
+  /**
+   * A callback function to trigger once a file has been selected
+   */
+  callback?: (path: FilePath, filePicker: FilePicker) => any
+  /**
+   * A flag which permits explicitly disallowing upload, true by default
+   * @default true
+   */
+  allowUpload?: boolean
+  /**
+   * An HTML form field that the result of this selection is applied to
+   */
+  field?: HTMLElement
+  /**
+   * An HTML button element which triggers the display of this picker
+   */
+  button?: HTMLButtonElement
+  /**
+   * The picker display mode in FilePicker.DISPLAY_MODES
+   */
+  displayMode?: "list" | "thumbs" | "tiles" | "images"
+  /**
+   * Display the tile size configuration.
+   * @default false
+   */
+  tileSize?: boolean
+}
diff --git a/node_modules/foundry-types/client/ui/index.d.ts b/node_modules/foundry-types/client/ui/index.d.ts
index 7801eae..a1ef89d 100644
--- a/node_modules/foundry-types/client/ui/index.d.ts
+++ b/node_modules/foundry-types/client/ui/index.d.ts
@@ -9,9 +9,9 @@ import "./tour";

 declare global {
     interface FoundryUI<
-        TActor extends Actor<null>,
+        TActor extends Actor,
         TActorDirectory extends ActorDirectory<TActor>,
-        TItem extends Item<null>,
+        TItem extends Item,
         TChatLog extends ChatLog,
         TCompendiumDirectory extends CompendiumDirectory
     > {
@@ -25,5 +25,6 @@ declare global {
         settings: Settings;
         tables: RollTableDirectory;
         windows: Record<number, Application>;
+        sidebar: Sidebar;
     }
 }
diff --git a/node_modules/foundry-types/client/ui/tour.d.ts b/node_modules/foundry-types/client/ui/tour.d.ts
index 7010077..924abee 100644
--- a/node_modules/foundry-types/client/ui/tour.d.ts
+++ b/node_modules/foundry-types/client/ui/tour.d.ts
@@ -6,7 +6,7 @@ declare global {
      * @param config           The configuration of the Tour
      */
     class Tour {
-        constructor(config: TourConfig, override: { id?: string; namspace?: string });
+        constructor(config: TourConfig, override?: { id?: string; namespace?: string });

         static STATUS: {
             UNSTARTED: "unstarted";
diff --git a/node_modules/foundry-types/common/abstract/data.d.ts b/node_modules/foundry-types/common/abstract/data.d.ts
index d51faaf..337bdc2 100644
--- a/node_modules/foundry-types/common/abstract/data.d.ts
+++ b/node_modules/foundry-types/common/abstract/data.d.ts
@@ -5,6 +5,176 @@ declare global {
         module abstract {
             export import DataModel = AbstractDataModel.DataModel;
             export import _DataModel = AbstractDataModel._DataModel;
+
+            /**
+             * A schema entry which describes a field of DocumentData
+             * @property type           An object which defines the data type of this field
+             * @property required       Is this field required to have an assigned value? Default is false.
+             * @property [nullable]     Can the field be populated by a null value? Default is true.
+             * @property [default]      A static default value or a function which assigns a default value
+             * @property [clean]        An optional cleaning function which sanitizes input data to this field
+             * @property [validate]    A function which asserts that the value of this field is valid
+             * @property [validationError] An error message which is displayed if validation fails
+             * @property [isCollection] Is the field an embedded Document collection?
+             */
+            interface DocumentField {
+                type: object;
+                required: boolean;
+                nullable?: boolean;
+                default?: unknown;
+                clean?: Function;
+                validate?: (data: any) => boolean;
+                validationError?: string;
+                isCollection?: boolean;
+            }
+
+            /** The schema of a Document */
+            type DocumentSchema = Record<string, DocumentField>;
+
+            type DocumentSource = object;
+
+            /**
+             * An abstract pattern for a data object which is contained within every type of Document.
+             * @param [data={}]  Initial data used to construct the data object
+             * @param [document] The document to which this data object belongs
+             */
+            abstract class DocumentData<TDocument extends abstract.Document | null = abstract.Document | null> {
+                constructor(data?: DocumentSource, document?: TDocument | null);
+
+                /** An immutable reverse-reference to the Document to which this data belongs, possibly null. */
+                readonly document: TDocument | null;
+
+                /** The source data object. The contents of this object can be updated, but the object itself may not be replaced. */
+                readonly _source: DocumentSource;
+
+                /**
+                 * The primary identifier for the Document to which this data object applies.
+                 * This identifier is unique within the parent collection which contains the Document.
+                 */
+                _id: string /* | null */;
+
+                /**
+                 * Define the data schema for documents of this type.
+                 * The schema is populated the first time it is accessed and cached for future reuse.
+                 */
+                static defineSchema(): DocumentSchema;
+
+                /** Define the data schema for documents of this type. */
+                static get schema(): DocumentSchema;
+
+                static _schema?: DocumentSchema;
+
+                /**
+                 * Define the data schema for this document instance.
+                 * @alias {DocumentData.schema}
+                 */
+                get schema(): DocumentSchema;
+
+                /* ---------------------------------------- */
+                /*  Data Initialization and Validation      */
+                /* ---------------------------------------- */
+
+                /** Initialize the source data object in-place */
+                protected _initializeSource(data: object): this["_source"];
+
+                /**
+                 * Get the default value for a schema field, conditional on the provided data
+                 * @param field The configured data field
+                 * @param data The provided data object
+                 * @returns The default value for the field
+                 */
+                protected static _getFieldDefaultValue(field: DocumentField, data: unknown): unknown;
+
+                /** Initialize the instance by copying data from the source object to instance attributes. */
+                protected _initialize(): void;
+
+                /**
+                 * Initialize the value for a given data type
+                 * @param type The type of the data field
+                 * @param value The un-initialized value
+                 * @returns The initialized value
+                 */
+                protected _initializeType(type: string, value: unknown): unknown;
+
+                /**
+                 * Validate the data contained in the document to check for type and content
+                 * This function throws an error if data within the document is not valid
+                 *
+                 * @param options            Optional parameters which customize how validation occurs.
+                 * @param [options.changes]  Only validate the keys of an object that was changed.
+                 * @param [options.children] Validate the data of child embedded documents? Default is true.
+                 * @param [options.clean]    Apply field-specific cleaning functions to the provided value.
+                 * @param [options.replace]  Replace any invalid values with valid defaults? Default is false.
+                 * @param [options.strict]   If strict, will throw errors for any invalid data. Default is false.
+                 * @return An indicator for whether or not the document contains valid data
+                 */
+                validate({
+                    changes,
+                    children,
+                    clean,
+                    replace,
+                    strict,
+                }?: {
+                    changes?: boolean;
+                    children?: boolean;
+                    clean?: boolean;
+                    replace?: boolean;
+                    strict?: boolean;
+                }): boolean;
+
+                /**
+                 * Jointly validate the overall document after each field has been individually validated.
+                 * Throw an Error if any issue is encountered.
+                 */
+                protected _validateDocument(): void;
+
+                /** Reset the state of this data instance back to mirror the contained source data, erasing any changes. */
+                reset(): boolean;
+
+                /**
+                 * Update the data by applying a new data object. Data is compared against and merged with the existing data.
+                 * Updating data which already exists is strict - it must pass validation or else the update is rejected.
+                 * An object is returned which documents the set of changes which were applied to the original data.
+                 * @see utils.mergeObject
+                 * @param data New values with which to update the Data object
+                 * @param options Options which determine how the new data is merged
+                 * @returns The changed keys and values which are different than the previous data
+                 */
+                update(data?: DocumentUpdateData, options?: DocumentModificationContext): DeepPartial<this["_source"]>;
+
+                /**
+                 * Copy and transform the DocumentData into a plain object.
+                 * Draw the values of the extracted object from the data source (by default) otherwise from its transformed values.
+                 * @param [source=true] Draw values from the underlying data source rather than transformed values
+                 * @returns The extracted primitive object
+                 */
+                toObject<D extends DocumentData>(this: D, source?: true): D["_source"];
+                toObject<D extends DocumentData>(this: D, source: false): RawObject<D>;
+                toObject<D extends DocumentData>(source?: boolean): D["_source"] | RawObject<D>;
+
+                /**
+                 * Extract the source data for the DocumentData into a simple object format that can be serialized.
+                 * @returns The document source data expressed as a plain object
+                 */
+                toJSON(): this["_source"];
+
+                /**
+                 * Create a DocumentData instance using a provided serialized JSON string.
+                 * @param json Serialized document data in string format
+                 * @returns A constructed data instance
+                 */
+                static fromJSON<T extends DocumentData>(this: ConstructorOf<T>, json: string): T;
+            }
         }
     }
+
+    type RawObject<T extends foundry.abstract.DocumentData> = {
+        [P in keyof T["_source"]]: T[P] extends foundry.abstract.EmbeddedCollection<infer U>
+            ? RawObject<U["data"]>[]
+            : T[P] extends foundry.abstract.DocumentData
+            ? RawObject<T[P]>
+            : T[P] extends foundry.abstract.DocumentData[]
+            ? RawObject<T[P][number]>[]
+            : T[P];
+    };
 }
diff --git a/node_modules/foundry-types/common/abstract/document.d.ts b/node_modules/foundry-types/common/abstract/document.d.ts
index 0f75784..1a8e444 100644
--- a/node_modules/foundry-types/common/abstract/document.d.ts
+++ b/node_modules/foundry-types/common/abstract/document.d.ts
@@ -4,18 +4,19 @@ declare global {
     module foundry {
         module abstract {
             /** The abstract base interface for all Document types. */
-            abstract class Document<TParent extends Document | null = _Document | null> {
-                constructor(data: object, context?: DocumentConstructionContext<Document | null>);
-
-                _id: string | null;
+            abstract class Document {
+                constructor(data: PreCreate<DocumentSource>, context?: DocumentConstructionContext<Document | null>);

                 /** An immutable reverse-reference to the parent Document to which this embedded Document belongs. */
-                readonly parent: TParent;
+                readonly parent: Document | null;

                 /** An immutable reference to a containing Compendium collection to which this Document belongs. */
                 readonly pack: string | null;

-                _source: object;
+                /** The base data object for this Document which persists both the original source and any derived data. */
+                readonly data: DocumentData<Document>;
+
+                _source: this["data"]["_source"];

                 /** Perform one-time initialization tasks which only occur when the Document is first constructed. */
                 protected _initialize(): void;
@@ -30,7 +31,7 @@ declare global {
                  */
                 protected _initializeSource(
                     data: Record<string, unknown>,
-                    options?: DocumentConstructionContext<TParent>
+                    options?: DocumentConstructionContext<this>
                 ): this["_source"];

                 /**
@@ -42,6 +43,12 @@ declare global {
                 /*  Configuration                               */
                 /* -------------------------------------------- */

+                /**
+                 * Every document must define an object which represents its data schema.
+                 * This must be a subclass of the DocumentData interface.
+                 */
+                static get schema(): ConstructorOf<DocumentData>;
+
                 /** Default metadata which applies to each instance of this Document type. */
                 static get metadata(): DocumentMetadata;

@@ -92,7 +99,7 @@ declare global {
                  * @param source           The candidate source data from which the model will be constructed
                  * @returns                Migrated source data, if necessary
                  */
-                static migrateData<TSource extends object>(source: TSource): TSource;
+                static migrateData<TSource extends DocumentSource>(source: TSource): TSource;

                 /**
                  * Update the DataModel locally by applying an object of changes to its source data.
@@ -106,7 +113,7 @@ declare global {
                  */
                 updateSource(
                     data?: DocumentUpdateData,
-                    options?: DocumentSourceUpdateContext
+                    options?: DocumentModificationContext
                 ): DeepPartial<this["_source"]>;

                 /**
@@ -122,8 +129,11 @@ declare global {
                     data: DocumentUpdateData<this> | undefined,
                     options: DocumentCloneOptions & { save: true }
                 ): Promise<this>;
-                clone(data?: DocumentUpdateData<this>, options?: DocumentCloneOptions & { save?: false }): this;
-                clone(data?: DocumentUpdateData<this>, options?: DocumentCloneOptions): this | Promise<this>;
+                clone<T extends this>(
+                    data?: DocumentUpdateData<this>,
+                    options?: DocumentCloneOptions & { save?: false }
+                ): T;
+                clone<T extends this>(data?: DocumentUpdateData<this>, options?: DocumentCloneOptions): T | Promise<T>;

                 /**
                  * Get the permission level that a specific User has over this Document, a value in CONST.ENTITY_PERMISSIONS.
@@ -184,12 +194,11 @@ declare global {
                  * const data = [{name: "Compendium Actor", type: "character", img: "path/to/profile.jpg"}];
                  * const created = await Actor.createDocuments(data, {pack: "mymodule.mypack"});
                  */
-                // eslint-disable-next-line @typescript-eslint/no-explicit-any
-                static createDocuments<TDocument extends Document<any>>(
-                    this: ConstructorOf<TDocument>,
-                    data?: (TDocument | PreCreate<TDocument["_source"]>)[],
-                    context?: DocumentModificationContext<TDocument["parent"]>
-                ): Promise<TDocument[]>;
+                static createDocuments<T extends Document>(
+                    this: ConstructorOf<T>,
+                    data?: (T | PreCreate<T["_source"]>)[],
+                    context?: DocumentModificationContext<T>
+                ): Promise<T[]>;

                 /**
                  * Update multiple Document instances using provided differential data.
@@ -219,7 +228,7 @@ declare global {
                 static updateDocuments<TDocument extends Document>(
                     this: ConstructorOf<TDocument>,
                     updates?: DocumentUpdateData<TDocument>[],
-                    context?: DocumentModificationContext<TDocument["parent"]>
+                    context?: DocumentModificationContext
                 ): Promise<TDocument[]>;

                 /**
@@ -250,11 +259,11 @@ declare global {
                  * const deleted = await Actor.deleteDocuments([actor.id], {pack: "mymodule.mypack"});
                  */
                 // eslint-disable-next-line @typescript-eslint/no-explicit-any
-                static deleteDocuments<TDocument extends Document<any>>(
-                    this: ConstructorOf<TDocument>,
+                static deleteDocuments<T extends ConstructorOf<any>>(
+                    this: T,
                     ids?: string[],
-                    context?: DocumentModificationContext<TDocument["parent"]>
-                ): Promise<TDocument[]>;
+                    context?: DocumentModificationContext
+                ): Promise<InstanceType<T>[]>;

                 /**
                  * Create a new Document using provided input data, saving it to the database.
@@ -276,21 +285,21 @@ declare global {
                  * const data = [{name: "Special Sword", type: "weapon"}];
                  * const created = await Item.create(data, {pack: "mymodule.mypack"});
                  */
-                static create<TDocument extends Document>(
-                    this: ConstructorOf<TDocument>,
-                    data: PreCreate<TDocument["_source"]>,
-                    context?: DocumentModificationContext<TDocument["parent"]>
-                ): Promise<TDocument | undefined>;
-                static create<TDocument extends Document>(
-                    this: ConstructorOf<TDocument>,
-                    data: PreCreate<TDocument["_source"]>[],
-                    context?: DocumentModificationContext<TDocument["parent"]>
-                ): Promise<TDocument[]>;
-                static create<TDocument extends Document>(
-                    this: ConstructorOf<TDocument>,
-                    data: PreCreate<TDocument["_source"]> | PreCreate<TDocument["_source"]>[],
-                    context?: DocumentModificationContext<TDocument["parent"]>
-                ): Promise<TDocument[] | TDocument | undefined>;
+                static create<T extends Document>(
+                    this: ConstructorOf<T>,
+                    data: PreCreate<T["_source"]>,
+                    context?: DocumentModificationContext
+                ): Promise<T | undefined>;
+                static create<T extends Document>(
+                    this: ConstructorOf<T>,
+                    data: PreCreate<T["_source"]>[],
+                    context?: DocumentModificationContext
+                ): Promise<T[]>;
+                static create<T extends Document>(
+                    this: ConstructorOf<T>,
+                    data: PreCreate<T["_source"]> | PreCreate<T["_source"]>[],
+                    context?: DocumentModificationContext
+                ): Promise<T[] | T | undefined>;

                 /**
                  * Update one or multiple existing entities using provided input data.
@@ -312,7 +321,7 @@ declare global {
                  * const data = [{_id: "12ekjf43kj2312ds", name: "New Name 1"}, {_id: "kj549dk48k34jk34", name: "New Name 2"}]};
                  * const updated = await Document.update(data); // Returns an Array of Entities, updated in the database
                  */
-                update(data: DocumentUpdateData<this>, options?: DocumentModificationContext<TParent>): Promise<this>;
+                update(data: DocumentUpdateData<this>, options?: DocumentModificationContext<this>): Promise<this>;

                 /**
                  * Delete the current Document.
@@ -321,7 +330,7 @@ declare global {
                  * @param context Options which customize the deletion workflow
                  * @return The deleted Document
                  */
-                delete(context?: DocumentModificationContext<TParent>): Promise<this>;
+                delete(context?: DocumentModificationContext<this>): Promise<this>;

                 /* -------------------------------------------- */
                 /*  Embedded Operations                         */
@@ -332,7 +341,7 @@ declare global {
                  * @param embeddedName The name of the embedded Document type
                  * @return The Collection instance of embedded Documents of the requested type
                  */
-                getEmbeddedCollection(embeddedName: string): abstract.EmbeddedCollection<Document<Document>>;
+                getEmbeddedCollection(embeddedName: string): abstract.EmbeddedCollection<Document>;

                 /**
                  * Get an embedded document by it's id from a named collection in the parent document.
@@ -364,8 +373,8 @@ declare global {
                  */
                 createEmbeddedDocuments(
                     embeddedName: string,
-                    data: PreCreate<object>[],
-                    context?: DocumentModificationContext<this>
+                    data: PreCreate<DocumentSource>[],
+                    context?: DocumentModificationContext
                 ): Promise<Document[]>;

                 /**
@@ -382,7 +391,7 @@ declare global {
                 updateEmbeddedDocuments(
                     embeddedName: string,
                     updateData: EmbeddedDocumentUpdateData<Document>[],
-                    context?: DocumentUpdateContext<this>
+                    context?: DocumentModificationContext
                 ): Promise<Document[]>;

                 /**
@@ -396,7 +405,7 @@ declare global {
                 deleteEmbeddedDocuments(
                     embeddedName: string,
                     dataId: string[],
-                    context?: DocumentModificationContext<this>
+                    context?: DocumentModificationContext
                 ): Promise<Document[]>;

                 /* -------------------------------------------- */
@@ -454,7 +463,7 @@ declare global {
                  */
                 protected _preCreate(
                     data: PreDocumentId<this["_source"]>,
-                    options: DocumentModificationContext<TParent>,
+                    options: DocumentModificationContext<this>,
                     user: documents.BaseUser
                 ): Promise<void>;

@@ -467,7 +476,7 @@ declare global {
                  */
                 protected _preUpdate(
                     changed: DeepPartial<this["_source"]>,
-                    options: DocumentUpdateContext<TParent>,
+                    options: DocumentUpdateContext<this>,
                     user: documents.BaseUser
                 ): Promise<void>;

@@ -478,7 +487,7 @@ declare global {
                  * @param user    The User requesting the document deletion
                  */
                 protected _preDelete(
-                    options: DocumentModificationContext<TParent>,
+                    options: DocumentModificationContext<this>,
                     user: documents.BaseUser
                 ): Promise<void>;

@@ -490,7 +499,7 @@ declare global {
                  */
                 protected _onCreate(
                     data: this["_source"],
-                    options: DocumentModificationContext<TParent>,
+                    options: DocumentModificationContext<this>,
                     userId: string
                 ): void;

@@ -503,7 +512,7 @@ declare global {
                  */
                 protected _onUpdate(
                     changed: DeepPartial<this["_source"]>,
-                    options: DocumentUpdateContext<TParent>,
+                    options: DocumentUpdateContext<this>,
                     userId: string
                 ): void;

@@ -513,7 +522,7 @@ declare global {
                  * @param options Additional options which modify the deletion request
                  * @param userId The ID of the User requesting the document deletion
                  */
-                protected _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
+                protected _onDelete(options: DocumentModificationContext<this>, userId: string): void;

                 /**
                  * Perform follow-up operations when a set of Documents of this type are created.
@@ -522,10 +531,7 @@ declare global {
                  * @param documents The Document instances which were created
                  * @param context   The context for the modification operation
                  */
-                protected static _onCreateDocuments(
-                    documents: Document[],
-                    context: DocumentModificationContext<Document | null>
-                ): void;
+                protected static _onCreateDocuments(documents: Document[], context: DocumentModificationContext): void;

                 /**
                  * Perform follow-up operations when a set of Documents of this type are updated.
@@ -534,10 +540,7 @@ declare global {
                  * @param documents The Document instances which were updated
                  * @param context   The context for the modification operation
                  */
-                protected static _onUpdateDocuments(
-                    documents: Document[],
-                    context: DocumentModificationContext<Document | null>
-                ): void;
+                protected static _onUpdateDocuments(documents: Document[], context: DocumentModificationContext): void;

                 /**
                  * Perform follow-up operations when a set of Documents of this type are deleted.
@@ -546,10 +549,7 @@ declare global {
                  * @param documents The Document instances which were deleted
                  * @param context   The context for the modification operation
                  */
-                protected static _onDeleteDocuments(
-                    documents: Document[],
-                    context: DocumentModificationContext<Document | null>
-                ): void;
+                protected static _onDeleteDocuments(documents: Document[], context: DocumentModificationContext): void;

                 /* ---------------------------------------- */
                 /*  Serialization and Storage               */
@@ -563,13 +563,13 @@ declare global {
                  * @returns The extracted primitive object
                  */
                 toObject(source?: true): this["_source"];
-                toObject(source: false): RawObject<this>;
-                toObject(source?: boolean): this["_source"] | RawObject<this>;
+                toObject(source: false): RawObject<this["data"]>;
+                toObject(source?: boolean): this["_source"] | RawObject<this["data"]>;

                 /**
                  * Serializing an Document should simply serialize its inner data, not the entire instance
                  */
-                toJSON(): RawObject<this>;
+                toJSON(): RawObject<this["data"]>;
             }

             type MetadataPermission =
@@ -602,16 +602,14 @@ declare global {
         [key: string]: unknown;
     }

-    type DocumentSourceUpdateContext = Omit<DocumentModificationContext<null>, "parent">;
-
     interface DocumentCloneOptions extends Omit<DocumentConstructionContext<null>, "parent"> {
         save?: boolean;
         keepId?: boolean;
     }

-    interface DocumentModificationContext<TParent extends foundry.abstract.Document | null> {
+    interface DocumentModificationContext<T extends foundry.abstract.Document = foundry.abstract.Document> {
         /** A parent Document within which these Documents should be embedded */
-        parent?: TParent;
+        parent?: T["parent"];
         /** Block the dispatch of preCreate hooks for this operation */
         noHook?: boolean;
         /** A Compendium pack identifier within which the Documents should be modified */
@@ -636,16 +634,20 @@ declare global {
         deleteAll?: boolean;
     }

-    type DocumentUpdateContext<TParent extends foundry.abstract.Document | null> = Omit<
-        DocumentModificationContext<TParent>,
+    type DocumentUpdateContext<T extends foundry.abstract.Document> = Omit<
+        DocumentModificationContext<T>,
         "deleteAll" | "index" | "keepId" | "keepEmbeddedIds" | "temporary"
     >;

-    type PreCreate<T extends object> = T extends { name: string; type: string }
+    type Embedded<T extends foundry.abstract.Document> = T & {
+        readonly parent: NonNullable<T["parent"]>;
+    };
+
+    type PreCreate<T extends foundry.abstract.DocumentSource> = T extends { name: string; type: string }
         ? Omit<DeepPartial<T>, "name" | "type"> & { name: string; type: T["type"] }
         : DeepPartial<T>;

-    type PreDocumentId<T extends object> = Omit<T, "_id"> & { _id: null };
+    type PreDocumentId<T extends foundry.abstract.DocumentSource> = Omit<T, "_id"> & { _id: null };

     type DocumentUpdateData<T extends foundry.abstract.Document = foundry.abstract.Document> =
         | Partial<T["_source"]>
@@ -660,16 +662,4 @@ declare global {
     }

     type DocumentFlags = Record<string, Record<string, unknown> | undefined>;
-
-    type RawObject<T extends foundry.abstract.Document> = {
-        [P in keyof T["_source"]]: T[P] extends foundry.abstract.EmbeddedCollection<infer U>
-            ? RawObject<U>[]
-            : T[P] extends foundry.abstract.Document
-            ? RawObject<T[P]>
-            : T[P] extends foundry.abstract.Document[]
-            ? RawObject<T[P][number]>[]
-            : T[P];
-    };
 }
-
-type _Document = foundry.abstract.Document<_Document | null>;
diff --git a/node_modules/foundry-types/common/abstract/embedded-collection.d.ts b/node_modules/foundry-types/common/abstract/embedded-collection.d.ts
index 64f060d..2a8f5d5 100644
--- a/node_modules/foundry-types/common/abstract/embedded-collection.d.ts
+++ b/node_modules/foundry-types/common/abstract/embedded-collection.d.ts
@@ -7,7 +7,7 @@ declare global {
              * Used for the specific task of containing embedded Document instances within a parent Document.
              * @param sourceArray The source data array for the collection in the parent Document data
              */
-            class EmbeddedCollection<TDocument extends Document<Document>> extends utils.Collection<TDocument> {
+            class EmbeddedCollection<TDocument extends Document> extends utils.Collection<Embedded<TDocument>> {
                 constructor(
                     sourceArray: TDocument["_source"][],
                     documentClass: {
@@ -23,8 +23,8 @@ declare global {
                 override delete(key: string, { modifySource }?: { modifySource?: boolean }): boolean;

                 toObject<T extends true>(source?: T): TDocument["_source"][];
-                toObject<T extends false>(source: T): RawObject<TDocument>[];
-                toObject<T extends boolean>(source?: T): TDocument["_source"][] | RawObject<TDocument>[];
+                toObject<T extends false>(source: T): RawObject<TDocument["data"]>[];
+                toObject<T extends boolean>(source?: T): TDocument["_source"][] | RawObject<TDocument["data"]>[];
             }
         }
     }
diff --git a/node_modules/foundry-types/common/abstract/index.d.ts b/node_modules/foundry-types/common/abstract/index.d.ts
index b45f8ba..fffbba7 100644
--- a/node_modules/foundry-types/common/abstract/index.d.ts
+++ b/node_modules/foundry-types/common/abstract/index.d.ts
@@ -1,2 +1,3 @@
+import "./data";
 import "./document";
 import "./embedded-collection";
diff --git a/node_modules/foundry-types/common/constants.d.mts b/node_modules/foundry-types/common/constants.d.mts
index 8d53633..80c3d6f 100644
--- a/node_modules/foundry-types/common/constants.d.mts
+++ b/node_modules/foundry-types/common/constants.d.mts
@@ -615,7 +615,7 @@ export const UPLOADABLE_FILE_EXTENSIONS: typeof IMAGE_FILE_EXTENSIONS &
  * A list of MIME types which are treated as uploaded "media", which are allowed to overwrite existing files.
  * Any non-media MIME type is not allowed to replace an existing file.
  */
-export const MEDIA_MIME_TYPES: (typeof UPLOADABLE_FILE_EXTENSIONS)[keyof typeof UPLOADABLE_FILE_EXTENSIONS];
+export const MEDIA_MIME_TYPES: typeof UPLOADABLE_FILE_EXTENSIONS[keyof typeof UPLOADABLE_FILE_EXTENSIONS];

 /** An enumeration of file type categories which can be selected */
 export const FILE_CATEGORIES: {
@@ -657,42 +657,41 @@ declare global {
         defaultRole: UserRole;
     }

-    type ActiveEffectChangeMode = (typeof CONST.ACTIVE_EFFECT_MODES)[keyof typeof CONST.ACTIVE_EFFECT_MODES];
     type AudioFileExtension = keyof typeof AUDIO_FILE_EXTENSIONS;
-    type CanvasPerformanceMode = (typeof CANVAS_PERFORMANCE_MODES)[keyof typeof CANVAS_PERFORMANCE_MODES];
-    type ChatMessageType = (typeof CONST.CHAT_MESSAGE_TYPES)[keyof typeof CONST.CHAT_MESSAGE_TYPES];
-    type CompatibilityMode = (typeof CONST.COMPATIBILITY_MODES)[keyof typeof CONST.COMPATIBILITY_MODES];
-    type DocumentOwnershipLevel = (typeof DOCUMENT_OWNERSHIP_LEVELS)[DocumentOwnershipString];
+    type CanvasPerformanceMode = typeof CANVAS_PERFORMANCE_MODES[keyof typeof CANVAS_PERFORMANCE_MODES];
+    type ChatMessageType = typeof CONST.CHAT_MESSAGE_TYPES[keyof typeof CONST.CHAT_MESSAGE_TYPES];
+    type CompatibilityMode = typeof CONST.COMPATIBILITY_MODES[keyof typeof CONST.COMPATIBILITY_MODES];
+    type DocumentOwnershipLevel = typeof DOCUMENT_OWNERSHIP_LEVELS[DocumentOwnershipString];
     type DocumentOwnershipString = keyof typeof DOCUMENT_OWNERSHIP_LEVELS;
-    type DrawingFillType = (typeof DRAWING_FILL_TYPES)[keyof typeof DRAWING_FILL_TYPES];
+    type DrawingFillType = typeof DRAWING_FILL_TYPES[keyof typeof DRAWING_FILL_TYPES];
     type FileCategory = keyof typeof FILE_CATEGORIES;
     type FileExtension = keyof typeof UPLOADABLE_FILE_EXTENSIONS;
-    type FolderDocumentType = (typeof FOLDER_DOCUMENT_TYPES)[number];
-    type GridType = (typeof GRID_TYPES)[keyof typeof GRID_TYPES];
+    type FolderDocumentType = typeof FOLDER_DOCUMENT_TYPES[number];
+    type GridType = typeof GRID_TYPES[keyof typeof GRID_TYPES];
     type ImageFileExtension = keyof typeof IMAGE_FILE_EXTENSIONS;
-    type JournalEntryPageFormat = (typeof JOURNAL_ENTRY_PAGE_FORMATS)[keyof typeof JOURNAL_ENTRY_PAGE_FORMATS];
-    type MacroScope = (typeof MACRO_SCOPES)[number];
-    type MacroType = (typeof MACRO_TYPES)[keyof typeof MACRO_TYPES];
-    type MeasuredTemplateType = (typeof MEASURED_TEMPLATE_TYPES)[keyof typeof MEASURED_TEMPLATE_TYPES];
-    type PackageType = (typeof PACKAGE_TYPES)[number];
-    type PlaylistMode = (typeof PLAYLIST_MODES)[keyof typeof PLAYLIST_MODES];
-    type PlaylistSortMode = (typeof PLAYLIST_SORT_MODES)[keyof typeof PLAYLIST_SORT_MODES];
-    type RollMode = (typeof CONST.DICE_ROLL_MODES)[keyof typeof CONST.DICE_ROLL_MODES];
-    type TableResultType = (typeof TABLE_RESULT_TYPES)[keyof typeof TABLE_RESULT_TYPES];
-    type TextAnchorPoint = (typeof TEXT_ANCHOR_POINTS)[keyof typeof TEXT_ANCHOR_POINTS];
-    type TileOcclusionMode = (typeof TILE_OCCLUSION_MODES)[keyof typeof TILE_OCCLUSION_MODES];
-    type TokenDisplayMode = (typeof TOKEN_DISPLAY_MODES)[keyof typeof TOKEN_DISPLAY_MODES];
-    type TokenDisposition = (typeof TOKEN_DISPOSITIONS)[keyof typeof TOKEN_DISPOSITIONS];
+    type JournalEntryPageFormat = typeof JOURNAL_ENTRY_PAGE_FORMATS[keyof typeof JOURNAL_ENTRY_PAGE_FORMATS];
+    type MacroScope = typeof MACRO_SCOPES[number];
+    type MacroType = typeof MACRO_TYPES[keyof typeof MACRO_TYPES];
+    type MeasuredTemplateType = typeof MEASURED_TEMPLATE_TYPES[keyof typeof MEASURED_TEMPLATE_TYPES];
+    type PackageType = typeof PACKAGE_TYPES[number];
+    type PlaylistMode = typeof PLAYLIST_MODES[keyof typeof PLAYLIST_MODES];
+    type PlaylistSortMode = typeof PLAYLIST_SORT_MODES[keyof typeof PLAYLIST_SORT_MODES];
+    type RollMode = typeof CONST.DICE_ROLL_MODES[keyof typeof CONST.DICE_ROLL_MODES];
+    type TableResultType = typeof TABLE_RESULT_TYPES[keyof typeof TABLE_RESULT_TYPES];
+    type TextAnchorPoint = typeof TEXT_ANCHOR_POINTS[keyof typeof TEXT_ANCHOR_POINTS];
+    type TileOcclusionMode = typeof TILE_OCCLUSION_MODES[keyof typeof TILE_OCCLUSION_MODES];
+    type TokenDisplayMode = typeof TOKEN_DISPLAY_MODES[keyof typeof TOKEN_DISPLAY_MODES];
+    type TokenDisposition = typeof TOKEN_DISPOSITIONS[keyof typeof TOKEN_DISPOSITIONS];
     type UserAction = "create" | "update" | "delete";
     type UserPermissionString = keyof typeof USER_PERMISSIONS;
     type UserRole = keyof typeof USER_ROLE_NAMES;
     type UserRoleName = keyof typeof USER_ROLES;
     type VideoFileExtension = keyof typeof VIDEO_FILE_EXTENSIONS;
-    type WallDirection = (typeof WALL_DIRECTIONS)[keyof typeof WALL_DIRECTIONS];
-    type WallDoorState = (typeof WALL_DOOR_STATES)[keyof typeof WALL_DOOR_STATES];
-    type WallDoorType = (typeof WALL_DOOR_TYPES)[keyof typeof WALL_DOOR_TYPES];
-    type WallMovementType = (typeof WALL_MOVEMENT_TYPES)[keyof typeof WALL_MOVEMENT_TYPES];
-    type WallRestrictionType = (typeof WALL_RESTRICTION_TYPES)[number];
-    type WallSenseType = (typeof WALL_SENSE_TYPES)[keyof typeof WALL_SENSE_TYPES];
+    type WallDirection = typeof WALL_DIRECTIONS[keyof typeof WALL_DIRECTIONS];
+    type WallDoorState = typeof WALL_DOOR_STATES[keyof typeof WALL_DOOR_STATES];
+    type WallDoorType = typeof WALL_DOOR_TYPES[keyof typeof WALL_DOOR_TYPES];
+    type WallMovementType = typeof WALL_MOVEMENT_TYPES[keyof typeof WALL_MOVEMENT_TYPES];
+    type WallRestrictionType = typeof WALL_RESTRICTION_TYPES[number];
+    type WallSenseType = typeof WALL_SENSE_TYPES[keyof typeof WALL_SENSE_TYPES];
     type DrawingShapeType = "r" | "e" | "t" | "p" | "f";
 }
diff --git a/node_modules/foundry-types/common/data/data/active-effect-data.d.ts b/node_modules/foundry-types/common/data/data/active-effect-data.d.ts
new file mode 100644
index 0000000..6325afe
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/active-effect-data.d.ts
@@ -0,0 +1,49 @@
+declare module foundry {
+    module data {
+        /**
+         * @property _id         The EmbeddedEntity id of the Active Effect
+         * @property label       The label which describes this effect
+         * @property [disabled]  Is this effect currently disabled?
+         * @property [icon]      An image icon path for this effect
+         * @property [tint]      A hex color string to tint the effect icon
+         * @property [origin]    The UUID of an Entity or EmbeddedEntity which was the source of this effect
+         * @property [transfer]  Should this effect transfer automatically to an Actor when its Item becomes owned?
+         * @property flags       Additional key/value flags
+         */
+        interface ActiveEffectSource {
+            _id: string;
+            label: string;
+            duration: EffectDurationSource;
+            changes: EffectChangeSource[];
+            disabled: boolean;
+            icon: ImageFilePath;
+            tint: string;
+            origin: string | undefined;
+            transfer: boolean;
+            flags: Record<string, unknown>;
+        }
+
+        class ActiveEffectData<
+            TDocument extends documents.BaseActiveEffect = documents.BaseActiveEffect
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+
+            /** @property duration The duration of the effect */
+            duration: EffectDurationData<TDocument>;
+
+            /** @property changes The changes applied by this effect */
+            changes: EffectChangeData<TDocument>[];
+        }
+
+        interface ActiveEffectData extends Omit<ActiveEffectSource, "duration" | "changes"> {
+            readonly _source: ActiveEffectSource;
+        }
+    }
+}
+
+declare interface ActiveEffectDurationSummary {
+    type: "seconds" | "turns" | "none";
+    duration: number;
+    remaining: number;
+    label: string;
+}
diff --git a/node_modules/foundry-types/common/data/data/actor-data.d.ts b/node_modules/foundry-types/common/data/data/actor-data.d.ts
new file mode 100644
index 0000000..f49689d
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/actor-data.d.ts
@@ -0,0 +1,39 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a Actor document.
+         * @see BaseActor
+         *
+         * @param data Initial data used to construct the data object
+         * @param [document] The document to which this data object belongs
+         *
+         * @property _id          The _id which uniquely identifies this Actor document
+         * @property name         The name of this Actor
+         * @property type         An Actor subtype which configures the system data model applied
+         * @property [img]        An image file path which provides the artwork for this Actor
+         * @property [data]       The system data object which is defined by the system template.json model
+         * @property [token]      Default Token settings which are used for Tokens created from this Actor
+         * @property items        A Collection of Item embedded Documents
+         * @property effects      A Collection of ActiveEffect embedded Documents
+         * @property folder       The _id of a Folder which contains this Actor
+         * @property [sort]       The numeric sort value which orders this Actor relative to its siblings
+         * @property [ownership] An object which configures user permissions to this Actor
+         * @property [flags={}]   An object of optional key/value flags
+         */
+        interface ActorSource {
+            _id: string;
+            name: string;
+            type: string;
+            img: ImageFilePath;
+            system: object;
+            prototypeToken: PrototypeTokenSource;
+            items: ItemSource[];
+            effects: ActiveEffectSource[];
+            folder: string | null;
+            sort: number;
+            ownership: Record<string, DocumentOwnershipLevel>;
+            flags: documents.ActorFlags;
+            token: TokenSource | null
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/ambient-light-data.d.ts b/node_modules/foundry-types/common/data/data/ambient-light-data.d.ts
new file mode 100644
index 0000000..4a1009b
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/ambient-light-data.d.ts
@@ -0,0 +1,46 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a AmbientLight embedded document.
+         *
+         * @property _id            The _id which uniquely identifies this BaseAmbientLight embedded document
+         * @property [x=0]          The x-coordinate position of the origin of the light
+         * @property [y=0]          The y-coordinate position of the origin of the light
+         * @property [rotation=0]   The angle of rotation for the tile between 0 and 360
+         * @property [walls=true]   Whether or not this light source is constrained by Walls
+         * @property [vision=false] Whether or not this light source provides a source of vision
+         * @property config         Light configuration data
+         * @property [hidden=false] Is the light source currently hidden?
+         * @property [flags={}]     An object of optional key/value flags
+         */
+        interface AmbientLightSource {
+            _id: string;
+            t: string;
+            x: number;
+            y: number;
+            rotation: number;
+            walls: boolean;
+            vision: boolean;
+            config: LightSource;
+            hidden: boolean;
+            flags: Record<string, unknown>;
+        }
+
+        class AmbientLightData<
+            TDocument extends documents.BaseAmbientLight = documents.BaseAmbientLight
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+
+            lightAnimation: AnimationData<documents.BaseAmbientLight>;
+
+            darkness: DarknessActivation;
+        }
+
+        interface AmbientLightData<TDocument extends documents.BaseAmbientLight = documents.BaseAmbientLight>
+            extends Omit<AmbientLightSource, "config"> {
+            readonly _source: AmbientLightSource;
+
+            config: LightData<TDocument>;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/ambient-sound-data.d.ts b/node_modules/foundry-types/common/data/data/ambient-sound-data.d.ts
new file mode 100644
index 0000000..05772ba
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/ambient-sound-data.d.ts
@@ -0,0 +1,44 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a AmbientSound embedded document.
+         * @see BaseAmbientSound
+         *
+         * @param data Initial data used to construct the data object
+         * @param [document] The document to which this data object belongs
+         *
+         * @property _id             The _id which uniquely identifies this AmbientSound document
+         * @property path            The audio file path that is played by this sound
+         * @property [playing=false] Is this sound currently playing?
+         * @property [repeat=false]  Does this sound loop?
+         * @property [volume=0.5]    The audio volume of the sound, from 0 to 1
+         * @property [flags={}]      An object of optional key/value flags
+         */
+        interface AmbientSoundSource {
+            _id: string;
+            type: string;
+            x: number;
+            y: number;
+            radius: number;
+            path: AudioFilePath;
+            repeat: boolean;
+            volume: number;
+            easing: boolean;
+            hidden: boolean;
+            darkness: DarknessActivationSource;
+            flags: Record<string, unknown>;
+        }
+
+        class AmbientSoundData<
+            TDocument extends documents.BaseAmbientSound = documents.BaseAmbientSound
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+
+            darkness: DarknessActivation;
+        }
+
+        interface AmbientSoundData extends Omit<AmbientSoundSource, "darkness"> {
+            readonly _source: AmbientSoundSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/animation-data.d.ts b/node_modules/foundry-types/common/data/data/animation-data.d.ts
index 6d464be..33138e4 100644
--- a/node_modules/foundry-types/common/data/data/animation-data.d.ts
+++ b/node_modules/foundry-types/common/data/data/animation-data.d.ts
@@ -6,10 +6,20 @@ declare module foundry {
          * @property speed     The speed of the animation, a number between 1 and 10
          * @property intensity The intensity of the animation, a number between 1 and 10
          */
-        interface AnimationData {
+        interface AnimationSource {
             type: string;
             speed: number;
             intensity: number;
         }
+
+        class AnimationData<
+            TDocument extends abstract.Document = abstract.Document
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+        }
+
+        interface AnimationData extends AnimationSource {
+            readonly _source: AnimationSource;
+        }
     }
 }
diff --git a/node_modules/foundry-types/common/data/data/cards-data.d.ts b/node_modules/foundry-types/common/data/data/cards-data.d.ts
new file mode 100644
index 0000000..15fd70e
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/cards-data.d.ts
@@ -0,0 +1,50 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema of a stack of multiple Cards.
+         * Each stack can represent a Deck, a Hand, or a Pile.
+         */
+        interface CardsSource<> {
+            /** The _id which uniquely identifies this stack of Cards document */
+            _id: string;
+            /** The text name of this stack */
+            name: string;
+            /** The type of this stack, in BaseCards.metadata.types */
+            type: string;
+            /** A text description of this stack */
+            description: string;
+            /** An image or video which is used to represent the stack of cards */
+            img: VideoFilePath;
+            /** Game system data which is defined by the system template.json model */
+            data: object;
+            /** A collection of Card documents which currently belong to this stack */
+            cards: object;
+            /** The visible width of this stack */
+            width: number;
+            /** The visible height of this stack */
+            height: number;
+            /** The angle of rotation of this stack */
+            rotation: string;
+            /** Whether or not to publicly display the number of cards in this stack */
+            displayCount?: boolean;
+            /** The _id of a Folder which contains this document */
+            folder?: string | null;
+            /** The sort order of this stack relative to others in its parent collection */
+            sort: number;
+            /** An object which configures user permissions to this stack */
+            ownership: Record<string, DocumentOwnershipLevel>;
+            /** An object of optional key/value flags */
+            flags: Record<string, Record<string, unknown>>;
+        }
+
+        interface CardsData<TDocument extends documents.BaseCards = documents.BaseCards>
+            extends abstract.DocumentData<TDocument> {
+            /** The default icon used for a cards stack that does not have a custom image set */
+            DEFAULT_ICON: ImageFilePath;
+        }
+
+        interface CardsData<TDocument extends documents.BaseCards = documents.BaseCards> extends CardsSource {
+            readonly _source: CardsSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/chat-message-data.d.ts b/node_modules/foundry-types/common/data/data/chat-message-data.d.ts
new file mode 100644
index 0000000..06b3767
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/chat-message-data.d.ts
@@ -0,0 +1,39 @@
+declare module foundry {
+    module data {
+        interface ChatMessageSource {
+            _id: string;
+            type: ChatMessageType;
+            user: string;
+            timestamp: string;
+            flavor?: string;
+            content: string;
+            speaker: ChatSpeakerSource;
+            whisper: string[];
+            blind: boolean;
+            rolls: (string | RollJSON)[];
+            sound: AudioFilePath;
+            emote?: boolean;
+            flags: ChatMessageFlags;
+        }
+
+        class ChatMessageData<
+            TDocument extends documents.BaseChatMessage = documents.BaseChatMessage
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+        }
+
+        interface ChatMessageData extends ChatMessageSource {
+            readonly _source: ChatMessageSource;
+
+            roll: string;
+        }
+
+        type ChatMessageFlags = DocumentFlags & {
+            core?: {
+                canPopout?: boolean;
+                initiativeRoll?: boolean;
+                RollTable?: string;
+            };
+        };
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/chat-speaker-data.d.ts b/node_modules/foundry-types/common/data/data/chat-speaker-data.d.ts
new file mode 100644
index 0000000..b5f0ec9
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/chat-speaker-data.d.ts
@@ -0,0 +1,34 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for an embedded Chat Speaker object.
+         * @extends DocumentData
+         * @memberof data
+         * @see ChatMessageData
+         *
+         * @param data Initial data used to construct the data object
+         * @param [document] The document to which this data object belongs
+         *
+         * @property [scene] The _id of the Scene where this message was created
+         * @property [actor] The _id of the Actor who generated this message
+         * @property [token] The _id of the Token who generated this message
+         * @property [alias] An overridden alias name used instead of the Actor or Token name
+         */
+        interface ChatSpeakerSource {
+            scene?: string | null;
+            actor?: string | null;
+            token?: string | null;
+            alias: string;
+        }
+
+        class ChatSpeakerData<
+            TDocument extends documents.BaseChatMessage = documents.BaseChatMessage
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+        }
+
+        interface ChatSpeakerData extends ChatSpeakerSource {
+            readonly _source: ChatSpeakerSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/combat-data.d.ts b/node_modules/foundry-types/common/data/data/combat-data.d.ts
new file mode 100644
index 0000000..0774106
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/combat-data.d.ts
@@ -0,0 +1,40 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a Combat document.
+         * @property _id            The _id which uniquely identifies this Combat document
+         * @property scene          The _id of a Scene within which this Combat occurs
+         * @property combatants     A Collection of Combatant embedded Documents
+         * @property [active=false] Is the Combat encounter currently active?
+         * @property [round=0]      The current round of the Combat encounter
+         * @property [turn=0]       The current turn in the Combat round
+         * @property [sort=0]       The current sort order of this Combat relative to others in the same Scene
+         * @property [flags={}]     An object of optional key/value flags
+         */
+        interface CombatSource {
+            _id: string;
+            scene: string;
+            combatants: CombatantSource[];
+            active: boolean;
+            round: number;
+            turn: number;
+            sort: number;
+            flags: Record<string, Record<string, unknown>>;
+        }
+
+        class CombatData<
+            TDocument extends documents.BaseCombat = documents.BaseCombat,
+            TCombatant extends documents.BaseCombatant = documents.BaseCombatant
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+
+            combatants: abstract.EmbeddedCollection<TCombatant>;
+        }
+
+        interface CombatData extends Omit<CombatSource, "combatants"> {
+            readonly _source: CombatSource;
+
+            readonly parent: null;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/combatant-data.d.ts b/node_modules/foundry-types/common/data/data/combatant-data.d.ts
new file mode 100644
index 0000000..8bd16b8
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/combatant-data.d.ts
@@ -0,0 +1,35 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a Combat document.
+         * @property _id              The _id which uniquely identifies this Combatant embedded document
+         * @property [tokenId]        The _id of a Token associated with this Combatant
+         * @property [name]           A customized name which replaces the name of the Token in the tracker
+         * @property [img]            A customized image which replaces the Token image in the tracker
+         * @property [initiative]     The initiative score for the Combatant which determines its turn order
+         * @property [hidden=false]   Is this Combatant currently hidden?
+         * @property [defeated=false] Has this Combatant been defeated?
+         * @property [flags={}]       An object of optional key/value flags
+         */
+        interface CombatantSource {
+            _id: string;
+            actorId: string;
+            tokenId: string;
+            img: VideoFilePath;
+            initiative: number | null;
+            hidden: boolean;
+            defeated: boolean;
+            flags: Record<string, unknown>;
+        }
+
+        class CombatantData<
+            TDocument extends documents.BaseCombatant = documents.BaseCombatant
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+        }
+
+        interface CombatantData extends CombatantSource {
+            readonly _source: CombatantSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/darkness-activation.d.ts b/node_modules/foundry-types/common/data/data/darkness-activation.d.ts
index 4e0a900..dc7c51f 100644
--- a/node_modules/foundry-types/common/data/data/darkness-activation.d.ts
+++ b/node_modules/foundry-types/common/data/data/darkness-activation.d.ts
@@ -5,9 +5,19 @@ declare module foundry {
          * @property [min=0] The minimum darkness level for which activation occurs
          * @property [max=1] The maximum darkness level for which activation occurs
          */
-        interface DarknessActivation {
+        interface DarknessActivationSource {
             min: number;
             max: number;
         }
+
+        class DarknessActivation extends abstract.DocumentData<
+            documents.BaseAmbientLight | documents.BaseAmbientSound
+        > {}
+
+        interface DarknessActivation extends DarknessActivationSource {
+            readonly _source: DarknessActivationSource;
+
+            readonly parent: null;
+        }
     }
 }
diff --git a/node_modules/foundry-types/common/data/data/drawing-data.d.ts b/node_modules/foundry-types/common/data/data/drawing-data.d.ts
new file mode 100644
index 0000000..15b8699
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/drawing-data.d.ts
@@ -0,0 +1,74 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a Drawing embedded document.
+         * @see BaseDrawing
+         *
+         * @param data       Initial data used to construct the data object
+         * @param [document] The embedded document to which this data object belongs
+         *
+         * @property t                    The value in CONST.DRAWING_TYPES which defines the geometry type of this drawing
+         * @property x                    The x-coordinate position of the top-left corner of the drawn shape
+         * @property y                    The y-coordinate position of the top-left corner of the drawn shape
+         * @property width                The pixel width of the drawing figure
+         * @property height               The pixel height of the drawing figure
+         * @property [rotation=0]         The angle of rotation for the drawing figure
+         * @property [z=0]                The z-index of this drawing relative to other siblings
+         * @property [points]             An array of points [x,y] which define polygon vertices
+         * @property [bezierFactor=0]     An amount of bezier smoothing applied, between 0 and 1
+         * @property [fillType=0]         The fill type of the drawing shape, a value from CONST.DRAWING_FILL_TYPES
+         * @property [fillColor]          An optional color string with which to fill the drawing geometry
+         * @property [fillAlpha=0.5]      The opacity of the fill applied to the drawing geometry
+         * @property [strokeWidth=8]      The width in pixels of the boundary lines of the drawing geometry
+         * @property [strokeColor]        The color of the boundary lines of the drawing geometry
+         * @property [strokeAlpha=1]      The opacity of the boundary lines of the drawing geometry
+         * @property [texture]            The path to a tiling image texture used to fill the drawing geometry
+         * @property [text]               Optional text which is displayed overtop of the drawing
+         * @property [fontFamily=Signika] The font family used to display text within this drawing
+         * @property [fontSize=48]        The font size used to display text within this drawing
+         * @property [textColor=#FFFFFF]  The color of text displayed within this drawing
+         * @property [textAlpha=1]        The opacity of text displayed within this drawing
+         * @property [hidden=false]       Is the drawing currently hidden?
+         * @property [locked=false]       Is the drawing currently locked?
+         */
+        interface DrawingSource extends abstract.DocumentSource {
+            t: DrawingShapeType;
+            x: number;
+            y: number;
+            width: number;
+            height: number;
+            rotation?: number;
+            z?: number;
+            points?: [number, number][];
+            bezierFactor?: number;
+            fillType?: number;
+            fillColor?: string;
+            fillAlpha?: number;
+            strokeWidth?: number;
+            strokeColor?: number;
+            strokeAlpha?: number;
+            texture?: string;
+            text?: string;
+            fontFamily?: string;
+            fontSize?: number;
+            textColor?: string;
+            textAlpha?: number;
+            hidden?: boolean;
+            locked?: boolean;
+        }
+
+        class DrawingData<
+            TDocument extends documents.BaseDrawing = documents.BaseDrawing
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+
+            protected override _initialize(): void;
+
+            protected override _validateDocument(): void;
+        }
+
+        interface DrawingData extends DrawingSource {
+            readonly _source: DrawingSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/effect-change-data.d.ts b/node_modules/foundry-types/common/data/data/effect-change-data.d.ts
new file mode 100644
index 0000000..ea7b19f
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/effect-change-data.d.ts
@@ -0,0 +1,29 @@
+declare module foundry {
+    module data {
+        /**
+         * An embedded data structure which defines the structure of a change applied by an ActiveEffect.
+         * @property key The attribute path in the Actor or Item data which the change modifies
+         * @property value The value of the change effect
+         * @property mode The modification mode with which the change is applied
+         * @property priority The priority level with which this change is applied
+         */
+        interface EffectChangeSource {
+            key: string;
+            value: string;
+            mode: ActiveEffectChangeMode;
+            priority: number;
+        }
+
+        class EffectChangeData<
+            TDocument extends documents.BaseActiveEffect = documents.BaseActiveEffect
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+        }
+
+        interface EffectChangeData extends EffectChangeSource {
+            readonly _source: EffectDurationSource;
+        }
+    }
+}
+
+declare type ActiveEffectChangeMode = (typeof CONST.ACTIVE_EFFECT_MODES)[keyof typeof CONST.ACTIVE_EFFECT_MODES];
diff --git a/node_modules/foundry-types/common/data/data/effect-duration-data.d.ts b/node_modules/foundry-types/common/data/data/effect-duration-data.d.ts
new file mode 100644
index 0000000..98c65ab
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/effect-duration-data.d.ts
@@ -0,0 +1,38 @@
+declare module foundry {
+    module data {
+        /**
+         * An embedded data structure which tracks the duration of an ActiveEffect.
+         * @property startTime    The world time when the active effect first started
+         * @property [seconds]    The maximum duration of the effect, in seconds
+         * @property [combat]     The _id of the CombatEncounter in which the effect first started
+         * @property [rounds]     The maximum duration of the effect, in combat rounds
+         * @property [turns]      The maximum duration of the effect, in combat turns
+         * @property [startRound] The round of the CombatEncounter in which the effect first started
+         * @property [startTurn]  The turn of the CombatEncounter in which the effect first started
+         */
+        interface EffectDurationSource {
+            startTime: number;
+            seconds: number | undefined;
+            combat?: string;
+            rounds: number | undefined;
+            turns: number | undefined;
+            startRound: number | null;
+            startTurn: number | null;
+        }
+
+        class EffectDurationData<
+            TDocument extends documents.BaseActiveEffect = documents.BaseActiveEffect
+        > extends abstract.DocumentData<TDocument> {}
+
+        interface EffectDurationData extends EffectDurationSource {
+            readonly _source: EffectDurationSource;
+
+            /** @todo uncomment when prettier is updated to support typescript 4.3 */
+            // get schema(): ReturnType<typeof EffectDurationData['defineSchema']>;
+        }
+
+        namespace EffectDurationData {
+            const schema: ReturnType<(typeof EffectDurationData)["defineSchema"]>;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/fog-exploration-data.d.ts b/node_modules/foundry-types/common/data/data/fog-exploration-data.d.ts
new file mode 100644
index 0000000..a5f6ff9
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/fog-exploration-data.d.ts
@@ -0,0 +1,29 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a FogExploration document.
+         * @property _id       The _id which uniquely identifies this FogExploration document
+         * @property scene     The _id of the Scene document to which this fog applies
+         * @property user      The _id of the User document to which this fog applies
+         * @property explored  The base64 png image of the explored fog polygon
+         * @property positions The object of scene positions which have been explored at a certain vision radius
+         * @property timestamp The timestamp at which this fog exploration was last updated
+         */
+        interface FogExplorationSource {
+            _id: string;
+            scene: string;
+            user: string;
+            explored: string;
+            position: unknown;
+            timestamp: number;
+        }
+
+        class FogExplorationData<
+            TDocument extends documents.BaseFogExploration = documents.BaseFogExploration
+        > extends abstract.DocumentData<TDocument> {}
+
+        interface FogExplorationData extends FogExplorationSource {
+            readonly _source: FogExplorationSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/folder-data.d.ts b/node_modules/foundry-types/common/data/data/folder-data.d.ts
new file mode 100644
index 0000000..621e88b
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/folder-data.d.ts
@@ -0,0 +1,43 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a Folder document.
+         *
+         * @param data Initial data used to construct the data object
+         * @param [document] The document to which this data object belongs
+         *
+         * @property _id           The _id which uniquely identifies this Folder document
+         * @property name          The name of this Folder
+         * @property type          The document type which this Folder contains, from CONST.FOLDER_DOCUMENT_TYPES
+         * @property [description] An HTML description of the contents of this folder
+         * @property [parent]      The _id of a parent Folder which contains this Folder
+         * @property [sorting=a]   The sorting mode used to organize documents within this Folder, in ["a", "m"]
+         * @property [sort]        The numeric sort value which orders this Folder relative to its siblings
+         * @property [color]        A color string used for the background color of this Folder
+         * @property [flags={}]    An object of optional key/value flags
+         */
+        interface FolderSource extends abstract.DocumentSource {
+            _id: string;
+            name: string;
+            type: FolderDocumentType;
+            description: string;
+            parent: string | null;
+            sorting: "a" | "m";
+            sort: number;
+            color: HexColorString;
+            flags: Record<string, unknown>;
+        }
+
+        class FolderData<
+            TDocument extends documents.BaseFolder = documents.BaseFolder
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+
+            static SORTING_MODES: ["a", "m"];
+        }
+
+        interface FolderData extends FolderSource {
+            readonly _source: FolderSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/index.d.ts b/node_modules/foundry-types/common/data/data/index.d.ts
index 8c2c26a..5da1d4e 100644
--- a/node_modules/foundry-types/common/data/data/index.d.ts
+++ b/node_modules/foundry-types/common/data/data/index.d.ts
@@ -1,7 +1,33 @@
+import "./active-effect-data";
+import "./actor-data";
+import "./ambient-light-data";
+import "./ambient-sound-data";
 import "./animation-data";
+import "./cards-data";
+import "./chat-message-data";
+import "./chat-speaker-data";
+import "./combat-data";
+import "./combatant-data";
 import "./darkness-activation";
+import "./drawing-data";
+import "./effect-change-data";
+import "./effect-duration-data";
+import "./fog-exploration-data";
+import "./folder-data";
+import "./item-data";
 import "./light-data";
+import "./macro-data";
+import "./measured-template-data";
+import "./note-data";
+import "./playlist-data";
+import "./playlist-sound-data";
 import "./prototype-token-data";
-import "./texture-data";
+import "./roll-table-data";
+import "./scene-data";
+import "./table-result-data";
+import "./tile-data";
 import "./tile-occlusion";
+import "./token-bar-data";
+import "./token-data";
 import "./video-data";
+import "./wall-data";
diff --git a/node_modules/foundry-types/common/data/data/item-data.d.ts b/node_modules/foundry-types/common/data/data/item-data.d.ts
new file mode 100644
index 0000000..0ac91b7
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/item-data.d.ts
@@ -0,0 +1,33 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a Item document.
+         * @see BaseItem
+         *
+         * @param data Initial data used to construct the data object
+         * @param [document] The document to which this data object belongs
+         *
+         * @property _id          The _id which uniquely identifies this Item document
+         * @property name         The name of this Item
+         * @property type         An Item subtype which configures the system data model applied
+         * @property [img]        An image file path which provides the artwork for this Item
+         * @property [data]       The system data object which is defined by the system template.json model
+         * @property folder       The _id of a Folder which contains this Item
+         * @property [sort]       The numeric sort value which orders this Item relative to its siblings
+         * @property [ownership] An object which configures user permissions to this Item
+         * @property [flags={}]   An object of optional key/value flags
+         */
+        interface ItemSource {
+            _id: string;
+            name: string;
+            type: string;
+            img: ImageFilePath;
+            system: object;
+            effects: ActiveEffectSource[];
+            folder?: string | null;
+            sort: number;
+            ownership: Record<string, DocumentOwnershipLevel>;
+            flags: documents.ItemFlags;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/light-data.d.ts b/node_modules/foundry-types/common/data/data/light-data.d.ts
index 21eb36b..faa67d2 100644
--- a/node_modules/foundry-types/common/data/data/light-data.d.ts
+++ b/node_modules/foundry-types/common/data/data/light-data.d.ts
@@ -1,72 +1,65 @@
-import { DataModel } from "../../abstract/data.mjs";
-import {
-    AlphaField,
-    AngleField,
-    BooleanField,
-    ColorField,
-    ModelPropsFromSchema,
-    NumberField,
-    SchemaField,
-    StringField,
-} from "../fields.mjs";
+declare module foundry {
+    module data {
+        /**
+         * A reusable document structure for the internal data used to render the appearance of a light source.
+         * This is re-used by both the AmbientLightData and TokenData classes.
+         *
+         * @property alpha       An opacity for the emitted light, if any
+         * @property animation   An animation configuration for the source
+         * @property angle       The angle of emission for this point source
+         * @property bright      The allowed radius of bright vision or illumination
+         * @property color       A tint color for the emitted light, if any
+         * @property coloration  The coloration technique applied in the shader
+         * @property contrast    The amount of contrast this light applies to the background texture
+         * @property darkness    A darkness range (min and max) for which the source should be active
+         * @property dim         The allowed radius of dim vision or illumination
+         * @property invertColor Does this source invert the color of the background texture?
+         * @property gradual     Fade the difference between bright, dim, and dark gradually?
+         * @property luminosity  The luminosity applied in the shader
+         * @property saturation  The amount of color saturation this light applies to the background texture
+         * @property shadows     The depth of shadows this light applies to the background texture
+         */
+        interface LightSource {
+            _id: string;
+            alpha: number;
+            animation: object;
+            angle: number;
+            bright: number;
+            color: string;
+            coloration: number;
+            contrast: number;
+            darkness: { min: number; max: number };
+            dim: number;
+            invertColor: boolean;
+            gradual: boolean;
+            luminosity: number;
+            saturation: number;
+            shadows: number;
+        }
+
+        class LightData<
+            TDocument extends documents.BaseAmbientLight | documents.BaseToken =
+                | documents.BaseAmbientLight
+                | documents.BaseToken
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;

-declare global {
-    module foundry {
-        module data {
-            /**
-             * A reusable document structure for the internal data used to render the appearance of a light source.
-             * This is re-used by both the AmbientLightData and TokenData classes.
-             *
-             * @property alpha       An opacity for the emitted light, if any
-             * @property animation   An animation configuration for the source
-             * @property angle       The angle of emission for this point source
-             * @property bright      The allowed radius of bright vision or illumination
-             * @property color       A tint color for the emitted light, if any
-             * @property coloration  The coloration technique applied in the shader
-             * @property contrast    The amount of contrast this light applies to the background texture
-             * @property darkness    A darkness range (min and max) for which the source should be active
-             * @property dim         The allowed radius of dim vision or illumination
-             * @property invertColor Does this source invert the color of the background texture?
-             * @property gradual     Fade the difference between bright, dim, and dark gradually?
-             * @property luminosity  The luminosity applied in the shader
-             * @property saturation  The amount of color saturation this light applies to the background texture
-             * @property shadows     The depth of shadows this light applies to the background texture
-             */
-            class LightData extends DataModel<DataModel | null, LightDataSchema> {
-                static override defineSchema(): LightDataSchema;
+            /** A reusable field definition for uniform fields used by LightData */
+            static LIGHT_UNIFORM_FIELD: {
+                type: typeof Number;
+                required: true;
+                default: number;
+                validate: (n: unknown) => boolean;
+                validationError: string;
+            };

-                static override migrateData<TSource extends object>(source: TSource): TSource;
-            }
+            protected override _initializeSource(data: object): this["_source"];

-            interface LightData
-                extends DataModel<DataModel | null, LightDataSchema>,
-                    ModelPropsFromSchema<LightDataSchema> {}
+            protected override _initialize(): void;
+        }

-            type LightSource = SourceFromSchema<LightDataSchema>;
+        interface LightData extends LightSource {
+            readonly _source: LightSource;
         }
     }
 }
-
-type LightDataSchema = {
-    alpha: AlphaField;
-    angle: AngleField;
-    bright: NumberField<number, number, true, false, true>;
-    color: ColorField;
-    coloration: NumberField<number, number, true>;
-    dim: NumberField<number, number, true>;
-    attenuation: NumberField<number, number, true>;
-    luminosity: NumberField<number, number, true, false, true>;
-    saturation: NumberField<number, number, true, false, true>;
-    constrast: NumberField<number, number, true, false, true>;
-    shadows: NumberField<number, number, true, false, true>;
-    animation: SchemaField<{
-        type: StringField<string, string, true, true, true>;
-        speed: NumberField<number, number, true>;
-        intensity: NumberField<number, number, true>;
-        reverse: BooleanField;
-    }>;
-    darkness: SchemaField<{
-        min: AlphaField;
-        speed: AlphaField;
-    }>;
-};
diff --git a/node_modules/foundry-types/common/data/data/macro-data.d.ts b/node_modules/foundry-types/common/data/data/macro-data.d.ts
new file mode 100644
index 0000000..bb4480c
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/macro-data.d.ts
@@ -0,0 +1,28 @@
+declare module foundry {
+    module data {
+        interface MacroSource extends abstract.DocumentSource {
+            _id: string;
+            name: string;
+            type: "chat" | "script";
+            img: ImageFilePath;
+            actorIds: string[];
+            author: string;
+            command: string;
+            scope: string;
+            folder?: string | null;
+            sort: number;
+            ownership: Record<string, DocumentOwnershipLevel>;
+            flags: Record<string, Record<string, unknown>>;
+        }
+
+        class MacroData<
+            TDocument extends documents.BaseMacro = documents.BaseMacro
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+        }
+
+        interface MacroData extends MacroSource {
+            readonly _source: MacroSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/measured-template-data.d.ts b/node_modules/foundry-types/common/data/data/measured-template-data.d.ts
new file mode 100644
index 0000000..e0ad2a1
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/measured-template-data.d.ts
@@ -0,0 +1,53 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a MeasuredTemplate embedded document.
+         * @see BaseMeasuredTemplate
+         *
+         * @param data                   Initial data used to construct the data object
+         * @param [document] The embedded document to which this data object belongs
+         *
+         * @property _id                   The _id which uniquely identifies this BaseMeasuredTemplate embedded document
+         * @property [t=circle]            The value in CONST.MEASURED_TEMPLATE_TYPES which defines the geometry type of this template
+         * @property [x=0]                 The x-coordinate position of the origin of the template effect
+         * @property [y=0]                 The y-coordinate position of the origin of the template effect
+         * @property [distance]            The distance of the template effect
+         * @property [direction=0]         The angle of rotation for the measured template
+         * @property [angle=360]           The angle of effect of the measured template, applies to cone types
+         * @property [width]               The width of the measured template, applies to ray types
+         * @property [borderColor=#000000] A color string used to tint the border of the template shape
+         * @property [fillColor=#FF0000]   A color string used to tint the fill of the template shape
+         * @property [texture]             A repeatable tiling texture used to add a texture fill to the template shape
+         * @property [flags={}]            An object of optional key/value flags
+         */
+        interface MeasuredTemplateSource extends abstract.DocumentSource {
+            _id: string;
+            user: string;
+            t: MeasuredTemplateType;
+            x: number;
+            y: number;
+            distance: number;
+            direction: number;
+            angle: number;
+            width: number;
+            borderColor: HexColorString;
+            fillColor: HexColorString;
+            texture: ImageFilePath;
+            flags: Record<string, unknown>;
+        }
+
+        class MeasuredTemplateData<
+            TDocument extends documents.BaseMeasuredTemplate = documents.BaseMeasuredTemplate
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+
+            protected override _initialize(): void;
+
+            protected override _validateDocument(): void;
+        }
+
+        interface MeasuredTemplateData extends MeasuredTemplateSource {
+            readonly _source: MeasuredTemplateSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/note-data.d.ts b/node_modules/foundry-types/common/data/data/note-data.d.ts
new file mode 100644
index 0000000..b87814d
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/note-data.d.ts
@@ -0,0 +1,51 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a Note embedded document.
+         * @see BaseNote
+         *
+         * @param data Initial data used to construct the data object
+         * @param [document] The embedded document to which this data object belongs
+         *
+         * @property _id                  The _id which uniquely identifies this BaseNote embedded document
+         * @property [entryId=null]       The _id of a JournalEntry document which this Note represents
+         * @property [x=0]                The x-coordinate position of the center of the note icon
+         * @property [y=0]                The y-coordinate position of the center of the note icon
+         * @property [icon]               An image icon path used to represent this note
+         * @property [iconSize=40]        The pixel size of the map note icon
+         * @property [iconTint]           An optional color string used to tint the map note icon
+         * @property [text]               Optional text which overrides the title of the linked Journal Entry
+         * @property [fontFamily=Signika] The font family used to display the text label on this note
+         * @property [fontSize=36]        The font size used to display the text label on this note
+         * @property [textAnchor=1]       A value in CONST.TEXT_ANCHOR_POINTS which defines where the text label anchors
+         *                                to the note icon.
+         * @property [textColor=#FFFFFF]  The string that defines the color with which the note text is rendered
+         * @property [flags={}]           An object of optional key/value flags
+         */
+        interface NoteSource {
+            _id: string;
+            entryId: string | null;
+            x: number;
+            y: number;
+            icon: ImageFilePath;
+            iconSize: number;
+            iconTint: HexColorString;
+            text: string;
+            fontFamily: string;
+            fontSize: number;
+            textAnchor: number;
+            textColor: HexColorString;
+            flags: Record<string, unknown>;
+        }
+
+        class NoteData<
+            TDocument extends documents.BaseNote = documents.BaseNote
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+        }
+
+        interface NoteData extends NoteSource {
+            readonly _source: NoteSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/playlist-data.d.ts b/node_modules/foundry-types/common/data/data/playlist-data.d.ts
new file mode 100644
index 0000000..ba407a6
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/playlist-data.d.ts
@@ -0,0 +1,42 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a Playlist document.
+         * @see BasePlaylist
+         * @property _id             The _id which uniquely identifies this Playlist document
+         * @property name            The name of this playlist
+         * @property sounds          A Collection of PlaylistSounds embedded documents which belong to this playlist
+         * @property [mode=0]        The playback mode for sounds in this playlist
+         * @property [playing=false] Is this playlist currently playing?
+         * @property folder          The _id of a Folder which contains this playlist
+         * @property [sort]          The numeric sort value which orders this playlist relative to its siblings
+         * @property [permission]    An object which configures user permissions to this playlist
+         * @property [flags={}]      An object of optional key/value flags
+         */
+        interface PlaylistSource {
+            _id: string;
+            name: string;
+            sounds: PlaylistSoundSource[];
+            mode: PlaylistMode;
+            playing: boolean;
+            fade: number;
+            folder: string;
+            sort: number;
+            seed: number;
+            permission: Record<string, DocumentOwnershipLevel>;
+            flags: Record<string, unknown>;
+        }
+
+        class PlaylistData<
+            TDocument extends documents.BasePlaylist = documents.BasePlaylist
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+
+            sounds: abstract.EmbeddedCollection<documents.BasePlaylistSound>;
+        }
+
+        interface PlaylistData extends Omit<PlaylistSoundSource, "sounds"> {
+            readonly _source: PlaylistSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/playlist-sound-data.d.ts b/node_modules/foundry-types/common/data/data/playlist-sound-data.d.ts
new file mode 100644
index 0000000..7b7cf19
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/playlist-sound-data.d.ts
@@ -0,0 +1,42 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a PlaylistSound embedded document.
+         * @see BasePlaylistSound
+         *
+         * @param data       Initial data used to construct the data object
+         * @param [document] The document to which this data object belongs
+         *
+         * @property _id               The _id which uniquely identifies this PlaylistSound document
+         * @property name              The name of this sound track
+         * @property path              The audio file path that is played by this sound
+         * @property [playing=false]   Is this sound currently playing?
+         * @property [repeat=false]    Does this sound loop?
+         * @property [volume=0.5]      The audio volume of the sound, from 0 to 1
+         * @property [streaming=false] Does this audio file use the "large file streaming" mode?
+         * @property [flags={}]        An object of optional key/value flags
+         */
+        interface PlaylistSoundSource {
+            _id: string;
+            name: string;
+            path: string;
+            playing: boolean;
+            repeat: boolean;
+            volumn: number;
+            streaming: boolean;
+            flags: Record<string, unknown>;
+        }
+
+        class PlaylistSoundData<
+            TDocument extends documents.BasePlaylistSound = documents.BasePlaylistSound
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+
+            protected override _initialize(): void;
+        }
+
+        interface PlaylistSoundData extends PlaylistSoundSource {
+            readonly _source: PlaylistSoundSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/prototype-token-data.d.ts b/node_modules/foundry-types/common/data/data/prototype-token-data.d.ts
index 4daf91d..1a105f7 100644
--- a/node_modules/foundry-types/common/data/data/prototype-token-data.d.ts
+++ b/node_modules/foundry-types/common/data/data/prototype-token-data.d.ts
@@ -2,23 +2,27 @@ declare namespace foundry {
     module data {
         interface PrototypeTokenSource
             extends Omit<
-                documents.TokenSource,
+                TokenSource,
                 "_id" | "actorId" | "actorData" | "x" | "y" | "elevation" | "effects" | "overlayEffect" | "hidden"
             > {
             name: string;
             randomImg: boolean;
         }

-        class PrototypeToken<TParent extends documents.BaseActor = documents.BaseActor> extends abstract.Document {
+        class PrototypeToken<
+            TDocument extends documents.BaseActor = documents.BaseActor
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+
             protected override _initialize(): void;

-            override toJSON(): RawObject<this>;
+            override toJSON(): this["_source"];

-            lightAnimation: AnimationData;
+            lightAnimation: AnimationData<TDocument>;

-            bar1: documents.TokenBarData;
+            bar1: TokenBarData<TDocument>;

-            bar2: documents.TokenBarData;
+            bar2: TokenBarData<TDocument>;
         }

         interface PrototypeToken extends Omit<PrototypeTokenSource, "bar1" | "bar2"> {
diff --git a/node_modules/foundry-types/common/data/data/roll-table-data.d.ts b/node_modules/foundry-types/common/data/data/roll-table-data.d.ts
new file mode 100644
index 0000000..d348c54
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/roll-table-data.d.ts
@@ -0,0 +1,57 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a RollTable document.
+         * @see BaseRollTable
+         *
+         * @param data Initial data used to construct the data object
+         * @param [document] The document to which this data object belongs
+         *
+         * @property _id                The _id which uniquely identifies this RollTable document
+         * @property name               The name of this RollTable
+         * @property [img]              An image file path which provides the thumbnail artwork for this RollTable
+         * @property [description]      The HTML text description for this RollTable document
+         * @property [results=[]]       A Collection of TableResult embedded documents which belong to this RollTable
+         * @property formula            The Roll formula which determines the results chosen from the table
+         * @property [replacement=true] Are results from this table drawn with replacement?
+         * @property [displayRoll=true] Is the Roll result used to draw from this RollTable displayed in chat?
+         * @property folder             The _id of a Folder which contains this RollTable
+         * @property [sort]             The numeric sort value which orders this RollTable relative to its siblings
+         * @property [permission]       An object which configures user permissions to this RollTable
+         * @property [flags={}]         An object of optional key/value flags
+         */
+        interface RollTableSource {
+            _id: string;
+            name: string;
+            img?: ImageFilePath;
+            description: string;
+            results: TableResultSource[];
+            formula: string;
+            replacement: boolean;
+            displayRoll: boolean;
+            folder?: string | null;
+            sort: number;
+            ownership: Record<string, DocumentOwnershipLevel>;
+            flags: Record<string, Record<string, unknown>>;
+        }
+
+        class RollTableData<
+            TDocument extends documents.BaseRollTable = documents.BaseRollTable,
+            TResults extends documents.BaseTableResult = documents.BaseTableResult
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+
+            /** The default icon used for newly created Macro documents */
+            static DEFAULT_ICON: string;
+
+            /** A Collection of TableResult embedded documents which belong to this RollTable */
+            results: abstract.EmbeddedCollection<TResults>;
+        }
+
+        interface RollTableData extends Omit<RollTableSource, "results"> {
+            img: ImageFilePath;
+
+            readonly _source: RollTableSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/scene-data.d.ts b/node_modules/foundry-types/common/data/data/scene-data.d.ts
new file mode 100644
index 0000000..0aa0706
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/scene-data.d.ts
@@ -0,0 +1,95 @@
+declare module foundry {
+    module data {
+        interface SceneSource {
+            _id: string;
+            name: string;
+
+            // Navigation
+            active: boolean;
+            navigation: boolean;
+            navOrder: number;
+            navName: string;
+
+            // Canvas Dimensions
+            img: VideoFilePath;
+            foreground: VideoFilePath;
+            thumb: ImageFilePath;
+            width: number;
+            height: number;
+            padding: number;
+            initial: {
+                x: number;
+                y: number;
+                scale: number;
+            };
+
+            backgroundColor: HexColorString;
+
+            grid: GridData;
+
+            shiftX: number;
+            shiftY: number;
+
+            // Vision and Lighting Configuration
+            tokenVision: boolean;
+            fogExploration: boolean;
+            fogReset: string;
+            globalLight: boolean;
+            globalLightThreshold: number;
+            hasGlobalThreshold: boolean;
+            darkness: number;
+
+            // Embedded Collections
+            drawings: DrawingSource[];
+            tokens: TokenSource[];
+            lights: AmbientLightSource[];
+            notes: NoteSource[];
+            sounds: AmbientSoundSource[];
+            templates: MeasuredTemplateSource[];
+            tiles: TileSource[];
+            walls: WallSource[];
+
+            // Linked Documents
+            playlist: PlaylistSource | null;
+            playlistSound: PlaylistSoundSource | null;
+            journal: documents.JournalEntrySource | null;
+            weather: string;
+
+            // Permissions
+            folder: string | null;
+            sort: number;
+            ownership: Record<string, DocumentOwnershipLevel>;
+            flags: Record<string, Record<string, unknown>>;
+        }
+
+        interface GridData {
+            /** The type of grid, a number from CONST.GRID_TYPES. */
+            type: GridType;
+            /** The grid size which represents the width (or height) of a single grid space. */
+            size: number;
+            /** A string representing the color used to render the grid lines. */
+            color: HexColorString;
+            /** A number between 0 and 1 for the opacity of the grid lines. */
+            alpha: number;
+            /** The number of distance units which are represented by a single grid space. */
+            distance: number;
+            /** A label for the units of measure which are used for grid distance. */
+            units: string;
+        }
+
+        class SceneData<
+            TDocument extends documents.BaseScene = documents.BaseScene
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+
+            // Linked Documents
+            playlist: documents.BasePlaylist | null;
+            playlistSound: documents.BasePlaylistSound | null;
+            journal: documents.BaseJournalEntry | null;
+        }
+
+        interface SceneData extends Omit<SceneSource, "flags" | "tokens" | "playlist" | "playlistSound" | "journal"> {
+            _source: SceneSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/table-result-data.d.ts b/node_modules/foundry-types/common/data/data/table-result-data.d.ts
new file mode 100644
index 0000000..12a1ec3
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/table-result-data.d.ts
@@ -0,0 +1,41 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a TableResult embedded document within a Roll Table.
+         * @see BaseTableResult
+         *
+         * @param data       Initial data used to construct the data object
+         * @param [document] The document to which this data object belongs
+         *
+         * @property [type=p]      A result sub-type from CONST.TABLE_RESULT_TYPES
+         * @property [text]        The text which describes the table result
+         * @property [img]         An image file url that represents the table result
+         * @property [collection]  A named collection from which this result is drawn
+         * @property [resultId]    The _id of a Document within the collection this result references
+         * @property [weight=1]    The probabilistic weight of this result relative to other results
+         * @property [range]       A length 2 array of ascending integers which defines the range of dice roll
+         *                         totals which produce this drawn result
+         * @property [drawn=false] Has this result already been drawn (without replacement)
+         */
+        interface TableResultSource {
+            type: TableResultType;
+            text: string;
+            img: ImageFilePath;
+            collection: string;
+            resultId: string;
+            weight: number;
+            range: [number, number];
+            drawn: boolean;
+        }
+
+        class TableResultData<
+            TDocument extends documents.BaseTableResult = documents.BaseTableResult
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+        }
+
+        interface TableResultData extends TableResultSource {
+            readonly _source: TableResultSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/texture-data.d.ts b/node_modules/foundry-types/common/data/data/texture-data.d.ts
deleted file mode 100644
index a686381..0000000
--- a/node_modules/foundry-types/common/data/data/texture-data.d.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-declare module foundry {
-    module data {
-        interface TextureData {
-            /** The URL of the texture source. */
-            src: string | null;
-            /** The scale of the texture in the X dimension. */
-            scaleX: number;
-            /** The scale of the texture in the Y dimension. */
-            scaleY: number;
-            /** The X offset of the texture with (0,0) in the top left. */
-            offsetX: number;
-            /** The Y offset of the texture with (0,0) in the top left. */
-            offsetY: number;
-            /** An angle of rotation by which this texture is rotated around its center. */
-            rotation: number;
-            /** An optional color string used to tint the texture. */
-            tint: number | null;
-        }
-    }
-}
diff --git a/node_modules/foundry-types/common/data/data/tile-data.d.ts b/node_modules/foundry-types/common/data/data/tile-data.d.ts
new file mode 100644
index 0000000..edf970d
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/tile-data.d.ts
@@ -0,0 +1,57 @@
+declare module foundry {
+    module data {
+        /**
+         * The data schema for a Tile embedded document.
+         * @see BaseTile
+         *
+         * @property _id              The _id which uniquely identifies this Tile embedded document
+         * @property [img]            An image or video file path which this tile displays
+         * @property [width=0]        The pixel width of the tile
+         * @property [height=0]       The pixel height of the tile
+         * @property [x=0]            The x-coordinate position of the top-left corner of the tile
+         * @property [y=0]            The y-coordinate position of the top-left corner of the tile
+         * @property [z=100]          The z-index ordering of this tile relative to its siblings
+         * @property [rotation=0]     The angle of rotation for the tile between 0 and 360
+         * @property [alpha=1]        The tile opacity
+         * @property [tint]           A color to tint the tile
+         * @property [hidden=false]   Is the tile currently hidden?
+         * @property [locked=false]   Is the tile currently locked?
+         * @property [overhead=false] Is the tile an overhead tile?
+         * @property [occlusion]      The tile's occlusion settings
+         * @property [video]          The tile's video settings
+         * @property [flags={}]       An object of optional key/value flags
+         */
+        interface TileSource {
+            _id: string;
+            img: ImageFilePath | null;
+            width: number;
+            height: number;
+            x: number;
+            y: number;
+            z: number;
+            rotation: number;
+            alpha: number;
+            tint: HexColorString | null;
+            hidden: boolean;
+            locked: boolean;
+            overhead: boolean;
+            video: VideoSource;
+            occlusion: TileOcclusionSource;
+            flags: Record<string, unknown>;
+        }
+
+        class TileData<
+            TDocument extends documents.BaseTile = documents.BaseTile
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+        }
+
+        interface TileData extends TileSource {
+            readonly _source: TileSource;
+
+            occlusion: TileOcclusion;
+
+            video: VideoData;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/tile-occlusion.d.ts b/node_modules/foundry-types/common/data/data/tile-occlusion.d.ts
index 9e04990..a166521 100644
--- a/node_modules/foundry-types/common/data/data/tile-occlusion.d.ts
+++ b/node_modules/foundry-types/common/data/data/tile-occlusion.d.ts
@@ -6,10 +6,21 @@ declare module foundry {
          * @property alpha    The occlusion alpha between 0 and 1
          * @property [radius] An optional radius of occlusion used for RADIAL mode
          */
-        interface TileOcclusion {
+        interface TileOcclusionSource {
             mode: TileOcclusionMode;
             alpha: number;
             radius?: number;
         }
+
+        /** An inner-object which defines the schema for how Tile occlusion settings are defined */
+        class TileOcclusion<
+            TDocument extends documents.BaseTile = documents.BaseTile
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+        }
+
+        interface TileOcclusion extends TileOcclusionSource {
+            readonly _source: TileOcclusionSource;
+        }
     }
 }
diff --git a/node_modules/foundry-types/common/data/data/token-bar-data.d.ts b/node_modules/foundry-types/common/data/data/token-bar-data.d.ts
new file mode 100644
index 0000000..5955fe1
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/token-bar-data.d.ts
@@ -0,0 +1,21 @@
+declare namespace foundry {
+    module data {
+        /**
+         * An embedded data structure for the contents of a Token attribute bar.
+         * @property [attribute] The attribute path within the Token's Actor data which should be displayed
+         */
+        interface TokenBarSource {
+            attribute: string | null;
+        }
+
+        class TokenBarData<
+            TDocument extends documents.BaseToken | documents.BaseActor = documents.BaseToken | documents.BaseActor
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+        }
+
+        interface TokenBarData extends TokenBarSource {
+            readonly _source: TokenBarSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/data/data/token-data.d.ts b/node_modules/foundry-types/common/data/data/token-data.d.ts
new file mode 100644
index 0000000..3456b8e
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/token-data.d.ts
@@ -0,0 +1,183 @@
+declare module foundry {
+    module data {
+
+        interface TokenSource {
+            /** The Token _id which uniquely identifies it within its parent Scene */
+            _id: string;
+            /** The name used to describe the Token */
+            name: string;
+            /** The display mode of the Token nameplate, from CONST.TOKEN_DISPLAY_MODES */
+            displayName?: TokenDisplayMode
+            /** The _id of an Actor document which this Token represents */
+            actorId: string | null
+            /**  Does this Token uniquely represent a singular Actor, or is it one of many? */
+            actorLink?: boolean;
+            /** Token-level data which overrides the base data of the associated Actor */
+            actorData?: DeepPartial<ActorSource>;
+            /** The ActorDelta embedded document which stores the differences between this token and the base actor it represents. */
+            delta?: DeepPartial<ActorSource>
+            /** The token's texture on the canvas. */
+            texture: TextureData;
+            /**  The height of the Token in grid units
+             * @default 1
+             */
+            height?: number;
+            /** The width of the Token in grid units
+             * @default 1
+             */
+            width?: number;
+            /** The x-coordinate of the top-left corner of the Token
+             * @default 0
+            */
+            x?: number;
+            /**  The y-coordinate of the top-left corner of the Token
+             * @default 0
+            */
+             y?: number;
+            /** The vertical elevation of the Token, in distance units */
+            elevation?: number;
+            /** Prevent the Token image from visually rotating?
+             * @default false
+             */
+            lockRotation?: boolean;
+            /**
+             * Prevent the Token image from visually rotating?
+             * @default 0
+             */
+            rotation?: number
+            /** An array of effect icon paths which are displayed on the Token */
+            effects?: VideoFilePath[];
+            /** A single icon path which is displayed as an overlay on the Token */
+            overlayEffect?: VideoFilePath;
+            /** The opacity of the token image
+             * @default 1
+             */
+            alpha?: number
+            /** Is the Token currently hidden from player view?
+             * @default false
+             */
+            hidden?: boolean
+            /**
+             * A displayed Token disposition from CONST.TOKEN_DISPOSITIONS
+             * @default -1
+             */
+            disposition?: TokenDisposition;
+            /**
+             * The display mode of Token resource bars, from CONST.TOKEN_DISPLAY_MODES
+             * @default 0
+             */
+            displayBars?: TokenDisplayMode;
+            /**
+             * The configuration of the Token's primary resource bar
+             */
+            bar1?: TokenBarSource
+            /**
+             * The configuration of the Token's secondary resource bar
+             */
+            bar2?: TokenBarSource
+            /**
+             * Configuration of the light source that this Token emits
+             */
+            light?: TokenLightData
+            /**
+             * Configuration of sight and vision properties for the Token
+             */
+            sight: TokenSightData
+            /**
+             * An array of detection modes which are available to this Token
+             */
+            detectionModes?: TokenDetectionMode
+            /**
+             * An object of optional key/value flags
+             */
+            flags: Record<string, Record<string, unknown>>;
+        }
+
+        class TokenData<
+            TDocument extends documents.BaseToken = documents.BaseToken
+        > extends abstract.DocumentData<TDocument> {
+            bar1: TokenBarData<TDocument>;
+
+            bar2: TokenBarData<TDocument>;
+        }
+
+        interface TokenData extends Omit<TokenSource, "light" | "bar1" | "bar2"> {
+            readonly _source: TokenSource;
+
+            light: LightData<NonNullable<this["document"]>>;
+        }
+
+        namespace TokenData {
+            const schema: ReturnType<(typeof TokenData)["defineSchema"]>;
+
+            const _schema: ReturnType<(typeof TokenData)["defineSchema"]> | undefined;
+        }
+    }
+}
+
+declare interface TokenLightData {
+    brightLight: number;
+    dimLight: number;
+    lightAlpha: number;
+    lightAngle: number;
+    lightAnimation: {
+        type: string;
+        speed: number;
+        intensity: number;
+    };
+    lightColor: string;
+}
+
+declare interface TextureData {
+    src: VideoFilePath | null;
+    scaleX?: number;
+    scaleY?: number;
+    offsetX?: number;
+    offsetY?: number;
+    rotation?: number | null;
+    tint?: `#${string}`;
+}
+
+interface TokenSightData {
+  /**
+   * Should vision computation and rendering be active for this Token?
+  */
+  enabled: boolean
+  /**
+   * How far in distance units the Token can see without the aid of a light source
+  */
+  range: number
+  /**
+   * An angle at which the Token can see relative to their direction of facing
+   * @default 360
+  */
+  angle?: number
+  /**
+   * The vision mode which is used to render the appearance of the visible area
+   * @default 'basic'
+  */
+  visionMode?: string
+  /**
+   * A special color which applies a hue to the visible area
+  */
+  color?: string
+  /**
+   * A degree of attenuation which gradually fades the edges of the visible area
+  */
+  attenuation?: number
+  /**
+   * An advanced customization for the perceived brightness of the visible area
+   * @default 0
+  */
+  brightness?: number
+  /**
+   * An advanced customization of color saturation within the visible area
+   * @default 0
+  */
+  saturation?: number
+  /**
+   * An advanced customization for contrast within the visible area
+   * @default 0
+  */
+  contrast?: number
+}
\ No newline at end of file
diff --git a/node_modules/foundry-types/common/data/data/video-data.d.ts b/node_modules/foundry-types/common/data/data/video-data.d.ts
index ff35543..1ae7b5b 100644
--- a/node_modules/foundry-types/common/data/data/video-data.d.ts
+++ b/node_modules/foundry-types/common/data/data/video-data.d.ts
@@ -6,10 +6,22 @@ declare module foundry {
          * @property autoplay Should the video play automatically?
          * @property volume   The volume level of any audio that the video file contains
          */
-        interface VideoData {
+        interface VideoSource {
             loop: boolean;
             autoplay: boolean;
             volume: boolean;
         }
+
+        class VideoData<
+            TDocument extends abstract.Document = abstract.Document
+        > extends abstract.DocumentData<TDocument> {
+            static override defineSchema(): abstract.DocumentSchema;
+
+            protected override _initialize(): void;
+        }
+
+        interface VideoData extends VideoSource {
+            readonly _source: VideoSource;
+        }
     }
 }
diff --git a/node_modules/foundry-types/common/data/data/wall-data.d.ts b/node_modules/foundry-types/common/data/data/wall-data.d.ts
new file mode 100644
index 0000000..d814d51
--- /dev/null
+++ b/node_modules/foundry-types/common/data/data/wall-data.d.ts
@@ -0,0 +1,38 @@
+declare module foundry {
+    module data {
+        interface WallSource extends abstract.DocumentSource {
+            c: number[];
+            move?: number;
+            sense?: number;
+            dir?: number;
+            door?: number;
+            ds?: number;
+        }
+
+        /**
+         * The data schema for a Wall document.
+         * @see BaseWall
+         *
+         * @param data Initial data used to construct the data object
+         * @param [document]   The embedded document to which this data object belongs
+         *
+         * @property _id       The _id which uniquely identifies the embedded Wall document
+         * @property c         The wall coordinates, a length-4 array of finite numbers [x0,y0,x1,y1]
+         * @property [move=0]  The movement restriction type of this wall
+         * @property [sense=0] The sensory restriction type of this wall
+         * @property [dir=0]   The direction of effect imposed by this wall
+         * @property [door=0]  The type of door which this wall contains, if any
+         * @property [ds=0]    The state of the door this wall contains, if any
+         */
+        class WallData<
+            TDocument extends documents.BaseWall = documents.BaseWall
+        > extends abstract.DocumentData<TDocument> {
+            /** The data schema for a WallData object */
+            static override defineSchema(): abstract.DocumentSchema;
+        }
+
+        interface WallData extends WallSource {
+            readonly _source: WallSource;
+        }
+    }
+}
diff --git a/node_modules/foundry-types/common/documents/active-effect.d.ts b/node_modules/foundry-types/common/documents/active-effect.d.ts
index b58001b..49b61c6 100644
--- a/node_modules/foundry-types/common/documents/active-effect.d.ts
+++ b/node_modules/foundry-types/common/documents/active-effect.d.ts
@@ -5,14 +5,14 @@ declare module foundry {
          * @param data Initial data from which to construct the document.
          * @property data The constructed data object for the document.
          */
-        class BaseActiveEffect<
-            TParent extends BaseActor | BaseItem<BaseActor | null> | null
-        > extends abstract.Document<TParent> {
+        class BaseActiveEffect extends abstract.Document {
+            static override get schema(): typeof data.ActiveEffectData;
+
             static override get metadata(): ActiveEffectMetadata;

             protected override _preCreate(
-                data: PreDocumentId<ActiveEffectSource>,
-                options: DocumentModificationContext<TParent>,
+                data: PreDocumentId<data.ActiveEffectSource>,
+                options: DocumentModificationContext,
                 user: BaseUser
             ): Promise<void>;

@@ -23,66 +23,10 @@ declare module foundry {
             ): boolean;
         }

-        interface BaseActiveEffect<TParent extends BaseActor | BaseItem<BaseActor | null> | null>
-            extends abstract.Document<TParent> {
-            readonly _source: ActiveEffectSource;
-        }
-
-        /**
-         * @property _id         The EmbeddedEntity id of the Active Effect
-         * @property label       The label which describes this effect
-         * @property [disabled]  Is this effect currently disabled?
-         * @property [icon]      An image icon path for this effect
-         * @property [tint]      A hex color string to tint the effect icon
-         * @property [origin]    The UUID of an Entity or EmbeddedEntity which was the source of this effect
-         * @property [transfer]  Should this effect transfer automatically to an Actor when its Item becomes owned?
-         * @property flags       Additional key/value flags
-         */
-        interface ActiveEffectSource {
-            _id: string;
-            label: string;
-            duration: EffectDurationSource;
-            changes: EffectChangeSource[];
-            disabled: boolean;
-            icon: ImageFilePath;
-            tint: string;
-            origin: string | undefined;
-            transfer: boolean;
-            flags: Record<string, unknown>;
-        }
-
-        /**
-         * An embedded data structure which tracks the duration of an ActiveEffect.
-         * @property startTime    The world time when the active effect first started
-         * @property [seconds]    The maximum duration of the effect, in seconds
-         * @property [combat]     The _id of the CombatEncounter in which the effect first started
-         * @property [rounds]     The maximum duration of the effect, in combat rounds
-         * @property [turns]      The maximum duration of the effect, in combat turns
-         * @property [startRound] The round of the CombatEncounter in which the effect first started
-         * @property [startTurn]  The turn of the CombatEncounter in which the effect first started
-         */
-        interface EffectDurationSource {
-            startTime: number;
-            seconds: number | undefined;
-            combat?: string;
-            rounds: number | undefined;
-            turns: number | undefined;
-            startRound: number | null;
-            startTurn: number | null;
-        }
+        interface BaseActiveEffect {
+            readonly data: data.ActiveEffectData<this>;

-        /**
-         * An embedded data structure which defines the structure of a change applied by an ActiveEffect.
-         * @property key The attribute path in the Actor or Item data which the change modifies
-         * @property value The value of the change effect
-         * @property mode The modification mode with which the change is applied
-         * @property priority The priority level with which this change is applied
-         */
-        interface EffectChangeSource {
-            key: string;
-            value: string;
-            mode: ActiveEffectChangeMode;
-            priority: number;
+            readonly parent: BaseActor | BaseItem;
         }

         interface ActiveEffectMetadata extends abstract.DocumentMetadata {
diff --git a/node_modules/foundry-types/common/documents/actor.d.ts b/node_modules/foundry-types/common/documents/actor.d.ts
index 9798fa7..466c8ce 100644
--- a/node_modules/foundry-types/common/documents/actor.d.ts
+++ b/node_modules/foundry-types/common/documents/actor.d.ts
@@ -5,8 +5,8 @@ declare module foundry {
          * @param    data Initial data from which to construct the document.
          * @property data The constructed data object for the document.
          */
-        class BaseActor<TParent extends BaseToken | null = BaseToken | null> extends abstract.Document<TParent> {
-            prototypeToken: data.PrototypeToken;
+        class BaseActor extends abstract.Document {
+            prototypeToken: foundry.data.PrototypeToken;

             /** The default icon used for newly created Actor documents */
             static DEFAULT_ICON: ImageFilePath;
@@ -14,10 +14,10 @@ declare module foundry {
             static override get metadata(): ActorMetadata;

             /** A Collection of Item embedded Documents */
-            readonly items: abstract.EmbeddedCollection<BaseItem<this>>;
+            readonly items: abstract.EmbeddedCollection<documents.BaseItem>;

             /** A Collection of ActiveEffect embedded Documents */
-            readonly effects: abstract.EmbeddedCollection<BaseActiveEffect<this>>;
+            readonly effects: abstract.EmbeddedCollection<documents.BaseActiveEffect>;

             /**
              * Migrate the system data object to conform to data model defined by the current system version.
@@ -40,69 +40,31 @@ declare module foundry {

             protected override _preCreate(
                 data: PreDocumentId<this["_source"]>,
-                options: DocumentModificationContext<TParent>,
+                options: DocumentModificationContext,
                 user: BaseUser
             ): Promise<void>;

             protected override _preUpdate(
-                changed: DocumentUpdateData<this>,
-                options: DocumentModificationContext<TParent>,
+                changed: DocumentUpdateData<BaseActor>,
+                options: DocumentModificationContext,
                 user: BaseUser
             ): Promise<void>;
         }

-        interface BaseActor<TParent extends BaseToken | null = BaseToken | null> extends abstract.Document<TParent> {
+        interface BaseActor {
             flags: ActorFlags;
-            readonly _source: ActorSource;
+            readonly _source: data.ActorSource;
+            readonly parent: BaseToken | null;
             system: object;

             get documentName(): (typeof BaseActor)["metadata"]["name"];
         }

-        /**
-         * The data schema for a Actor document.
-         * @see BaseActor
-         *
-         * @param data Initial data used to construct the data object
-         * @param [document] The document to which this data object belongs
-         *
-         * @property _id          The _id which uniquely identifies this Actor document
-         * @property name         The name of this Actor
-         * @property type         An Actor subtype which configures the system data model applied
-         * @property [img]        An image file path which provides the artwork for this Actor
-         * @property [data]       The system data object which is defined by the system template.json model
-         * @property [token]      Default Token settings which are used for Tokens created from this Actor
-         * @property items        A Collection of Item embedded Documents
-         * @property effects      A Collection of ActiveEffect embedded Documents
-         * @property folder       The _id of a Folder which contains this Actor
-         * @property [sort]       The numeric sort value which orders this Actor relative to its siblings
-         * @property [ownership] An object which configures user permissions to this Actor
-         * @property [flags={}]   An object of optional key/value flags
-         */
-        interface ActorSource<
-            TType extends string = string,
-            TSystemSource extends object = object,
-            TItemSource extends ItemSource = ItemSource
-        > {
-            _id: string;
-            name: string;
-            type: TType;
-            img: ImageFilePath;
-            system: TSystemSource;
-            prototypeToken: data.PrototypeTokenSource;
-            items: TItemSource[];
-            effects: ActiveEffectSource[];
-            folder: string | null;
-            sort: number;
-            ownership: Record<string, DocumentOwnershipLevel>;
-            flags: ActorFlags;
-        }
-
-        interface ActorFlags extends DocumentFlags {
+        type ActorFlags = DocumentFlags & {
             core?: {
                 sourceId?: ActorUUID;
             };
-        }
+        };

         interface ActorMetadata extends abstract.DocumentMetadata {
             name: "Actor";
diff --git a/node_modules/foundry-types/common/documents/adventure.d.ts b/node_modules/foundry-types/common/documents/adventure.d.ts
deleted file mode 100644
index 2ea3282..0000000
--- a/node_modules/foundry-types/common/documents/adventure.d.ts
+++ /dev/null
@@ -1,75 +0,0 @@
-declare module foundry {
-    module documents {
-        /**
-         * The base User document, which is extended by both the server and client.
-         * This base User provides shared functionality which is consistent for both sides of the application.
-         * Each client who connects to a Foundry Virtual Tabletop session assumes the identity of one (and only one) User.
-         *
-         * @param data                 Initial data from which to construct the document.
-         * @property data The constructed data object for the document.
-         */
-        class BaseAdventure extends abstract.Document<null> {
-            static override get metadata(): AdventureMetadata;
-
-            /* ---------------------------------------- */
-            /*  Permissions                             */
-            /* ---------------------------------------- */
-
-            /** Test whether the User has a GAMEMASTER or ASSISTANT role in this World? */
-            get isGM(): boolean;
-
-            /**
-             * Test whether the User is able to perform a certain permission action.
-             * The provided permission string may pertain to an explicit permission setting or a named user role.
-             * Alternatively, Gamemaster users are assumed to be allowed to take all actions.
-             *
-             * @param action The action to test
-             * @return Does the user have the ability to perform this action?
-             */
-            can(action: UserAction): boolean;
-
-            getUserLevel(user: BaseUser): DocumentOwnershipLevel;
-
-            /**
-             * Test whether the User has at least a specific permission
-             * @param permission The permission name from USER_PERMISSIONS to test
-             * @return Does the user have at least this permission
-             */
-            hasPermission(permission: UserPermission): boolean;
-
-            /**
-             * Test whether the User has at least the permission level of a certain role
-             * @param role The role name from USER_ROLES to test
-             * @param [exact] Require the role match to be exact
-             * @return Does the user have at this role level (or greater)?
-             */
-            hasRole(role: UserRole | UserRoleName, { exact }?: { exact: boolean }): boolean;
-        }
-
-        interface BaseAdventure extends abstract.Document<null> {
-            readonly _source: AdventureSource;
-
-            get documentName(): "Adventure";
-        }
-
-        interface AdventureMetadata extends abstract.DocumentMetadata {
-            name: "Adventure";
-            collection: "Adventures";
-            label: "DOCUMENT.Adventure";
-            isPrimary: true;
-        }
-
-        interface AdventureSource {
-            _id: string;
-            avatar: ImageFilePath;
-            img: ImageFilePath;
-            character: string | null;
-            color: HexColorString;
-            hotbar: Record<number, string>;
-            name: string;
-            password: string;
-            role: UserRole;
-            flags: DocumentFlags;
-        }
-    }
-}
diff --git a/node_modules/foundry-types/common/documents/ambient-light.d.ts b/node_modules/foundry-types/common/documents/ambient-light.d.ts
index aa04778..14b0593 100644
--- a/node_modules/foundry-types/common/documents/ambient-light.d.ts
+++ b/node_modules/foundry-types/common/documents/ambient-light.d.ts
@@ -1,42 +1,20 @@
 declare module foundry {
     module documents {
         /** The AmbientLight embedded document model. */
-        class BaseAmbientLight<TParent extends BaseScene | null> extends abstract.Document<TParent> {
-            static override get metadata(): AmbientLightMetadata;
+        class BaseAmbientLight extends abstract.Document {
+            static override get schema(): typeof data.AmbientLightData;

-            config: data.LightSource;
+            static override get metadata(): AmbientLightMetadata;

             protected override _initialize(): void;
         }

-        interface BaseAmbientLight<TParent extends BaseScene | null> extends abstract.Document<TParent> {
-            readonly _source: AmbientLightSource;
-        }
+        interface BaseAmbientLight {
+            config: foundry.data.LightData;
+
+            readonly data: data.AmbientLightData<this>;

-        /**
-         * The data schema for a AmbientLight embedded document.
-         *
-         * @property _id            The _id which uniquely identifies this BaseAmbientLight embedded document
-         * @property [x=0]          The x-coordinate position of the origin of the light
-         * @property [y=0]          The y-coordinate position of the origin of the light
-         * @property [rotation=0]   The angle of rotation for the tile between 0 and 360
-         * @property [walls=true]   Whether or not this light source is constrained by Walls
-         * @property [vision=false] Whether or not this light source provides a source of vision
-         * @property config         Light configuration data
-         * @property [hidden=false] Is the light source currently hidden?
-         * @property [flags={}]     An object of optional key/value flags
-         */
-        interface AmbientLightSource {
-            _id: string;
-            t: string;
-            x: number;
-            y: number;
-            rotation: number;
-            walls: boolean;
-            vision: boolean;
-            config: data.LightSource;
-            hidden: boolean;
-            flags: Record<string, unknown>;
+            readonly parent: BaseScene | null;
         }

         interface AmbientLightMetadata extends abstract.DocumentMetadata {
diff --git a/node_modules/foundry-types/common/documents/ambient-sound.d.ts b/node_modules/foundry-types/common/documents/ambient-sound.d.ts
index 7e5085a..5ebd9ff 100644
--- a/node_modules/foundry-types/common/documents/ambient-sound.d.ts
+++ b/node_modules/foundry-types/common/documents/ambient-sound.d.ts
@@ -1,12 +1,16 @@
 declare module foundry {
     module documents {
         /** The AmbientSound embedded document model. */
-        class BaseAmbientSound<TParent extends BaseScene | null> extends abstract.Document<TParent> {
+        class BaseAmbientSound extends abstract.Document {
+            static override get schema(): typeof data.AmbientSoundData;
+
             static override get metadata(): AmbientSoundMetadata;
         }

-        interface BaseAmbientSound<TParent extends BaseScene | null> extends abstract.Document<TParent> {
-            readonly _source: AmbientSoundSource;
+        interface BaseAmbientSound {
+            readonly data: data.AmbientSoundData<this>;
+
+            readonly parent: BaseScene | null;
         }

         interface AmbientSoundMetadata extends abstract.DocumentMetadata {
@@ -16,34 +20,5 @@ declare module foundry {
             isEmbedded: true;
             types: ["l", "g"];
         }
-
-        /**
-         * The data schema for a AmbientSound embedded document.
-         * @see BaseAmbientSound
-         *
-         * @param data Initial data used to construct the data object
-         * @param [document] The document to which this data object belongs
-         *
-         * @property _id             The _id which uniquely identifies this AmbientSound document
-         * @property path            The audio file path that is played by this sound
-         * @property [playing=false] Is this sound currently playing?
-         * @property [repeat=false]  Does this sound loop?
-         * @property [volume=0.5]    The audio volume of the sound, from 0 to 1
-         * @property [flags={}]      An object of optional key/value flags
-         */
-        interface AmbientSoundSource {
-            _id: string;
-            type: string;
-            x: number;
-            y: number;
-            radius: number;
-            path: AudioFilePath;
-            repeat: boolean;
-            volume: number;
-            easing: boolean;
-            hidden: boolean;
-            darkness: data.DarknessActivation;
-            flags: DocumentFlags;
-        }
     }
 }
diff --git a/node_modules/foundry-types/common/documents/cards.d.ts b/node_modules/foundry-types/common/documents/cards.d.ts
index 76a52a0..45d3b96 100644
--- a/node_modules/foundry-types/common/documents/cards.d.ts
+++ b/node_modules/foundry-types/common/documents/cards.d.ts
@@ -1,11 +1,13 @@
 declare module foundry {
     module documents {
         /** The base Cards definition which defines common behavior of an Cards document shared by both client and server. */
-        class BaseCards extends abstract.Document<null> {
+        class BaseCards extends abstract.Document {
+            static override get schema(): ConstructorOf<abstract.DocumentData>;
+
             static override get metadata(): abstract.DocumentMetadata;

             /** The sub-type of Card. */
-            readonly type: string;
+            get type(): string;

             /** Is a User able to create a new embedded Card document within this parent? */
             protected static _canCreate(user: BaseUser, doc: BaseCards, data: object): boolean;
@@ -20,47 +22,10 @@ declare module foundry {
             ): boolean;
         }

-        interface BaseCards extends abstract.Document<null> {
-            readonly _source: CardsSource;
+        interface BaseCards extends abstract.Document {
+            readonly data: data.CardsData<this>;

             get documentName(): "Cards";
         }
-
-        /**
-         * The data schema of a stack of multiple Cards.
-         * Each stack can represent a Deck, a Hand, or a Pile.
-         */
-        interface CardsSource<> {
-            /** The _id which uniquely identifies this stack of Cards document */
-            _id: string;
-            /** The text name of this stack */
-            name: string;
-            /** The type of this stack, in BaseCards.metadata.types */
-            type: string;
-            /** A text description of this stack */
-            description: string;
-            /** An image or video which is used to represent the stack of cards */
-            img: VideoFilePath;
-            /** Game system data which is defined by the system template.json model */
-            data: object;
-            /** A collection of Card documents which currently belong to this stack */
-            cards: object;
-            /** The visible width of this stack */
-            width: number;
-            /** The visible height of this stack */
-            height: number;
-            /** The angle of rotation of this stack */
-            rotation: string;
-            /** Whether or not to publicly display the number of cards in this stack */
-            displayCount?: boolean;
-            /** The _id of a Folder which contains this document */
-            folder?: string | null;
-            /** The sort order of this stack relative to others in its parent collection */
-            sort: number;
-            /** An object which configures user permissions to this stack */
-            ownership: Record<string, DocumentOwnershipLevel>;
-            /** An object of optional key/value flags */
-            flags: Record<string, Record<string, unknown>>;
-        }
     }
 }
diff --git a/node_modules/foundry-types/common/documents/chat-message.d.ts b/node_modules/foundry-types/common/documents/chat-message.d.ts
index 4e36e63..12163b4 100644
--- a/node_modules/foundry-types/common/documents/chat-message.d.ts
+++ b/node_modules/foundry-types/common/documents/chat-message.d.ts
@@ -8,82 +8,47 @@ declare module foundry {
          * @param data    Initial data from which to construct the document.
          * @property data The constructed data object for the document.
          */
-        class BaseChatMessage extends abstract.Document<null> {
+        class BaseChatMessage extends abstract.Document {
             blind: boolean;
             content: string;
-            flags: ChatMessageFlags;
+            flags: foundry.data.ChatMessageFlags;
             rolls: Rolled<Roll>[];
-            speaker: ChatSpeakerData;
+            speaker: foundry.data.ChatSpeakerSource;
             type: ChatMessageType;
             whisper: string[];

+            static override get schema(): typeof data.ChatMessageData;
+
             static override get metadata(): ChatMessageMetadata;

             /** Is a user able to create a new chat message? */
-            protected static _canCreate(user: BaseUser, doc: BaseChatMessage): boolean;
+            protected static _canCreate(user: documents.BaseUser, doc: documents.BaseChatMessage): boolean;

             /** Is a user able to update an existing chat message? */
-            protected static _canUpdate(user: BaseUser, doc: BaseChatMessage, data: ChatMessageSource): boolean;
+            protected static _canUpdate(
+                user: documents.BaseUser,
+                doc: documents.BaseChatMessage,
+                data: data.ChatMessageData
+            ): boolean;

             /** Is a user able to delete an existing chat message? */
-            protected static _canDelete(user: BaseUser, doc: BaseChatMessage): boolean;
+            protected static _canDelete(user: documents.BaseUser, doc: documents.BaseChatMessage): boolean;

-            static override createDocuments<TDocument extends abstract.Document<null>>(
-                this: ConstructorOf<TDocument>,
-                data?: (TDocument | PreCreate<TDocument["_source"]>)[],
+            static createDocuments<T extends abstract.Document>(
+                this: ConstructorOf<T>,
+                data?: (T | PreCreate<T["_source"]>)[],
                 context?: ChatMessageModificationContext
-            ): Promise<TDocument[]>;
+            ): Promise<T[]>;
         }

-        interface BaseChatMessage extends abstract.Document<null> {
-            readonly _source: ChatMessageSource;
+        interface BaseChatMessage {
+            readonly parent: null;

             get documentName(): "ChatMessage";
         }

-        interface ChatMessageSource {
-            _id: string;
-            type: ChatMessageType;
-            user: string;
-            timestamp: string;
-            flavor?: string;
-            content: string;
-            speaker: ChatSpeakerData;
-            whisper: string[];
-            blind: boolean;
-            rolls: (string | RollJSON)[];
-            sound: AudioFilePath;
-            emote?: boolean;
-            flags: ChatMessageFlags;
-        }
-
-        interface ChatMessageFlags extends DocumentFlags {
-            core?: {
-                canPopout?: boolean;
-                initiativeRoll?: boolean;
-                RollTable?: string;
-            };
-        }
-
-        /**
-         * The data schema for an embedded Chat Speaker object.
-         * @extends DocumentData
-         * @memberof data
-         * @see ChatMessageData
-         *
-         * @param data Initial data used to construct the data object
-         * @param [document] The document to which this data object belongs
-         *
-         * @property [scene] The _id of the Scene where this message was created
-         * @property [actor] The _id of the Actor who generated this message
-         * @property [token] The _id of the Token who generated this message
-         * @property [alias] An overridden alias name used instead of the Actor or Token name
-         */
-        interface ChatSpeakerData {
-            scene?: string | null;
-            actor?: string | null;
-            token?: string | null;
-            alias: string;
+        interface ChatMessageModificationContext extends DocumentModificationContext<ChatMessage> {
+            rollMode: RollMode;
         }

         interface ChatMessageMetadata extends abstract.DocumentMetadata {
@@ -99,7 +64,3 @@ declare module foundry {
         }
     }
 }
-
-declare interface ChatMessageModificationContext extends DocumentModificationContext<null> {
-    rollMode?: RollMode | "roll";
-}
diff --git a/node_modules/foundry-types/common/documents/combat.d.ts b/node_modules/foundry-types/common/documents/combat.d.ts
index 3cc4c1b..97bf757 100644
--- a/node_modules/foundry-types/common/documents/combat.d.ts
+++ b/node_modules/foundry-types/common/documents/combat.d.ts
@@ -1,20 +1,22 @@
 declare module foundry {
     module documents {
         /** The Combat document model. */
-        class BaseCombat extends abstract.Document<null> {
-            static override get metadata(): CombatMetadata;
+        class BaseCombat extends abstract.Document {
+            static override get schema(): typeof data.CombatData;

-            flags: DocumentFlags;
+            static override get metadata(): CombatMetadata;

             /** A reference to the Collection of Combatant instances in the Combat document, indexed by id. */
-            readonly combatants: abstract.EmbeddedCollection<BaseCombatant<this>>;
+            readonly combatants: this["data"]["combatants"];

             /** Is a user able to update an existing Combat? */
-            protected static _canUpdate(user: documents.BaseUser, doc: BaseCombat, data: CombatSource): boolean;
+            protected static _canUpdate(user: documents.BaseUser, doc: BaseCombat, data: data.CombatData): boolean;
         }

-        interface BaseCombat extends abstract.Document<null> {
-            readonly _source: CombatSource;
+        interface BaseCombat {
+            readonly data: data.CombatData<this, BaseCombatant>;
+
+            readonly parent: null;

             get documentName(): "Combat";
         }
@@ -33,27 +35,5 @@ declare module foundry {
                 delete: "ASSISTANT";
             };
         }
-
-        /**
-         * The data schema for a Combat document.
-         * @property _id            The _id which uniquely identifies this Combat document
-         * @property scene          The _id of a Scene within which this Combat occurs
-         * @property combatants     A Collection of Combatant embedded Documents
-         * @property [active=false] Is the Combat encounter currently active?
-         * @property [round=0]      The current round of the Combat encounter
-         * @property [turn=0]       The current turn in the Combat round
-         * @property [sort=0]       The current sort order of this Combat relative to others in the same Scene
-         * @property [flags={}]     An object of optional key/value flags
-         */
-        interface CombatSource {
-            _id: string;
-            scene: string;
-            combatants: CombatantSource[];
-            active: boolean;
-            round: number;
-            turn: number;
-            sort: number;
-            flags: DocumentFlags;
-        }
     }
 }
diff --git a/node_modules/foundry-types/common/documents/combatant.d.ts b/node_modules/foundry-types/common/documents/combatant.d.ts
index 7159970..8e1e773 100644
--- a/node_modules/foundry-types/common/documents/combatant.d.ts
+++ b/node_modules/foundry-types/common/documents/combatant.d.ts
@@ -1,21 +1,23 @@
 declare module foundry {
     module documents {
         /** The Combat document model. */
-        class BaseCombatant<TParent extends BaseCombat | null> extends abstract.Document<TParent> {
-            static override get metadata(): CombatantMetadata;
+        class BaseCombatant extends abstract.Document {
+            static override get schema(): typeof data.CombatantData;

-            flags: DocumentFlags;
+            static override get metadata(): CombatantMetadata;

             /** Is a user able to update an existing Combatant? */
             protected static _canUpdate(
                 user: documents.BaseUser,
-                doc: BaseCombatant<BaseCombat | null>,
-                data: CombatantSource
+                doc: BaseCombatant,
+                data: data.CombatantData
             ): boolean;
         }

-        interface BaseCombatant<TParent extends BaseCombat | null> extends CombatantSource, abstract.Document<TParent> {
-            readonly _source: CombatantSource;
+        interface BaseCombatant extends data.CombatantSource {
+            readonly data: foundry.data.CombatantData<this>;
+
+            readonly parent: BaseCombat | null;
         }

         interface CombatantMetadata extends abstract.DocumentMetadata {
@@ -29,27 +31,5 @@ declare module foundry {
                 delete: "ASSISTANT";
             };
         }
-
-        /**
-         * The data schema for a Combat document.
-         * @property _id              The _id which uniquely identifies this Combatant embedded document
-         * @property [tokenId]        The _id of a Token associated with this Combatant
-         * @property [name]           A customized name which replaces the name of the Token in the tracker
-         * @property [img]            A customized image which replaces the Token image in the tracker
-         * @property [initiative]     The initiative score for the Combatant which determines its turn order
-         * @property [hidden=false]   Is this Combatant currently hidden?
-         * @property [defeated=false] Has this Combatant been defeated?
-         * @property [flags={}]       An object of optional key/value flags
-         */
-        interface CombatantSource {
-            _id: string | null;
-            actorId: string;
-            tokenId: string;
-            img: VideoFilePath;
-            initiative: number | null;
-            hidden: boolean;
-            defeated: boolean;
-            flags: DocumentFlags;
-        }
     }
 }
diff --git a/node_modules/foundry-types/common/documents/drawing.d.ts b/node_modules/foundry-types/common/documents/drawing.d.ts
index 5e7386b..6573aec 100644
--- a/node_modules/foundry-types/common/documents/drawing.d.ts
+++ b/node_modules/foundry-types/common/documents/drawing.d.ts
@@ -1,76 +1,19 @@
 declare module foundry {
     module documents {
         /** The Drawing embedded document model. */
-        class BaseDrawing<TParent extends BaseScene | null> extends abstract.Document<TParent> {
+        class BaseDrawing extends abstract.Document {
+            static override get schema(): typeof data.DrawingData;
+
             static override get metadata(): DrawingMetadata;

             /** Is a user able to update or delete an existing Drawing document? */
-            protected static _canModify(
-                user: BaseUser,
-                doc: BaseDrawing<BaseScene | null>,
-                data: DrawingSource
-            ): boolean;
+            protected static _canModify(user: BaseUser, doc: BaseDrawing, data: data.DrawingData): boolean;
         }

-        interface BaseDrawing<TParent extends BaseScene | null> extends abstract.Document<TParent> {
-            readonly _source: DrawingSource;
-        }
+        interface BaseDrawing {
+            readonly data: data.DrawingData<this>;

-        /**
-         * The data schema for a Drawing embedded document.
-         * @see BaseDrawing
-         *
-         * @param data       Initial data used to construct the data object
-         * @param [document] The embedded document to which this data object belongs
-         *
-         * @property t                    The value in CONST.DRAWING_TYPES which defines the geometry type of this drawing
-         * @property x                    The x-coordinate position of the top-left corner of the drawn shape
-         * @property y                    The y-coordinate position of the top-left corner of the drawn shape
-         * @property width                The pixel width of the drawing figure
-         * @property height               The pixel height of the drawing figure
-         * @property [rotation=0]         The angle of rotation for the drawing figure
-         * @property [z=0]                The z-index of this drawing relative to other siblings
-         * @property [points]             An array of points [x,y] which define polygon vertices
-         * @property [bezierFactor=0]     An amount of bezier smoothing applied, between 0 and 1
-         * @property [fillType=0]         The fill type of the drawing shape, a value from CONST.DRAWING_FILL_TYPES
-         * @property [fillColor]          An optional color string with which to fill the drawing geometry
-         * @property [fillAlpha=0.5]      The opacity of the fill applied to the drawing geometry
-         * @property [strokeWidth=8]      The width in pixels of the boundary lines of the drawing geometry
-         * @property [strokeColor]        The color of the boundary lines of the drawing geometry
-         * @property [strokeAlpha=1]      The opacity of the boundary lines of the drawing geometry
-         * @property [texture]            The path to a tiling image texture used to fill the drawing geometry
-         * @property [text]               Optional text which is displayed overtop of the drawing
-         * @property [fontFamily=Signika] The font family used to display text within this drawing
-         * @property [fontSize=48]        The font size used to display text within this drawing
-         * @property [textColor=#FFFFFF]  The color of text displayed within this drawing
-         * @property [textAlpha=1]        The opacity of text displayed within this drawing
-         * @property [hidden=false]       Is the drawing currently hidden?
-         * @property [locked=false]       Is the drawing currently locked?
-         */
-        interface DrawingSource {
-            t: DrawingShapeType;
-            x: number;
-            y: number;
-            width: number;
-            height: number;
-            rotation?: number;
-            z?: number;
-            points?: [number, number][];
-            bezierFactor?: number;
-            fillType?: number;
-            fillColor?: string;
-            fillAlpha?: number;
-            strokeWidth?: number;
-            strokeColor?: number;
-            strokeAlpha?: number;
-            texture?: string;
-            text?: string;
-            fontFamily?: string;
-            fontSize?: number;
-            textColor?: string;
-            textAlpha?: number;
-            hidden?: boolean;
-            locked?: boolean;
+            readonly parent: BaseScene | null;
         }

         interface DrawingMetadata extends abstract.DocumentMetadata {
diff --git a/node_modules/foundry-types/common/documents/fog-exploration.d.ts b/node_modules/foundry-types/common/documents/fog-exploration.d.ts
index 38f6419..caf1ee6 100644
--- a/node_modules/foundry-types/common/documents/fog-exploration.d.ts
+++ b/node_modules/foundry-types/common/documents/fog-exploration.d.ts
@@ -1,12 +1,14 @@
 declare module foundry {
     module documents {
         /** The FogExploration Document model. */
-        class BaseFogExploration extends abstract.Document<null> {
+        class BaseFogExploration extends foundry.abstract.Document {
+            static override get schema(): typeof data.FogExplorationData;
+
             static override get metadata(): FogExplorationMetadata;

             protected override _preUpdate(
                 changed: DocumentUpdateData<this>,
-                options: DocumentModificationContext<null>,
+                options: DocumentModificationContext,
                 user: BaseUser
             ): Promise<void>;

@@ -14,8 +16,10 @@ declare module foundry {
             protected static _canUserModify<T extends BaseFogExploration>(user: BaseUser, doc: T): boolean;
         }

-        interface BaseFogExploration extends abstract.Document<null> {
-            readonly _source: FogExplorationSource;
+        interface BaseFogExploration {
+            readonly data: data.FogExplorationData<this>;
+
+            readonly parent: null;
         }

         interface FogExplorationMetadata extends abstract.DocumentMetadata {
@@ -29,23 +33,5 @@ declare module foundry {
                 delete: (typeof BaseFogExploration)["_canUserModify"];
             };
         }
-
-        /**
-         * The data schema for a FogExploration document.
-         * @property _id       The _id which uniquely identifies this FogExploration document
-         * @property scene     The _id of the Scene document to which this fog applies
-         * @property user      The _id of the User document to which this fog applies
-         * @property explored  The base64 png image of the explored fog polygon
-         * @property positions The object of scene positions which have been explored at a certain vision radius
-         * @property timestamp The timestamp at which this fog exploration was last updated
-         */
-        interface FogExplorationSource {
-            _id: string;
-            scene: string;
-            user: string;
-            explored: string;
-            position: unknown;
-            timestamp: number;
-        }
     }
 }
diff --git a/node_modules/foundry-types/common/documents/folder.d.ts b/node_modules/foundry-types/common/documents/folder.d.ts
index d8cc35a..4ffd5a5 100644
--- a/node_modules/foundry-types/common/documents/folder.d.ts
+++ b/node_modules/foundry-types/common/documents/folder.d.ts
@@ -6,42 +6,18 @@ declare module foundry {
          * @param data Initial data from which to construct the document.
          * @property data The constructed data object for the document.
          */
-        class BaseFolder extends abstract.Document<null> {
+        class BaseFolder extends abstract.Document {
+            static override get schema(): typeof data.FolderData;
+
             static override get metadata(): FolderMetadata;
         }

-        interface BaseFolder extends abstract.Document<null> {
-            readonly _source: FolderSource;
+        interface BaseFolder {
+            readonly data: data.FolderData<this>;

-            get documentName(): (typeof BaseFolder)["metadata"]["name"];
-        }
+            readonly parent: null;

-        /**
-         * The data schema for a Folder document.
-         *
-         * @param data Initial data used to construct the data object
-         * @param [document] The document to which this data object belongs
-         *
-         * @property _id           The _id which uniquely identifies this Folder document
-         * @property name          The name of this Folder
-         * @property type          The document type which this Folder contains, from CONST.FOLDER_DOCUMENT_TYPES
-         * @property [description] An HTML description of the contents of this folder
-         * @property [parent]      The _id of a parent Folder which contains this Folder
-         * @property [sorting=a]   The sorting mode used to organize documents within this Folder, in ["a", "m"]
-         * @property [sort]        The numeric sort value which orders this Folder relative to its siblings
-         * @property [color]        A color string used for the background color of this Folder
-         * @property [flags={}]    An object of optional key/value flags
-         */
-        interface FolderSource {
-            _id: string;
-            name: string;
-            type: FolderDocumentType;
-            description: string;
-            parent: string | null;
-            sorting: "a" | "m";
-            sort: number;
-            color: HexColorString;
-            flags: DocumentFlags;
+            get documentName(): (typeof BaseFolder)["metadata"]["name"];
         }

         interface FolderMetadata extends abstract.DocumentMetadata {
diff --git a/node_modules/foundry-types/common/documents/index.d.ts b/node_modules/foundry-types/common/documents/index.d.ts
index 43ae9fd..6ea6950 100644
--- a/node_modules/foundry-types/common/documents/index.d.ts
+++ b/node_modules/foundry-types/common/documents/index.d.ts
@@ -1,6 +1,5 @@
 import "./active-effect";
 import "./actor";
-import "./adventure";
 import "./ambient-light";
 import "./ambient-sound";
 import "./cards";
diff --git a/node_modules/foundry-types/common/documents/item.d.ts b/node_modules/foundry-types/common/documents/item.d.ts
index 6c237a8..59a8899 100644
--- a/node_modules/foundry-types/common/documents/item.d.ts
+++ b/node_modules/foundry-types/common/documents/item.d.ts
@@ -1,7 +1,7 @@
 declare module foundry {
     module documents {
         /** The Item document model. */
-        class BaseItem<TParent extends BaseActor | null> extends abstract.Document<TParent> {
+        class BaseItem extends abstract.Document {
             sort: number;

             /** The default icon used for newly created Item documents */
@@ -10,7 +10,7 @@ declare module foundry {
             static override get metadata(): ItemMetadata;

             /** A Collection of ActiveEffect embedded Documents */
-            readonly effects: abstract.EmbeddedCollection<documents.BaseActiveEffect<this>>;
+            readonly effects: abstract.EmbeddedCollection<documents.BaseActiveEffect>;

             override canUserModify(user: BaseUser, action: UserAction, data?: DocumentUpdateData<this>): boolean;

@@ -40,45 +40,16 @@ declare module foundry {
             }): this["system"];
         }

-        interface BaseItem<TParent extends BaseActor | null> extends abstract.Document<TParent> {
+        interface BaseItem {
             flags: ItemFlags;
-            readonly _source: ItemSource;
+            readonly _source: data.ItemSource;
+            readonly parent: BaseActor | null;
             system: object;

             get documentName(): (typeof BaseItem)["metadata"]["name"];
         }

-        /**
-         * The data schema for a Item document.
-         * @see BaseItem
-         *
-         * @param data Initial data used to construct the data object
-         * @param [document] The document to which this data object belongs
-         *
-         * @property _id          The _id which uniquely identifies this Item document
-         * @property name         The name of this Item
-         * @property type         An Item subtype which configures the system data model applied
-         * @property [img]        An image file path which provides the artwork for this Item
-         * @property [data]       The system data object which is defined by the system template.json model
-         * @property folder       The _id of a Folder which contains this Item
-         * @property [sort]       The numeric sort value which orders this Item relative to its siblings
-         * @property [ownership] An object which configures user permissions to this Item
-         * @property [flags={}]   An object of optional key/value flags
-         */
-        interface ItemSource<TType extends string = string, TSystemSource extends object = object> {
-            _id: string;
-            name: string;
-            type: TType;
-            img: ImageFilePath;
-            system: TSystemSource;
-            effects: ActiveEffectSource[];
-            folder?: string | null;
-            sort: number;
-            ownership: Record<string, DocumentOwnershipLevel>;
-            flags: ItemFlags;
-        }
-
-        interface ItemFlags extends DocumentFlags {
+        interface ItemFlags {
             core?: {
                 sourceId?: ItemUUID;
             };
diff --git a/node_modules/foundry-types/common/documents/journal-entry-page.d.ts b/node_modules/foundry-types/common/documents/journal-entry-page.d.ts
index cfc0ce4..9d2acc4 100644
--- a/node_modules/foundry-types/common/documents/journal-entry-page.d.ts
+++ b/node_modules/foundry-types/common/documents/journal-entry-page.d.ts
@@ -29,15 +29,16 @@ declare module foundry {
          * @property [ownership]  An object which configures the ownership of this page.
          * @property [flags]      An object of optional key/value flags.
          */
-        interface JournalEntryPageSource {
+        interface JournalEntryPageSource<TType extends string = string, TSystemSource extends object = object> {
             _id: string;
             name: string;
+            type: TType;
             title: JournalEntryPageTitleData;
             image: JournalEntryPageImageData;
             text: JournalEntryPageTextData;
             video: JournalEntryPageVideoData;
             src?: string | null;
-            system: object; // will be filled out later
+            system: TSystemSource;
             sort: number;
             ownership?: Record<string, DocumentOwnershipLevel>;
             flags: object; // will be filled out later
diff --git a/node_modules/foundry-types/common/documents/journal-entry.d.ts b/node_modules/foundry-types/common/documents/journal-entry.d.ts
index 4b7292b..dca9eda 100644
--- a/node_modules/foundry-types/common/documents/journal-entry.d.ts
+++ b/node_modules/foundry-types/common/documents/journal-entry.d.ts
@@ -1,13 +1,15 @@
 declare module foundry {
     module documents {
         /** The JournalEntry document model. */
-        class BaseJournalEntry extends abstract.Document<null> {
+        class BaseJournalEntry extends abstract.Document {
             static override get metadata(): JournalEntryMetadata;

             readonly pages: abstract.EmbeddedCollection<BaseJournalEntryPage<this>>;
         }

-        interface BaseJournalEntry extends abstract.Document<null> {
+        interface BaseJournalEntry {
+            readonly parent: null;
+
             readonly _source: JournalEntrySource;

             get documentName(): (typeof BaseJournalEntry)["metadata"]["name"];
@@ -29,7 +31,7 @@ declare module foundry {
          * @property [permission] An object which configures user permissions to this JournalEntry
          * @property [flags={}]   An object of optional key/value flags
          */
-        interface JournalEntrySource {
+        interface JournalEntrySource extends abstract.DocumentSource {
             _id: string;
             name: string;
             pages: JournalEntryPageSource[];
diff --git a/node_modules/foundry-types/common/documents/macro.d.ts b/node_modules/foundry-types/common/documents/macro.d.ts
index c7b3b48..b3e52e7 100644
--- a/node_modules/foundry-types/common/documents/macro.d.ts
+++ b/node_modules/foundry-types/common/documents/macro.d.ts
@@ -1,41 +1,30 @@
 declare module foundry {
     module documents {
         /** The Macro document model. */
-        class BaseMacro extends abstract.Document<null> {
+        class BaseMacro extends abstract.Document {
+            static override get schema(): typeof data.MacroData;
+
             static override get metadata(): MacroMetadata;

             protected override _preCreate(
-                data: PreDocumentId<MacroSource>,
-                options: DocumentModificationContext<null>,
+                data: PreDocumentId<foundry.data.MacroSource>,
+                options: DocumentModificationContext,
                 user: BaseUser
             ): Promise<void>;

             /** Is a user able to update an existing Macro document? */
-            protected static _canUpdate(user: BaseUser, doc: BaseMacro, data: MacroSource): boolean;
+            protected static _canUpdate(user: BaseUser, doc: BaseMacro, data: data.MacroData): boolean;

             /** Is a user able to delete an existing Macro document? */
             protected static _canDelete(user: BaseUser, doc: BaseMacro): boolean;
         }

-        interface BaseMacro extends abstract.Document<null> {
-            readonly _source: MacroSource;
+        interface BaseMacro {
+            readonly data: data.MacroData<this>;

-            get documentName(): (typeof BaseMacro)["metadata"]["name"];
-        }
+            readonly parent: null;

-        interface MacroSource {
-            _id: string;
-            name: string;
-            type: "chat" | "script";
-            img: ImageFilePath;
-            actorIds: string[];
-            author: string;
-            command: string;
-            scope: string;
-            folder?: string | null;
-            sort: number;
-            ownership: Record<string, DocumentOwnershipLevel>;
-            flags: DocumentFlags;
+            get documentName(): (typeof BaseMacro)["metadata"]["name"];
         }

         interface MacroMetadata extends abstract.DocumentMetadata {
diff --git a/node_modules/foundry-types/common/documents/measured-template.d.ts b/node_modules/foundry-types/common/documents/measured-template.d.ts
index ea7aab0..b2864ae 100644
--- a/node_modules/foundry-types/common/documents/measured-template.d.ts
+++ b/node_modules/foundry-types/common/documents/measured-template.d.ts
@@ -1,13 +1,10 @@
 declare module foundry {
     module documents {
         /** The MeasuredTemplate embedded document model. */
-        class BaseMeasuredTemplate<TParent extends BaseScene | null> extends abstract.Document<TParent> {
-            static override get metadata(): MeasuredTemplateMetadata;
+        class BaseMeasuredTemplate extends abstract.Document {
+            static override get schema(): typeof data.MeasuredTemplateData;

-            readonly t: MeasuredTemplateType;
-            width: number;
-            distance: number;
-            direction: number;
+            static override get metadata(): MeasuredTemplateMetadata;

             override testUserPermission(
                 user: documents.BaseUser,
@@ -18,51 +15,25 @@ declare module foundry {
             /** Is a user able to update or delete an existing MeasuredTemplate? */
             protected static _canModify(
                 user: BaseUser,
-                doc: BaseMeasuredTemplate<BaseScene | null>,
-                data: MeasuredTemplateSource
+                doc: BaseMeasuredTemplate,
+                data: data.MeasuredTemplateData
             ): boolean;
         }

-        interface BaseMeasuredTemplate<TParent extends BaseScene | null>
-            extends abstract.Document<TParent>,
-                MeasuredTemplateSource {
-            readonly _source: MeasuredTemplateSource;
-        }
+        interface BaseMeasuredTemplate {
+            readonly data: data.MeasuredTemplateData<this>;
+
+            readonly parent: BaseScene | null;
+
+            readonly author: documents.BaseUser | undefined;
+
+            readonly t: MeasuredTemplateType;
+
+            width: number;

-        /**
-         * The data schema for a MeasuredTemplate embedded document.
-         * @see BaseMeasuredTemplate
-         *
-         * @param data                   Initial data used to construct the data object
-         * @param [document] The embedded document to which this data object belongs
-         *
-         * @property _id                   The _id which uniquely identifies this BaseMeasuredTemplate embedded document
-         * @property [t=circle]            The value in CONST.MEASURED_TEMPLATE_TYPES which defines the geometry type of this template
-         * @property [x=0]                 The x-coordinate position of the origin of the template effect
-         * @property [y=0]                 The y-coordinate position of the origin of the template effect
-         * @property [distance]            The distance of the template effect
-         * @property [direction=0]         The angle of rotation for the measured template
-         * @property [angle=360]           The angle of effect of the measured template, applies to cone types
-         * @property [width]               The width of the measured template, applies to ray types
-         * @property [borderColor=#000000] A color string used to tint the border of the template shape
-         * @property [fillColor=#FF0000]   A color string used to tint the fill of the template shape
-         * @property [texture]             A repeatable tiling texture used to add a texture fill to the template shape
-         * @property [flags={}]            An object of optional key/value flags
-         */
-        interface MeasuredTemplateSource {
-            _id: string | null;
-            user: string;
-            t: MeasuredTemplateType;
-            x: number;
-            y: number;
             distance: number;
+
             direction: number;
-            angle: number;
-            width: number;
-            borderColor: HexColorString;
-            fillColor: HexColorString;
-            texture: ImageFilePath;
-            flags: DocumentFlags;
         }

         interface MeasuredTemplateMetadata extends abstract.DocumentMetadata {
diff --git a/node_modules/foundry-types/common/documents/note.d.ts b/node_modules/foundry-types/common/documents/note.d.ts
index 7d6a595..1a07fdb 100644
--- a/node_modules/foundry-types/common/documents/note.d.ts
+++ b/node_modules/foundry-types/common/documents/note.d.ts
@@ -1,53 +1,19 @@
 declare module foundry {
     module documents {
         /** The Note embedded document model. */
-        class BaseNote<TParent extends BaseScene | null> extends abstract.Document<TParent> {
+        class BaseNote extends abstract.Document {
+            static override get schema(): typeof data.NoteData;
+
             static override get metadata(): NoteMetadata;

             /** Is a user able to update an existing Note? */
-            protected static _canUpdate(user: BaseUser, doc: BaseNote<BaseScene | null>, data: NoteSource): boolean;
+            protected static _canUpdate(user: BaseUser, doc: BaseNote, data: data.NoteData): boolean;
         }

-        interface BaseNote<TParent extends BaseScene | null> extends abstract.Document<TParent> {
-            readonly _source: NoteSource;
-        }
+        interface BaseNote {
+            readonly data: data.NoteData<this>;

-        /**
-         * The data schema for a Note embedded document.
-         * @see BaseNote
-         *
-         * @param data Initial data used to construct the data object
-         * @param [document] The embedded document to which this data object belongs
-         *
-         * @property _id                  The _id which uniquely identifies this BaseNote embedded document
-         * @property [entryId=null]       The _id of a JournalEntry document which this Note represents
-         * @property [x=0]                The x-coordinate position of the center of the note icon
-         * @property [y=0]                The y-coordinate position of the center of the note icon
-         * @property [icon]               An image icon path used to represent this note
-         * @property [iconSize=40]        The pixel size of the map note icon
-         * @property [iconTint]           An optional color string used to tint the map note icon
-         * @property [text]               Optional text which overrides the title of the linked Journal Entry
-         * @property [fontFamily=Signika] The font family used to display the text label on this note
-         * @property [fontSize=36]        The font size used to display the text label on this note
-         * @property [textAnchor=1]       A value in CONST.TEXT_ANCHOR_POINTS which defines where the text label anchors
-         *                                to the note icon.
-         * @property [textColor=#FFFFFF]  The string that defines the color with which the note text is rendered
-         * @property [flags={}]           An object of optional key/value flags
-         */
-        interface NoteSource {
-            _id: string;
-            entryId: string | null;
-            x: number;
-            y: number;
-            icon: ImageFilePath;
-            iconSize: number;
-            iconTint: HexColorString;
-            text: string;
-            fontFamily: string;
-            fontSize: number;
-            textAnchor: number;
-            textColor: HexColorString;
-            flags: Record<string, unknown>;
+            readonly parent: BaseScene | null;
         }

         interface NoteMetadata extends abstract.DocumentMetadata {
diff --git a/node_modules/foundry-types/common/documents/playlist-sound.d.ts b/node_modules/foundry-types/common/documents/playlist-sound.d.ts
index 5838263..c939cee 100644
--- a/node_modules/foundry-types/common/documents/playlist-sound.d.ts
+++ b/node_modules/foundry-types/common/documents/playlist-sound.d.ts
@@ -1,45 +1,22 @@
 declare module foundry {
     module documents {
         /** The PlaylistSound document model. */
-        class BasePlaylistSound<TParent extends BasePlaylist | null> extends abstract.Document<TParent> {
+        class BasePlaylistSound extends abstract.Document {
+            static override get schema(): typeof data.PlaylistSoundData;
+
             static override get metadata(): PlaylistSoundMetadata;

             testUserPermission(
-                user: BaseUser,
+                user: documents.BaseUser,
                 permission: DocumentOwnershipString | DocumentOwnershipLevel,
                 { exact }?: { exact?: boolean }
             ): boolean;
         }

-        interface BasePlaylistSound<TParent extends BasePlaylist | null> extends abstract.Document<TParent> {
-            readonly _source: PlaylistSoundSource;
-        }
+        interface BasePlaylistSound {
+            readonly data: data.PlaylistSoundData<this>;

-        /**
-         * The data schema for a PlaylistSound embedded document.
-         * @see BasePlaylistSound
-         *
-         * @param data       Initial data used to construct the data object
-         * @param [document] The document to which this data object belongs
-         *
-         * @property _id               The _id which uniquely identifies this PlaylistSound document
-         * @property name              The name of this sound track
-         * @property path              The audio file path that is played by this sound
-         * @property [playing=false]   Is this sound currently playing?
-         * @property [repeat=false]    Does this sound loop?
-         * @property [volume=0.5]      The audio volume of the sound, from 0 to 1
-         * @property [streaming=false] Does this audio file use the "large file streaming" mode?
-         * @property [flags={}]        An object of optional key/value flags
-         */
-        interface PlaylistSoundSource {
-            _id: string;
-            name: string;
-            path: string;
-            playing: boolean;
-            repeat: boolean;
-            volumn: number;
-            streaming: boolean;
-            flags: Record<string, unknown>;
+            readonly parent: BasePlaylist | null;
         }

         interface PlaylistSoundMetadata extends abstract.DocumentMetadata {
diff --git a/node_modules/foundry-types/common/documents/playlist.d.ts b/node_modules/foundry-types/common/documents/playlist.d.ts
index 13a8698..b6bd8c1 100644
--- a/node_modules/foundry-types/common/documents/playlist.d.ts
+++ b/node_modules/foundry-types/common/documents/playlist.d.ts
@@ -1,44 +1,21 @@
 declare module foundry {
     module documents {
         /** The Playlist document model. */
-        class BasePlaylist extends abstract.Document<null> {
+        class BasePlaylist extends abstract.Document {
+            static override get schema(): typeof data.PlaylistData;
+
             static override get metadata(): PlaylistMetadata;

             /** A reference to the Collection of PlaylistSound instances in the Playlist document, indexed by _id. */
-            readonly sounds: abstract.EmbeddedCollection<BasePlaylistSound<this>>;
+            get sounds(): this["data"]["sounds"];
         }

-        interface BasePlaylist extends abstract.Document<null> {
-            readonly _source: PlaylistSource;
+        interface BasePlaylist {
+            readonly data: data.PlaylistData<this>;

-            get documentName(): (typeof BasePlaylist)["metadata"]["name"];
-        }
+            readonly parent: null;

-        /**
-         * The data schema for a Playlist document.
-         * @see BasePlaylist
-         * @property _id             The _id which uniquely identifies this Playlist document
-         * @property name            The name of this playlist
-         * @property sounds          A Collection of PlaylistSounds embedded documents which belong to this playlist
-         * @property [mode=0]        The playback mode for sounds in this playlist
-         * @property [playing=false] Is this playlist currently playing?
-         * @property folder          The _id of a Folder which contains this playlist
-         * @property [sort]          The numeric sort value which orders this playlist relative to its siblings
-         * @property [permission]    An object which configures user permissions to this playlist
-         * @property [flags={}]      An object of optional key/value flags
-         */
-        interface PlaylistSource {
-            _id: string;
-            name: string;
-            sounds: PlaylistSoundSource[];
-            mode: PlaylistMode;
-            playing: boolean;
-            fade: number;
-            folder: string;
-            sort: number;
-            seed: number;
-            permission: Record<string, DocumentOwnershipLevel>;
-            flags: Record<string, unknown>;
+            get documentName(): (typeof BasePlaylist)["metadata"]["name"];
         }

         interface PlaylistMetadata extends abstract.DocumentMetadata {
diff --git a/node_modules/foundry-types/common/documents/roll-table.d.ts b/node_modules/foundry-types/common/documents/roll-table.d.ts
index 5e915b4..80671d7 100644
--- a/node_modules/foundry-types/common/documents/roll-table.d.ts
+++ b/node_modules/foundry-types/common/documents/roll-table.d.ts
@@ -5,52 +5,21 @@ declare module foundry {
          * @param data Initial data from which to construct the document.
          * @property data The constructed data object for the document.
          */
-        class BaseRollTable extends abstract.Document<null> {
+        class BaseRollTable extends abstract.Document {
+            static override get schema(): typeof data.RollTableData;
+
             static override get metadata(): RollTableMetadata;

             /** A reference to the Collection of TableResult instances in this document, indexed by _id. */
-            readonly results: abstract.EmbeddedCollection<BaseTableResult<this>>;
+            get results(): this["data"]["results"];
         }

-        interface BaseRollTable extends abstract.Document<null> {
-            readonly _source: RollTableSource;
+        interface BaseRollTable {
+            readonly data: data.RollTableData<this>;

-            get documentName(): (typeof BaseRollTable)["metadata"]["name"];
-        }
+            readonly parent: null;

-        /**
-         * The data schema for a RollTable document.
-         * @see BaseRollTable
-         *
-         * @param data Initial data used to construct the data object
-         * @param [document] The document to which this data object belongs
-         *
-         * @property _id                The _id which uniquely identifies this RollTable document
-         * @property name               The name of this RollTable
-         * @property [img]              An image file path which provides the thumbnail artwork for this RollTable
-         * @property [description]      The HTML text description for this RollTable document
-         * @property [results=[]]       A Collection of TableResult embedded documents which belong to this RollTable
-         * @property formula            The Roll formula which determines the results chosen from the table
-         * @property [replacement=true] Are results from this table drawn with replacement?
-         * @property [displayRoll=true] Is the Roll result used to draw from this RollTable displayed in chat?
-         * @property folder             The _id of a Folder which contains this RollTable
-         * @property [sort]             The numeric sort value which orders this RollTable relative to its siblings
-         * @property [permission]       An object which configures user permissions to this RollTable
-         * @property [flags={}]         An object of optional key/value flags
-         */
-        interface RollTableSource {
-            _id: string;
-            name: string;
-            img?: ImageFilePath;
-            description: string;
-            results: TableResultSource[];
-            formula: string;
-            replacement: boolean;
-            displayRoll: boolean;
-            folder?: string | null;
-            sort: number;
-            ownership: Record<string, DocumentOwnershipLevel>;
-            flags: Record<string, Record<string, unknown>>;
+            get documentName(): (typeof BaseRollTable)["metadata"]["name"];
         }

         interface RollTableMetadata extends abstract.DocumentMetadata {
diff --git a/node_modules/foundry-types/common/documents/scene.d.ts b/node_modules/foundry-types/common/documents/scene.d.ts
index b5d8c90..74faf9f 100644
--- a/node_modules/foundry-types/common/documents/scene.d.ts
+++ b/node_modules/foundry-types/common/documents/scene.d.ts
@@ -8,41 +8,41 @@ declare global {
              * @param data                 Initial data from which to construct the document.
              * @property data The constructed data object for the document.
              */
-            class BaseScene extends abstract.Document<null> {
-                active: boolean;
-                background: data.TextureData;
-                grid: GridData;
+            class BaseScene extends abstract.Document {
+                grid: data.GridData;
+
                 darkness: number;
+
                 tokenVision: boolean;
+
                 globalLight: boolean;
+
                 hasGlobalThreshold: boolean;
+
                 globalLightThreshold: number;
-                flags: DocumentFlags;
-                playlist: BasePlaylist | null;
-                playlistSound: string | null;
-                journal: BaseJournalEntry | null;
-                journalEntryPage: string | null;
+
+                flags: Record<string, Record<string, unknown>>;

                 /** A reference to the Collection of Drawing instances in the Scene document, indexed by _id. */
-                readonly drawings: abstract.EmbeddedCollection<BaseDrawing<this>>;
+                readonly drawings: abstract.EmbeddedCollection<BaseDrawing>;

                 /** A reference to the Collection of AmbientLight instances in the Scene document, indexed by _id. */
-                readonly lights: abstract.EmbeddedCollection<BaseAmbientLight<this>>;
+                readonly lights: abstract.EmbeddedCollection<BaseAmbientLight>;

                 /** A reference to the Collection of Note instances in the Scene document, indexed by _id. */
-                readonly notes: abstract.EmbeddedCollection<BaseNote<this>>;
+                readonly notes: abstract.EmbeddedCollection<BaseNote>;

                 /** A reference to the Collection of AmbientSound instances in the Scene document, indexed by _id. */
-                readonly sounds: abstract.EmbeddedCollection<BaseAmbientSound<this>>;
+                readonly sounds: abstract.EmbeddedCollection<BaseAmbientSound>;

                 /** A reference to the Collection of MeasuredTemplate instances in the Scene document, indexed by _id. */
-                readonly templates: abstract.EmbeddedCollection<BaseMeasuredTemplate<this>>;
+                readonly templates: abstract.EmbeddedCollection<BaseMeasuredTemplate>;

                 /** A reference to the Collection of Token instances in the Scene document, indexed by _id. */
-                readonly tokens: abstract.EmbeddedCollection<BaseToken<this>>;
+                readonly tokens: abstract.EmbeddedCollection<BaseToken>;

                 /** A reference to the Collection of Tile instances in the Scene document, indexed by _id. */
-                readonly tiles: abstract.EmbeddedCollection<BaseTile<this>>;
+                readonly tiles: abstract.EmbeddedCollection<BaseTile>;

                 /** A reference to the Collection of Wall instances in the Scene document, indexed by _id. */
                 readonly walls: abstract.EmbeddedCollection<BaseWall<this>>;
@@ -65,86 +65,12 @@ declare global {
                 }: GetDimensionsParams): SceneDimensions;
             }

-            interface BaseScene extends foundry.abstract.Document<null> {
-                readonly _source: SceneSource;
-                get documentName(): (typeof BaseScene)["metadata"]["name"];
-            }
-
-            interface SceneSource {
-                _id: string;
-                name: string;
-
-                // Navigation
-                active: boolean;
-                navigation: boolean;
-                navOrder: number;
-                navName: string;
-
-                // Canvas Dimensions
-                img: VideoFilePath;
-                foreground: VideoFilePath;
-                thumb: ImageFilePath;
-                width: number;
-                height: number;
-                padding: number;
-                initial: {
-                    x: number;
-                    y: number;
-                    scale: number;
-                };
-
-                backgroundColor: HexColorString;
+            interface BaseScene {
+                readonly data: data.SceneData<this>;

-                grid: GridData;
+                readonly parent: null;

-                shiftX: number;
-                shiftY: number;
-
-                // Vision and Lighting Configuration
-                tokenVision: boolean;
-                fogExploration: boolean;
-                fogReset: string;
-                globalLight: boolean;
-                globalLightThreshold: number;
-                hasGlobalThreshold: boolean;
-                darkness: number;
-
-                // Embedded Collections
-                drawings: DrawingSource[];
-                tokens: TokenSource[];
-                lights: AmbientLightSource[];
-                notes: NoteSource[];
-                sounds: AmbientSoundSource[];
-                templates: MeasuredTemplateSource[];
-                tiles: TileSource[];
-                walls: WallSource[];
-
-                // Linked Documents
-                playlist: PlaylistSource | null;
-                playlistSound: PlaylistSoundSource | null;
-                journal: JournalEntrySource | null;
-                weather: string;
-
-                // Permissions
-                folder: string | null;
-                sort: number;
-                ownership: Record<string, DocumentOwnershipLevel>;
-                flags: Record<string, Record<string, unknown>>;
-            }
-
-            interface GridData {
-                /** The type of grid, a number from CONST.GRID_TYPES. */
-                type: GridType;
-                /** The grid size which represents the width (or height) of a single grid space. */
-                size: number;
-                /** A string representing the color used to render the grid lines. */
-                color: HexColorString;
-                /** A number between 0 and 1 for the opacity of the grid lines. */
-                alpha: number;
-                /** The number of distance units which are represented by a single grid space. */
-                distance: number;
-                /** A label for the units of measure which are used for grid distance. */
-                units: string;
+                get documentName(): (typeof BaseScene)["metadata"]["name"];
             }

             interface SceneMetadata extends abstract.DocumentMetadata {
@@ -169,8 +95,7 @@ declare global {
     /**
      * @property [isUndo] Is the operation undoing a previous operation, only used by embedded Documents within a Scene
      */
-    interface SceneEmbeddedModificationContext<TParent extends foundry.documents.BaseScene>
-        extends DocumentModificationContext<TParent> {
+    interface SceneEmbeddedModificationContext extends DocumentModificationContext {
         isUndo?: boolean;
     }

diff --git a/node_modules/foundry-types/common/documents/table-result.d.ts b/node_modules/foundry-types/common/documents/table-result.d.ts
index 69ea92c..6007731 100644
--- a/node_modules/foundry-types/common/documents/table-result.d.ts
+++ b/node_modules/foundry-types/common/documents/table-result.d.ts
@@ -1,15 +1,13 @@
 declare module foundry {
     module documents {
         /** The TableResult document model. */
-        class BaseTableResult<TParent extends BaseRollTable | null> extends abstract.Document<TParent> {
+        class BaseTableResult extends abstract.Document {
+            static override get schema(): typeof data.RollTableData;
+
             static override get metadata(): TableResultMetadata;

             /** Is a user able to update an existing TableResult? */
-            protected static _canUpdate(
-                user: BaseUser,
-                doc: BaseTableResult<BaseRollTable | null>,
-                data: TableResultSource
-            ): boolean;
+            protected static _canUpdate(user: BaseUser, doc: BaseTableResult, data: data.TableResultData): boolean;

             override testUserPermission(
                 user: BaseUser,
@@ -18,36 +16,35 @@ declare module foundry {
             ): boolean;
         }

-        interface BaseTableResult<TParent extends BaseRollTable | null> extends abstract.Document<TParent> {
-            readonly _source: TableResultSource;
-        }
+        interface BaseTableResult {
+            readonly data: data.TableResultData<this>;

-        /**
-         * The data schema for a TableResult embedded document within a Roll Table.
-         * @see BaseTableResult
-         *
-         * @param data       Initial data used to construct the data object
-         * @param [document] The document to which this data object belongs
-         *
-         * @property [type=p]      A result sub-type from CONST.TABLE_RESULT_TYPES
-         * @property [text]        The text which describes the table result
-         * @property [img]         An image file url that represents the table result
-         * @property [collection]  A named collection from which this result is drawn
-         * @property [resultId]    The _id of a Document within the collection this result references
-         * @property [weight=1]    The probabilistic weight of this result relative to other results
-         * @property [range]       A length 2 array of ascending integers which defines the range of dice roll
-         *                         totals which produce this drawn result
-         * @property [drawn=false] Has this result already been drawn (without replacement)
-         */
-        interface TableResultSource {
-            type: TableResultType;
-            text: string;
-            img: ImageFilePath;
-            collection: string;
-            resultId: string;
-            weight: number;
-            range: [number, number];
-            drawn: boolean;
+            readonly parent: BaseRollTable | null;
+            /** The _id which uniquely identifies this TableResult embedded document */
+            _id: string
+            /** A result subtype from CONST.TABLE_RESULT_TYPES */
+            type?: typeof CONST.TABLE_RESULT_TYPES
+            /** The text which describes the table result */
+            text?: string
+            /** An image file url that represents the table result */
+            img?: ImageFilePath
+            /** A named collection from which this result is drawn */
+            documentCollection?: string
+            /** The _id of a Document within the collection this result references */
+            documentId?: string
+            /**
+             * The probabilistic weight of this result relative to other results
+             * @default 1
+             */
+            weight?: number
+            /** A length 2 array of ascending integers which defines the range of dice roll totals which produce this drawn result */
+            range?: [number,number]
+            /** Has this result already been drawn (without replacement)
+             * @default false
+             */
+            draw?: boolean
+            /** An object of optional key/value flags */
+            flags?: DocumentFlags
         }

         interface TableResultMetadata extends abstract.DocumentMetadata {
diff --git a/node_modules/foundry-types/common/documents/tile.d.ts b/node_modules/foundry-types/common/documents/tile.d.ts
index 9fd92f0..7e6d203 100644
--- a/node_modules/foundry-types/common/documents/tile.d.ts
+++ b/node_modules/foundry-types/common/documents/tile.d.ts
@@ -1,52 +1,16 @@
 declare module foundry {
     module documents {
         /** The Tile embedded document model. */
-        class BaseTile<TParent extends BaseScene | null> extends abstract.Document<TParent> {
+        class BaseTile extends abstract.Document {
+            static override get schema(): typeof data.TileData;
+
             static override get metadata(): TileMetadata;
         }

-        interface BaseTile<TParent extends BaseScene | null> extends abstract.Document<TParent> {
-            readonly _source: TileSource;
-        }
+        interface BaseTile {
+            readonly data: data.TileData<this>;

-        /**
-         * The data schema for a Tile embedded document.
-         * @see BaseTile
-         *
-         * @property _id              The _id which uniquely identifies this Tile embedded document
-         * @property [img]            An image or video file path which this tile displays
-         * @property [width=0]        The pixel width of the tile
-         * @property [height=0]       The pixel height of the tile
-         * @property [x=0]            The x-coordinate position of the top-left corner of the tile
-         * @property [y=0]            The y-coordinate position of the top-left corner of the tile
-         * @property [z=100]          The z-index ordering of this tile relative to its siblings
-         * @property [rotation=0]     The angle of rotation for the tile between 0 and 360
-         * @property [alpha=1]        The tile opacity
-         * @property [tint]           A color to tint the tile
-         * @property [hidden=false]   Is the tile currently hidden?
-         * @property [locked=false]   Is the tile currently locked?
-         * @property [overhead=false] Is the tile an overhead tile?
-         * @property [occlusion]      The tile's occlusion settings
-         * @property [video]          The tile's video settings
-         * @property [flags={}]       An object of optional key/value flags
-         */
-        interface TileSource {
-            _id: string;
-            img: ImageFilePath | null;
-            width: number;
-            height: number;
-            x: number;
-            y: number;
-            z: number;
-            rotation: number;
-            alpha: number;
-            tint: HexColorString | null;
-            hidden: boolean;
-            locked: boolean;
-            overhead: boolean;
-            video: data.VideoData;
-            occlusion: data.TileOcclusion;
-            flags: DocumentFlags;
+            readonly parent: BaseScene | null;
         }

         interface TileMetadata extends abstract.DocumentMetadata {
diff --git a/node_modules/foundry-types/common/documents/token.d.ts b/node_modules/foundry-types/common/documents/token.d.ts
index c1d51f0..89c7d99 100644
--- a/node_modules/foundry-types/common/documents/token.d.ts
+++ b/node_modules/foundry-types/common/documents/token.d.ts
@@ -5,7 +5,7 @@ declare module foundry {
          * @param data Initial data from which to construct the document.
          * @property data The constructed data object for the document.
          */
-        class BaseToken<TParent extends BaseScene | null = BaseScene | null> extends abstract.Document<TParent> {
+        class BaseToken extends abstract.Document {
             readonly actorLink: boolean;

             displayName: TokenDisplayMode;
@@ -26,7 +26,7 @@ declare module foundry {
                 tint: HexColorString;
             };

-            light: foundry.data.LightData;
+            light: foundry.data.LightData<this>;

             sight: {
                 enabled: boolean;
@@ -44,114 +44,18 @@ declare module foundry {

             effects: VideoFilePath[];

-            flags: DocumentFlags;
+            static override get schema(): typeof data.TokenData;

             static override get metadata(): TokenMetadata;

             /** Is a user able to update an existing Token? */
-            protected static _canUpdate(user: BaseUser, doc: BaseToken<BaseScene | null>, data: TokenSource): boolean;
+            protected static _canUpdate(user: BaseUser, doc: BaseToken, data: data.TokenData): boolean;
         }

-        interface BaseToken<TParent extends BaseScene | null = BaseScene | null> extends abstract.Document<TParent> {
-            readonly _source: TokenSource;
-        }
-
-        /**
-         * The data schema for a Token document.
-         *
-         * @property _id                  The Token _id which uniquely identifies it within its parent Scene
-         * @property name                 The name used to describe the Token
-         * @property [displayName=0]      The display mode of the Token nameplate, from CONST.TOKEN_DISPLAY_MODES
-         * @property actorId              The _id of an Actor document which this Token represents
-         * @property [actorLink=false]    Does this Token uniquely represent a singular Actor, or is it one of many?
-         * @property [actorData]          Token-level data which overrides the base data of the associated Actor
-         * @property [width=1]            The width of the Token in grid units
-         * @property [height=1]           The height of the Token in grid units
-         * @property [scale=1]            A scale factor applied to the Token image, between 0.25 and 3
-         * @property [mirrorX=false]      Flip the Token image horizontally?
-         * @property [mirrorY=false]      Flip the Token image vertically?
-         * @property [x=0]                The x-coordinate of the top-left corner of the Token
-         * @property [y=0]                The y-coordinate of the top-left corner of the Token
-         * @property [elevation=0]        The vertical elevation of the Token, in distance units
-         * @property [lockRotation=false] Prevent the Token image from visually rotating?
-         * @property [rotation=0]         The rotation of the Token in degrees, from 0 to 360. A value of 0 represents a southward-facing Token.
-         * @property [effects]            An array of effect icon paths which are displayed on the Token
-         * @property [overlayEffect]      A single icon path which is displayed as an overlay on the Token
-         * @property [hidden=false]       Is the Token currently hidden from player view?
-         * @property [vision]             Is this Token a source of vision?
-         * @property [dimSight=0]         How far in distance units the Token can naturally see as if in dim light
-         * @property [brightSight=0]      How far in distance units the Token can naturally see as if in bright light
-         * @property [sightAngle=360]     The angle at which this Token is able to see, if it has vision
-         * @property [light]              The angle at which this Token is able to see, if it has vision
-         * @property [dimLight=0]         How far in distance units this Token emits dim light
-         * @property [brightLight=0]      How far in distance units this Token emits bright light
-         * @property [lightAngle=360]     The angle at which this Token is able to emit light
-         * @property [lightAnimation]     A data object which configures token light animation settings
-         * @property [disposition=-1]     A displayed Token disposition from CONST.TOKEN_DISPOSITIONS
-         * @property [displayBars=0]      The display mode of Token resource bars, from CONST.TOKEN_DISPLAY_MODES
-         * @property [bar1]               The configuration of the Token's primary resource bar
-         * @property [bar2]               The configuration of the Token's secondary resource bar
-         * @property [flags={}]           An object of optional key/value flags
-         */
-        interface TokenSource extends TokenLightData {
-            _id: string;
-            name: string;
+        interface BaseToken extends abstract.Document {
+            readonly data: data.TokenData<this>;

-            // Navigation
-            active: boolean;
-            navigation: boolean;
-            navOrder: number;
-            navName: string;
-
-            actorId: string | null;
-            actorLink: boolean;
-            actorData: DeepPartial<ActorSource>;
-            mirrorX: boolean;
-            mirrorY: boolean;
-            height: number;
-            width: number;
-            x: number;
-            y: number;
-            elevation: number;
-            lockRotation: boolean;
-            effects: VideoFilePath[];
-            overlayEffect: string | null;
-            vision: boolean;
-            dimSight: number;
-            brightSight: number;
-            sightAngle: number;
-            light: data.LightSource;
-            hidden: boolean;
-            texture: {
-                src: VideoFilePath;
-                scaleX: number;
-                scaleY: number;
-                offsetX: number;
-                offsetY: number;
-                rotation: number | null;
-                tint: `#${string}`;
-            };
-
-            lightAnimation: data.AnimationData;
-            disposition: TokenDisposition;
-            displayName: TokenDisplayMode;
-            displayBars: TokenDisplayMode;
-            bar1: TokenBarData;
-            bar2: TokenBarData;
-            flags: DocumentFlags;
-        }
-
-        interface TokenLightData {
-            brightLight: number;
-            dimLight: number;
-            lightAlpha: number;
-            lightAngle: number;
-            lightAnimation: {
-                type: string;
-                speed: number;
-                intensity: number;
-            };
-            lightColor: string;
+            readonly parent: BaseScene | null;
         }

         interface TokenMetadata extends abstract.DocumentMetadata {
@@ -163,13 +67,5 @@ declare module foundry {
                 create: "TOKEN_CREATE";
             };
         }
-
-        /**
-         * An embedded data structure for the contents of a Token attribute bar.
-         * @property [attribute] The attribute path within the Token's Actor data which should be displayed
-         */
-        interface TokenBarData {
-            attribute: string | null;
-        }
     }
 }
diff --git a/node_modules/foundry-types/common/documents/user.d.ts b/node_modules/foundry-types/common/documents/user.d.ts
index 2999d85..4ee5a5f 100644
--- a/node_modules/foundry-types/common/documents/user.d.ts
+++ b/node_modules/foundry-types/common/documents/user.d.ts
@@ -8,16 +8,18 @@ declare module foundry {
          * @param data                 Initial data from which to construct the document.
          * @property data The constructed data object for the document.
          */
-        class BaseUser extends abstract.Document<null> {
-            avatar: ImageFilePath;
-            border: HexColorString;
-            character: BaseActor | null | undefined;
-            charname: string;
-            color: HexColorString;
+        class BaseUser extends abstract.Document {
             flags: DocumentFlags;
-            name: string;
+
             readonly role: UserRole;

+            name: string;
+            avatar: ImageFilePath;
+            color: HexColorString;
+            charname: string;
+            character: BaseActor | null | undefined;
+            border: HexColorString;
+
             static override get metadata(): UserMetadata;

             /* ---------------------------------------- */
@@ -55,12 +57,16 @@ declare module foundry {
             hasRole(role: UserRole | UserRoleName, { exact }?: { exact: boolean }): boolean;
         }

-        interface BaseUser extends abstract.Document<null> {
-            readonly _source: UserSource;
+        interface BaseUser extends abstract.Document {
+            readonly parent: null;

             get documentName(): "User";
         }

+        class UserData extends abstract.DocumentData {
+            readonly _source: UserSource;
+        }
+
         interface UserMetadata extends abstract.DocumentMetadata {
             name: "User";
             collection: "users";
diff --git a/node_modules/foundry-types/common/documents/wall.d.ts b/node_modules/foundry-types/common/documents/wall.d.ts
index 7f48756..2fecf7a 100644
--- a/node_modules/foundry-types/common/documents/wall.d.ts
+++ b/node_modules/foundry-types/common/documents/wall.d.ts
@@ -1,11 +1,13 @@
 declare module foundry {
     module documents {
         /** The Wall embedded document model. */
-        class BaseWall<TParent extends BaseScene | null> extends abstract.Document<TParent> {
+        class BaseWall<TParent extends BaseScene | null = BaseScene | null> extends abstract.Document {
+            static override get schema(): typeof data.WallData;
+
             static override get metadata(): WallMetadata;

             /** Is a user able to update an existing Wall? */
-            protected static _canUpdate(user: BaseUser, doc: BaseWall<BaseScene | null>, data: WallSource): boolean;
+            protected static _canUpdate(user: BaseUser, doc: BaseWall, data: data.WallData): boolean;

             light: WallSenseType;
             move: WallSenseType;
@@ -13,17 +15,9 @@ declare module foundry {
             sound: WallSenseType;
         }

-        interface BaseWall<TParent extends BaseScene | null> extends abstract.Document<TParent> {
-            readonly _source: WallSource;
-        }
-
-        interface WallSource {
-            c: number[];
-            move?: number;
-            sense?: number;
-            dir?: number;
-            door?: number;
-            ds?: number;
+        interface BaseWall<TParent extends BaseScene | null = BaseScene | null> {
+            readonly data: data.WallData<this>;
+            readonly parent: TParent;
         }

         interface WallMetadata extends abstract.DocumentMetadata {
diff --git a/node_modules/foundry-types/common/types.d.ts b/node_modules/foundry-types/common/types.d.ts
index 1b933dd..85fdcdd 100644
--- a/node_modules/foundry-types/common/types.d.ts
+++ b/node_modules/foundry-types/common/types.d.ts
@@ -56,6 +56,17 @@ declare global {
         ) => void | Promise<void>;
     }

+/**
+ * A Client Setting Submenu
+ * @typedef {Object} SettingSubmenuConfig
+ * @property {string} name             The human readable name
+ * @property {string} label            The human readable label
+ * @property {string} hint             An additional human readable hint
+ * @property {string} icon             The classname of an Icon to render
+ * @property {FormApplication} type    The FormApplication to render
+ * @property {boolean} restricted      If true, only a GM can edit this Setting
+ */
+
     interface SettingSubmenuConfig {
         /** The human readable name */
         name: string;
@@ -66,7 +77,7 @@ declare global {
         /** The classname of an Icon to render */
         icon: string;
         /** The FormApplication to render */
-        type: SettingsMenuConstructor;
+        type: Constructor<FormApplication>;
         /** If true, only a GM can edit this Setting */
         restricted: boolean;
     }
diff --git a/node_modules/foundry-types/common/utils/helpers.d.ts b/node_modules/foundry-types/common/utils/helpers.d.ts
index 3698c10..a25ae1e 100644
--- a/node_modules/foundry-types/common/utils/helpers.d.ts
+++ b/node_modules/foundry-types/common/utils/helpers.d.ts
@@ -29,6 +29,8 @@ declare global {
              * For a subset of cases the deepClone function will offer better performance.
              * @param original Some sort of data
              */
+            function duplicate<T extends foundry.abstract.Document>(original: T): T["data"];
+            function duplicate<T extends foundry.abstract.DocumentData>(original: T): RawObject<T>;
             function duplicate<T>(original: T): T;

             /**
@@ -66,7 +68,7 @@ declare global {
              */
             function mergeObject<T extends object, U extends object = T>(
                 original: T,
-                other: U,
+                other?: U,
                 { insertKeys, insertValues, overwrite, inplace, enforceTypes, performDeletions }?: MergeObjectOptions,
                 _d?: number
             ): T & U;
@@ -295,6 +297,8 @@ declare global {
         inplace?: boolean;
         enforceTypes?: boolean;
         performDeletions?: boolean;
+        /** @default true */
+        recursive?: boolean
     }

     namespace globalThis {
diff --git a/node_modules/foundry-types/index.d.ts b/node_modules/foundry-types/index.d.ts
index 16573f6..455374c 100644
--- a/node_modules/foundry-types/index.d.ts
+++ b/node_modules/foundry-types/index.d.ts
@@ -1,7 +1,28 @@
 import "./client/application/base";
 import "./client/application/chat-popout";
 import "./client/application/compendium";
-import "./client/application/form-application";
+import "./client/application/form-application/base";
+import "./client/application/form-application/client-settings";
+import "./client/application/form-application/document-sheet-config";
+import "./client/application/form-application/document-sheet/active-effect-config";
+import "./client/application/form-application/document-sheet/actor-sheet";
+import "./client/application/form-application/document-sheet/base";
+import "./client/application/form-application/document-sheet/combatant-config";
+import "./client/application/form-application/document-sheet/item-sheet";
+import "./client/application/form-application/document-sheet/journal-page-sheet";
+import "./client/application/form-application/document-sheet/journal-sheet";
+import "./client/application/form-application/document-sheet/macro-config";
+import "./client/application/form-application/document-sheet/note-config";
+import "./client/application/form-application/document-sheet/scene-config";
+import "./client/application/form-application/document-sheet/user-config";
+import "./client/application/form-application/document-sheet/wall-config";
+import "./client/application/form-application/image-popout";
+import "./client/application/form-application/other";
+import "./client/application/form-application/permission";
+import "./client/application/form-application/placeables-config";
+import "./client/application/form-application/roll-table-config";
+import "./client/application/form-application/tile-config";
+import "./client/application/form-application/token-config";
 import "./client/application/hotbar";
 import "./client/application/hud/chat-bubbles";
 import "./client/application/hud/container";
@@ -67,6 +88,9 @@ import "./client/pixi/placeable-object/wall";
 import "./client/pixi/placeables-layer/base";
 import "./client/pixi/placeables-layer/drawings-layer";
 import "./client/pixi/placeables-layer/lighting-layer";
+import "./client/pixi/placeables-layer/map-layer/background-layer";
+import "./client/pixi/placeables-layer/map-layer/base";
+import "./client/pixi/placeables-layer/map-layer/foreground-layer";
 import "./client/pixi/placeables-layer/notes-layer";
 import "./client/pixi/placeables-layer/sounds-layer";
 import "./client/pixi/placeables-layer/template-layer";
diff --git a/node_modules/foundry-types/tsconfig.json b/node_modules/foundry-types/tsconfig.json
index 700f53a..e5ba04c 100644
--- a/node_modules/foundry-types/tsconfig.json
+++ b/node_modules/foundry-types/tsconfig.json
@@ -9,8 +9,7 @@
         ],
         "strict": true,
         "noImplicitOverride": true,
-        "noEmit": true,
-        "esModuleInterop": true
+        "noEmit": true
     },
     "files": [
         "index.d.ts",
diff --git a/node_modules/foundry-types/util.d.ts b/node_modules/foundry-types/util.d.ts
index 37eefce..b8c0968 100644
--- a/node_modules/foundry-types/util.d.ts
+++ b/node_modules/foundry-types/util.d.ts
@@ -22,12 +22,6 @@ declare global {
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
     type ConstructorOf<T> = new (...args: any[]) => T;

-    type DocumentConstructorOf<T extends foundry.abstract.Document> = {
-        // eslint-disable-next-line @typescript-eslint/no-explicit-any
-        new (...args: any[]): T;
-        updateDocuments(updates?: object[], context?: DocumentModificationContext<T["parent"]>): Promise<T[]>;
-    };
-
     type ParentOf<TDataModel> = TDataModel extends DataModel<infer P extends DataModel | null> ? P : never;

     type SchemaOf<TDataModel> = TDataModel extends DataModel<infer _P, infer S extends DataSchema> ? S : never;
@@ -35,8 +29,4 @@ declare global {
     type SetElement<TSet extends Set<unknown>> = TSet extends Set<infer TElement> ? TElement : never;

     type DropFirst<T extends unknown[]> = T extends [unknown, ...infer U] ? U : never;
-
-    type TypeParamOf<T> = T extends TypeWithGeneric<infer U> ? U : never;
 }
-
-type TypeWithGeneric<T> = T[];
