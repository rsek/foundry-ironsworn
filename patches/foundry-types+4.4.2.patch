

diff --git a/node_modules/foundry-types/client/core/hooks.d.ts b/node_modules/foundry-types/client/core/hooks.d.ts
index 1e898b7..0f66834 100644
--- a/node_modules/foundry-types/client/core/hooks.d.ts
+++ b/node_modules/foundry-types/client/core/hooks.d.ts
@@ -17,14 +17,12 @@ declare global {
     type HookParamsGetSceneControlButtons = HookParameters<"getSceneControlButtons", [SceneControl[]]>;
     type HookParamsHotbarDrop = HookParameters<"hotbarDrop", [Hotbar, unknown, string]>;
     type HookParamsLightingRefresh = HookParameters<"lightingRefresh", [LightingLayer]>;
-    type HookParamsPreCreateItem = HookParameters<
-        "preCreateItem",
-        [
-            PreCreate<foundry.documents.ItemSource>,
-            DocumentModificationContext<Actor<TokenDocument<Scene | null> | null> | null>,
-            string
-        ]
-    >;
+    type HookParamsPreCreate<T extends foundry.abstract.Document, N extends string> = HookParameters<`preCreate${N}`, [
+      T, // @param document
+      PreCreate<T>, // @param data
+      DocumentModificationContext<T>, // @param options
+      string // @param userId
+    ]>;
     type HooksParamsPreUpdateCombat = HookParameters<
         "preUpdateCombat",
         [Combat, object, { diff: boolean; advanceTime: number; [key: string]: unknown }, string]
@@ -33,24 +31,27 @@ declare global {
         "preUpdateToken",
         [
             Scene,
-            foundry.documents.TokenSource,
-            DeepPartial<foundry.documents.TokenSource>,
+            foundry.data.TokenData,
+            Partial<foundry.data.TokenData>,
             { diff: boolean; [key: string]: unknown },
             string
         ]
     >;
+    type HookParamsPreUpdate<T extends Document, N extends string> = HookParameters<`preUpdate${N}`, [T, DocumentUpdateData<T>, DocumentUpdateContext<T>, string]>
+    type HookParamsCreate<T extends Document, N extends string> = HookParameters<`create${N}`,[T,DocumentUpdateContext<T>, string]>
+
     type HookParamsRender<T extends Application, N extends string> = HookParameters<
         `render${N}`,
         [T, JQuery, ReturnType<T["getData"]>]
     >;
     type HookParamsRenderChatMessage = HookParameters<
         "renderChatMessage",
-        [ChatMessage, JQuery, foundry.documents.ChatMessageSource]
+        [ChatMessage, JQuery, foundry.data.ChatMessageSource]
     >;
     type HookParamsTargetToken = HookParameters<"targetToken", [User, Token, boolean]>;
     type HookParamsUpdate<T extends foundry.abstract.Document, N extends string> = HookParameters<
         `update${N}`,
-        [T, DocumentUpdateData<T>, DocumentModificationContext<T["parent"]>]
+        [T, DocumentUpdateData<T>, DocumentModificationContext]
     >;
     type HookParamsUpdateWorldTime = HookParameters<"updateWorldTime", [number, number]>;

@@ -60,6 +61,7 @@ declare global {
          *
          * @param hook The unique name of the hooked event
          * @param fn   The callback function which should be triggered when the hook event occurs
+         * @returns An ID number of the hooked function which can be used to turn off the hook later
          */
         static on(...args: HookParamsSetup): number;
         static on(...args: HookParamsInit): number;
@@ -72,17 +74,22 @@ declare global {
         static on(...args: HookParamsGetSceneControlButtons): number;
         static on(...args: HookParamsHotbarDrop): number;
         static on(...args: HookParamsLightingRefresh): number;
-        static on(...args: HookParamsPreCreateItem): number;
         static on(...args: HooksParamsPreUpdateCombat): number;
         static on(...args: HookParamsPreUpdateToken): number;
+        static on(...args: HookParamsPreUpdate<Actor, 'Actor'>): number
+        static on(...args: HookParamsPreUpdate<Item, 'Item'>): number
+
+        static on(...args: HookParamsPreUpdate<SettingConfig, 'Setting'>): number
+
         static on(...args: HookParamsRenderChatMessage): number;
         static on(...args: HookParamsRender<ChatLog, "ChatLog">): number;
         static on(...args: HookParamsRender<ChatPopout, "ChatPopout">): number;
         static on(...args: HookParamsRender<CombatTrackerConfig, "CombatTrackerConfig">): number;
         static on(...args: HookParamsRender<CompendiumDirectory, "CompendiumDirectory">): number;
+        static on(...args: HookParamsRender<Compendium,'Compendium'>): number
         static on(...args: HookParamsRender<Dialog, "Dialog">): number;
-        static on(...args: HookParamsRender<ActorDirectory<Actor<null>>, "ActorDirectory">): number;
-        static on(...args: HookParamsRender<ItemDirectory<Item<null>>, "ItemDirectory">): number;
+        static on(...args: HookParamsRender<ActorDirectory<Actor>, "ActorDirectory">): number;
+        static on(...args: HookParamsRender<ItemDirectory<Item>, "ItemDirectory">): number;
         static on(...args: HookParamsRender<SceneControls, "SceneControls">): number;
         static on(...args: HookParamsRender<Settings, "Settings">): number;
         static on(...args: HookParamsRender<TokenHUD, "TokenHUD">): number;
@@ -96,9 +103,19 @@ declare global {
             >
         ): number;
         static on(...args: HookParamsTargetToken): number;
+        static on(...args: HookParamsCreate<Actor, "Actor">): number
         static on(...args: HookParamsUpdate<Combat, "Combat">): number;
         static on(...args: HookParamsUpdate<Scene, "Scene">): number;
+        static on(...args: HookParamsUpdate<Actor, 'Actor'>): number
+		    static on(...args: HookParamsUpdate<Item, 'Item'>): number
         static on(...args: HookParamsUpdateWorldTime): number;
+        static on(...args: HookParamsPreCreate<Item, "Item">): number;
+        static on(...args: HookParamsPreCreate<Actor, "Actor">): number;
+        static on(...args: HookParamsPreCreate<JournalEntryPage, "JournalEntryPage">): number;
+        static on(
+          ...args: HookParameters<'preDeleteItem', [Item, any, number]>
+        ): number
+
         static on(...args: HookParameters<string, unknown[]>): number;

         /**
@@ -119,16 +136,15 @@ declare global {
         static once(...args: HookParamsGetSceneControlButtons): number;
         static once(...args: HookParamsHotbarDrop): number;
         static once(...args: HookParamsLightingRefresh): number;
-        static once(...args: HookParamsPreCreateItem): number;
         static once(...args: HookParamsPreUpdateToken): number;
         static once(...args: HookParamsRenderChatMessage): number;
-        static once(...args: HookParamsRender<ActorDirectory<Actor<null>>, "ActorDirectory">): number;
+        static once(...args: HookParamsRender<ActorDirectory<Actor>, "ActorDirectory">): number;
         static once(...args: HookParamsRender<ChatLog, "ChatLog">): number;
         static once(...args: HookParamsRender<ChatPopout, "ChatPopout">): number;
         static once(...args: HookParamsRender<CombatTrackerConfig, "CombatTrackerConfig">): number;
         static once(...args: HookParamsRender<CompendiumDirectory, "CompendiumDirectory">): number;
         static once(...args: HookParamsRender<Dialog, "Dialog">): number;
-        static once(...args: HookParamsRender<ItemDirectory<Item<null>>, "ItemDirectory">): number;
+        static once(...args: HookParamsRender<ItemDirectory<Item>, "ItemDirectory">): number;
         static once(
             ...args: HookParamsRender<JournalPageSheet<JournalEntryPage<JournalEntry | null>>, "JournalPageSheet">
         ): number;
@@ -145,8 +161,23 @@ declare global {
         static once(...args: HookParamsUpdate<Combat, "Combat">): number;
         static once(...args: HookParamsUpdate<Scene, "Scene">): number;
         static once(...args: HookParamsUpdateWorldTime): number;
+
         static once(...args: HookParameters<string, unknown[]>): number;

+        /**
+         * Notify subscribers that an error has occurred within foundry.
+         * @param {string} location                The method where the error was caught.
+         * @param {Error} error                    The error.
+         * @param {object} [options={}]            Additional options to configure behaviour.
+         * @param {string} [options.msg=""]        A message which should prefix the resulting error or notification.
+         * @param {?string} [options.log=null]     The level at which to log the error to console (if at all).
+         * @param {?string} [options.notify=null]  The level at which to spawn a notification in the UI (if at all).
+         * @param {object} [options.data={}]       Additional data to pass to the hook subscribers.
+         */
+        static onError(location: string, error: Error, options?: {
+          msg?: string, log?: string|null, notify?:string|null, data?: object
+        })
+
         /**
          * Unregister a callback handler for a particular hook event
          *
diff --git a/node_modules/foundry-types/client/core/settings.d.ts b/node_modules/foundry-types/client/core/settings.d.ts
index c97020a..5674309 100644
--- a/node_modules/foundry-types/client/core/settings.d.ts
+++ b/node_modules/foundry-types/client/core/settings.d.ts
@@ -100,21 +100,37 @@ declare global {

         /**
          * Get the value of a game setting for a certain module and setting key
-         * @param module    The module namespace under which the setting is registered
+         * @param namespace    The module namespace under which the setting is registered
          * @param key       The setting key to retrieve
          */
-        get(module: "core", key: "compendiumConfiguration"): Record<string, { private: boolean; locked: boolean }>;
-        get(module: "core", key: "defaultToken"): Partial<foundry.data.PrototypeTokenSource>;
-        get(module: "core", key: "rollMode"): RollMode;
-        get(module: string, key: string): unknown;
+        get<TNamespace extends keyof ClientSettings.Config, TKey extends keyof ClientSettings.Config[TNamespace]>(namespace: TNamespace, key: TKey): ClientSettings.Config[TNamespace][TKey]

         /**
          * Get the value of a game setting for a certain module and setting key
-         * @param module    The module namespace under which the setting is registered
+         * @param namespace    The module namespace under which the setting is registered
          * @param key   The setting key to retrieve
          * @param value The data to assign to the setting key
          */
-        set(module: string, key: string, value: unknown): Promise<unknown>;
+        set<TNamespace extends keyof ClientSettings.Config, TKey extends keyof ClientSettings.Config[TNamespace]>(namespace: TNamespace, key: TKey, value: ClientSettings.Config[TNamespace][TKey]): Promise<unknown>;
+    }
+
+    interface ClientSettings {}
+
+    namespace ClientSettings {
+        type DocType = keyof typeof game.system.documentTypes
+        type DocSubtype<T extends DocType> =
+          (typeof game.system.documentTypes)[T][number]
+
+        interface Config {
+          core:
+            {
+              compendiumConfiguration: Record<string, { private: boolean; locked: boolean }>,
+              defaultToken: Partial<foundry.data.PrototypeTokenSource>
+              rollMode: RollMode
+              sheetClasses: {
+          [TDoc in DocType]: Record<DocSubtype<TDoc>, string>
+        }}
+      }
     }

     interface SettingRegistration<
