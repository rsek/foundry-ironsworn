
diff --git a/node_modules/foundry-types/client/config.d.ts b/node_modules/foundry-types/client/config.d.ts
index 271ace7..4dbd354 100644
--- a/node_modules/foundry-types/client/config.d.ts
+++ b/node_modules/foundry-types/client/config.d.ts
@@ -2,25 +2,27 @@ import type * as TinyMCE from "tinymce";

 declare global {
     interface Config<
-        TAmbientLightDocument extends AmbientLightDocument<TScene | null>,
-        TActiveEffect extends ActiveEffect<TActor | TItem | null>,
-        TActor extends Actor<TTokenDocument | null>,
+        TAmbientLightDocument extends AmbientLightDocument,
+        TActiveEffect extends ActiveEffect,
+        TActor extends Actor,
+        TActorDirectory extends ActorDirectory<TActor>,
         TChatLog extends ChatLog,
         TChatMessage extends ChatMessage,
         TCombat extends Combat,
-        TCombatant extends Combatant<TCombat | null, TTokenDocument | null>,
+        TCombatant extends Combatant<TCombat | null, TActor | null>,
         TCombatTracker extends CombatTracker<TCombat | null>,
         TCompendiumDirectory extends CompendiumDirectory,
         THotbar extends Hotbar,
-        TItem extends Item<TActor | null>,
+        TItem extends Item,
         TMacro extends Macro,
-        TMeasuredTemplateDocument extends MeasuredTemplateDocument<TScene | null>,
-        TTileDocument extends TileDocument<TScene | null>,
-        TTokenDocument extends TokenDocument<TScene | null>,
+        TMeasuredTemplateDocument extends MeasuredTemplateDocument,
+        TTileDocument extends TileDocument,
+        TTokenDocument extends TokenDocument,
         TWallDocument extends WallDocument<TScene | null>,
         TScene extends Scene,
         TUser extends User,
-        TEffectsCanvasGroup extends EffectsCanvasGroup
+        TEffectsCanvasGroup extends EffectsCanvasGroup,
+        TJournalEntryPage extends JournalEntryPage
     > {
         /** Configure debugging flags to display additional information */
         debug: {
@@ -48,7 +50,7 @@ declare global {
                     context?: DocumentConstructionContext<TActor["parent"]>
                 ): TActor;
             };
-            collection: ConstructorOf<Actors<Actor<null>>>;
+            collection: ConstructorOf<Actors<TActor>>;
             sheetClasses: Record<
                 string,
                 Record<
@@ -60,7 +62,8 @@ declare global {
                     }
                 >
             >;
-            typeLabels: Record<string, string | undefined>;
+            typeLabels: Record<TActor['type'], string | undefined>;
+            typeIcons: Record<TActor['type'], string>,
         };

         /** Configuration for the Cards primary Document type */
@@ -114,7 +117,9 @@ declare global {
                     }
                 >
             >;
-            typeLabels: Record<string, string | undefined>;
+
+            typeLabels: Record<TItem['type'], string | undefined>;
+            typeIcons: Record<TItem['type'], string>,
         };

         /** Configuration for the Combat document */
@@ -131,9 +136,15 @@ declare global {
             };
         };

-        /** Configuration for the JournalEntry entity */
+        /** Configuration for the JournalEntry document */
         JournalEntry: {
-            documentClass: typeof JournalEntry;
+            documentClass: {
+                new (
+                    data: PreCreate<JournalEntry["_source"]>,
+                    context?: DocumentConstructionContext<null>
+                ): JournalEntry;
+            };
+            collection: Journal
             noteIcons: {
                 Anchor: string;
                 [key: string]: string;
@@ -179,11 +190,20 @@ declare global {
         /*  Embedded Documents                          */
         /* -------------------------------------------- */

+        /** Configuration for the JournalEntryPage embedded document type. */
+        JournalEntryPage: {
+          documentClass: ConstructorOf<TJournalEntryPage>,
+          typeLabels: Record<TJournalEntryPage['type'], string | undefined>;
+          typeIcons: Record<TJournalEntryPage['type'], string>,
+          defaultType: TJournalEntryPage['type'],
+          sidebarIcon: string
+        },
+
         /** Configuration for the AmbientLight embedded document type and its representation on the game Canvas */
         AmbientLight: {
             documentClass: ConstructorOf<TAmbientLightDocument>;
-            objectClass: ConstructorOf<NonNullable<TAmbientLightDocument["object"]>>;
-            layerClass: ConstructorOf<NonNullable<TAmbientLightDocument["object"]>["layer"]>;
+            objectClass: ConstructorOf<TAmbientLightDocument["object"]>;
+            layerClass: ConstructorOf<TAmbientLightDocument["object"]["layer"]>;
         };

         /** Configuration for the ActiveEffect embedded document type */
@@ -216,23 +236,26 @@ declare global {
                 rect: string;
                 ray: string;
             };
-            documentClass: ConstructorOf<TMeasuredTemplateDocument>;
-            objectClass: ConstructorOf<NonNullable<TMeasuredTemplateDocument["object"]>>;
-            layerClass: ConstructorOf<NonNullable<TMeasuredTemplateDocument["object"]>["layer"]>;
+            documentClass: new (
+                data: PreCreate<foundry.data.MeasuredTemplateSource>,
+                context?: DocumentConstructionContext<TMeasuredTemplateDocument["parent"]>
+            ) => TMeasuredTemplateDocument;
+            objectClass: ConstructorOf<TMeasuredTemplateDocument["object"]>;
+            layerClass: ConstructorOf<TMeasuredTemplateDocument["object"]["layer"]>;
         };

         /** Configuration for the Tile embedded document type and its representation on the game Canvas */
         Tile: {
             documentClass: ConstructorOf<TTileDocument>;
-            objectClass: ConstructorOf<NonNullable<TTileDocument["object"]>>;
-            layerClass: ConstructorOf<TilesLayer<NonNullable<TTileDocument["object"]>>>;
+            objectClass: ConstructorOf<TTileDocument["object"]>;
+            layerClass: ConstructorOf<BackgroundLayer>;
         };

         /** Configuration for the Token embedded document type and its representation on the game Canvas */
         Token: {
             documentClass: ConstructorOf<TTokenDocument>;
-            objectClass: ConstructorOf<NonNullable<TTokenDocument["object"]>>;
-            layerClass: ConstructorOf<NonNullable<TTokenDocument["object"]>["layer"]>;
+            objectClass: ConstructorOf<TTokenDocument["object"]>;
+            layerClass: ConstructorOf<TTokenDocument["object"]["layer"]>;
             prototypeSheetClass: ConstructorOf<TTokenDocument["sheet"]>;
         };

@@ -240,7 +263,7 @@ declare global {
         Wall: {
             documentClass: ConstructorOf<TWallDocument>;
             objectClass: ConstructorOf<Wall<TWallDocument>>;
-            layerClass: ConstructorOf<NonNullable<TWallDocument["object"]>["layer"]>;
+            layerClass: ConstructorOf<TWallDocument["object"]["layer"]>;
         };

         /* -------------------------------------------- */
@@ -290,6 +313,10 @@ declare global {
                 };
             };
             layers: {
+                background: {
+                    group: "primary";
+                    layerClass: typeof BackgroundLayer;
+                };
                 drawings: {
                     group: "primary";
                     layerClass: typeof DrawingsLayer;
@@ -300,11 +327,11 @@ declare global {
                 };
                 walls: {
                     group: "effects";
-                    layerClass: ConstructorOf<NonNullable<TWallDocument["object"]>["layer"]>;
+                    layerClass: ConstructorOf<TWallDocument["object"]["layer"]>;
                 };
                 templates: {
                     group: "primary";
-                    layerClass: ConstructorOf<NonNullable<TMeasuredTemplateDocument["object"]>["layer"]>;
+                    layerClass: ConstructorOf<TMeasuredTemplateDocument["object"]["layer"]>;
                 };
                 notes: {
                     group: "interface";
@@ -312,11 +339,11 @@ declare global {
                 };
                 tokens: {
                     group: "primary";
-                    layerClass: ConstructorOf<NonNullable<TTokenDocument["object"]>["layer"]>;
+                    layerClass: ConstructorOf<TTokenDocument["object"]["layer"]>;
                 };
-                tiles: {
+                foreground: {
                     group: "primary";
-                    layerClass: typeof TilesLayer;
+                    layerClass: typeof ForegroundLayer;
                 };
                 sounds: {
                     group: "interface";
@@ -324,7 +351,7 @@ declare global {
                 };
                 lighting: {
                     group: "effects";
-                    layerClass: ConstructorOf<NonNullable<TAmbientLightDocument["object"]>["layer"]>;
+                    layerClass: ConstructorOf<TAmbientLightDocument["object"]["layer"]>;
                 };
                 controls: {
                     group: "interface";
@@ -532,13 +559,13 @@ declare global {
         };

         ui: {
-            actors: ConstructorOf<ActorDirectory<Actor<null>>>;
+            actors: ConstructorOf<TActorDirectory>;
             chat: ConstructorOf<TChatLog>;
             combat: ConstructorOf<TCombatTracker>;
             compendium: ConstructorOf<TCompendiumDirectory>;
             controls: typeof SceneControls;
             hotbar: ConstructorOf<THotbar>;
-            items: ConstructorOf<ItemDirectory<Item<null>>>;
+            items: typeof ItemDirectory;
             // journal: typeof JournalDirectory;
             // macros: typeof MacroDirectory;
             menu: typeof MainMenu;
diff --git a/node_modules/foundry-types/client/core/hooks.d.ts b/node_modules/foundry-types/client/core/hooks.d.ts
index 1e898b7..0f66834 100644
--- a/node_modules/foundry-types/client/core/hooks.d.ts
+++ b/node_modules/foundry-types/client/core/hooks.d.ts
@@ -17,14 +17,12 @@ declare global {
     type HookParamsGetSceneControlButtons = HookParameters<"getSceneControlButtons", [SceneControl[]]>;
     type HookParamsHotbarDrop = HookParameters<"hotbarDrop", [Hotbar, unknown, string]>;
     type HookParamsLightingRefresh = HookParameters<"lightingRefresh", [LightingLayer]>;
-    type HookParamsPreCreateItem = HookParameters<
-        "preCreateItem",
-        [
-            PreCreate<foundry.documents.ItemSource>,
-            DocumentModificationContext<Actor<TokenDocument<Scene | null> | null> | null>,
-            string
-        ]
-    >;
+    type HookParamsPreCreate<T extends foundry.abstract.Document, N extends string> = HookParameters<`preCreate${N}`, [
+      T, // @param document
+      PreCreate<T>, // @param data
+      DocumentModificationContext<T>, // @param options
+      string // @param userId
+    ]>;
     type HooksParamsPreUpdateCombat = HookParameters<
         "preUpdateCombat",
         [Combat, object, { diff: boolean; advanceTime: number; [key: string]: unknown }, string]
@@ -33,24 +31,27 @@ declare global {
         "preUpdateToken",
         [
             Scene,
-            foundry.documents.TokenSource,
-            DeepPartial<foundry.documents.TokenSource>,
+            foundry.data.TokenData,
+            Partial<foundry.data.TokenData>,
             { diff: boolean; [key: string]: unknown },
             string
         ]
     >;
+    type HookParamsPreUpdate<T extends Document, N extends string> = HookParameters<`preUpdate${N}`, [T, DocumentUpdateData<T>, DocumentUpdateContext<T>, string]>
+    type HookParamsCreate<T extends Document, N extends string> = HookParameters<`create${N}`,[T,DocumentUpdateContext<T>, string]>
+
     type HookParamsRender<T extends Application, N extends string> = HookParameters<
         `render${N}`,
         [T, JQuery, ReturnType<T["getData"]>]
     >;
     type HookParamsRenderChatMessage = HookParameters<
         "renderChatMessage",
-        [ChatMessage, JQuery, foundry.documents.ChatMessageSource]
+        [ChatMessage, JQuery, foundry.data.ChatMessageSource]
     >;
     type HookParamsTargetToken = HookParameters<"targetToken", [User, Token, boolean]>;
     type HookParamsUpdate<T extends foundry.abstract.Document, N extends string> = HookParameters<
         `update${N}`,
-        [T, DocumentUpdateData<T>, DocumentModificationContext<T["parent"]>]
+        [T, DocumentUpdateData<T>, DocumentModificationContext]
     >;
     type HookParamsUpdateWorldTime = HookParameters<"updateWorldTime", [number, number]>;

@@ -60,6 +61,7 @@ declare global {
          *
          * @param hook The unique name of the hooked event
          * @param fn   The callback function which should be triggered when the hook event occurs
+         * @returns An ID number of the hooked function which can be used to turn off the hook later
          */
         static on(...args: HookParamsSetup): number;
         static on(...args: HookParamsInit): number;
@@ -72,17 +74,22 @@ declare global {
         static on(...args: HookParamsGetSceneControlButtons): number;
         static on(...args: HookParamsHotbarDrop): number;
         static on(...args: HookParamsLightingRefresh): number;
-        static on(...args: HookParamsPreCreateItem): number;
         static on(...args: HooksParamsPreUpdateCombat): number;
         static on(...args: HookParamsPreUpdateToken): number;
+        static on(...args: HookParamsPreUpdate<Actor, 'Actor'>): number
+        static on(...args: HookParamsPreUpdate<Item, 'Item'>): number
+
+        static on(...args: HookParamsPreUpdate<SettingConfig, 'Setting'>): number
+
         static on(...args: HookParamsRenderChatMessage): number;
         static on(...args: HookParamsRender<ChatLog, "ChatLog">): number;
         static on(...args: HookParamsRender<ChatPopout, "ChatPopout">): number;
         static on(...args: HookParamsRender<CombatTrackerConfig, "CombatTrackerConfig">): number;
         static on(...args: HookParamsRender<CompendiumDirectory, "CompendiumDirectory">): number;
+        static on(...args: HookParamsRender<Compendium,'Compendium'>): number
         static on(...args: HookParamsRender<Dialog, "Dialog">): number;
-        static on(...args: HookParamsRender<ActorDirectory<Actor<null>>, "ActorDirectory">): number;
-        static on(...args: HookParamsRender<ItemDirectory<Item<null>>, "ItemDirectory">): number;
+        static on(...args: HookParamsRender<ActorDirectory<Actor>, "ActorDirectory">): number;
+        static on(...args: HookParamsRender<ItemDirectory<Item>, "ItemDirectory">): number;
         static on(...args: HookParamsRender<SceneControls, "SceneControls">): number;
         static on(...args: HookParamsRender<Settings, "Settings">): number;
         static on(...args: HookParamsRender<TokenHUD, "TokenHUD">): number;
@@ -96,9 +103,19 @@ declare global {
             >
         ): number;
         static on(...args: HookParamsTargetToken): number;
+        static on(...args: HookParamsCreate<Actor, "Actor">): number
         static on(...args: HookParamsUpdate<Combat, "Combat">): number;
         static on(...args: HookParamsUpdate<Scene, "Scene">): number;
+        static on(...args: HookParamsUpdate<Actor, 'Actor'>): number
+		    static on(...args: HookParamsUpdate<Item, 'Item'>): number
         static on(...args: HookParamsUpdateWorldTime): number;
+        static on(...args: HookParamsPreCreate<Item, "Item">): number;
+        static on(...args: HookParamsPreCreate<Actor, "Actor">): number;
+        static on(...args: HookParamsPreCreate<JournalEntryPage, "JournalEntryPage">): number;
+        static on(
+          ...args: HookParameters<'preDeleteItem', [Item, any, number]>
+        ): number
+
         static on(...args: HookParameters<string, unknown[]>): number;

         /**
@@ -119,16 +136,15 @@ declare global {
         static once(...args: HookParamsGetSceneControlButtons): number;
         static once(...args: HookParamsHotbarDrop): number;
         static once(...args: HookParamsLightingRefresh): number;
-        static once(...args: HookParamsPreCreateItem): number;
         static once(...args: HookParamsPreUpdateToken): number;
         static once(...args: HookParamsRenderChatMessage): number;
-        static once(...args: HookParamsRender<ActorDirectory<Actor<null>>, "ActorDirectory">): number;
+        static once(...args: HookParamsRender<ActorDirectory<Actor>, "ActorDirectory">): number;
         static once(...args: HookParamsRender<ChatLog, "ChatLog">): number;
         static once(...args: HookParamsRender<ChatPopout, "ChatPopout">): number;
         static once(...args: HookParamsRender<CombatTrackerConfig, "CombatTrackerConfig">): number;
         static once(...args: HookParamsRender<CompendiumDirectory, "CompendiumDirectory">): number;
         static once(...args: HookParamsRender<Dialog, "Dialog">): number;
-        static once(...args: HookParamsRender<ItemDirectory<Item<null>>, "ItemDirectory">): number;
+        static once(...args: HookParamsRender<ItemDirectory<Item>, "ItemDirectory">): number;
         static once(
             ...args: HookParamsRender<JournalPageSheet<JournalEntryPage<JournalEntry | null>>, "JournalPageSheet">
         ): number;
@@ -145,8 +161,23 @@ declare global {
         static once(...args: HookParamsUpdate<Combat, "Combat">): number;
         static once(...args: HookParamsUpdate<Scene, "Scene">): number;
         static once(...args: HookParamsUpdateWorldTime): number;
+
         static once(...args: HookParameters<string, unknown[]>): number;

+        /**
+         * Notify subscribers that an error has occurred within foundry.
+         * @param {string} location                The method where the error was caught.
+         * @param {Error} error                    The error.
+         * @param {object} [options={}]            Additional options to configure behaviour.
+         * @param {string} [options.msg=""]        A message which should prefix the resulting error or notification.
+         * @param {?string} [options.log=null]     The level at which to log the error to console (if at all).
+         * @param {?string} [options.notify=null]  The level at which to spawn a notification in the UI (if at all).
+         * @param {object} [options.data={}]       Additional data to pass to the hook subscribers.
+         */
+        static onError(location: string, error: Error, options?: {
+          msg?: string, log?: string|null, notify?:string|null, data?: object
+        })
+
         /**
          * Unregister a callback handler for a particular hook event
          *
diff --git a/node_modules/foundry-types/client/core/settings.d.ts b/node_modules/foundry-types/client/core/settings.d.ts
index c97020a..5674309 100644
--- a/node_modules/foundry-types/client/core/settings.d.ts
+++ b/node_modules/foundry-types/client/core/settings.d.ts
@@ -100,21 +100,37 @@ declare global {

         /**
          * Get the value of a game setting for a certain module and setting key
-         * @param module    The module namespace under which the setting is registered
+         * @param namespace    The module namespace under which the setting is registered
          * @param key       The setting key to retrieve
          */
-        get(module: "core", key: "compendiumConfiguration"): Record<string, { private: boolean; locked: boolean }>;
-        get(module: "core", key: "defaultToken"): Partial<foundry.data.PrototypeTokenSource>;
-        get(module: "core", key: "rollMode"): RollMode;
-        get(module: string, key: string): unknown;
+        get<TNamespace extends keyof ClientSettings.Config, TKey extends keyof ClientSettings.Config[TNamespace]>(namespace: TNamespace, key: TKey): ClientSettings.Config[TNamespace][TKey]

         /**
          * Get the value of a game setting for a certain module and setting key
-         * @param module    The module namespace under which the setting is registered
+         * @param namespace    The module namespace under which the setting is registered
          * @param key   The setting key to retrieve
          * @param value The data to assign to the setting key
          */
-        set(module: string, key: string, value: unknown): Promise<unknown>;
+        set<TNamespace extends keyof ClientSettings.Config, TKey extends keyof ClientSettings.Config[TNamespace]>(namespace: TNamespace, key: TKey, value: ClientSettings.Config[TNamespace][TKey]): Promise<unknown>;
+    }
+
+    interface ClientSettings {}
+
+    namespace ClientSettings {
+        type DocType = keyof typeof game.system.documentTypes
+        type DocSubtype<T extends DocType> =
+          (typeof game.system.documentTypes)[T][number]
+
+        interface Config {
+          core:
+            {
+              compendiumConfiguration: Record<string, { private: boolean; locked: boolean }>,
+              defaultToken: Partial<foundry.data.PrototypeTokenSource>
+              rollMode: RollMode
+              sheetClasses: {
+          [TDoc in DocType]: Record<DocSubtype<TDoc>, string>
+        }}
+      }
     }

     interface SettingRegistration<



diff --git a/node_modules/foundry-types/client/documents/combatant.d.ts b/node_modules/foundry-types/client/documents/combatant.d.ts
index fe50b8d..640c63b 100644
--- a/node_modules/foundry-types/client/documents/combatant.d.ts
+++ b/node_modules/foundry-types/client/documents/combatant.d.ts
@@ -1,17 +1,25 @@
-import { ClientBaseCombatant } from "./client-base-mixes.mjs";
+import { CombatantConstructor } from "./constructors";

 declare global {
     /**
-     * The client-side Combatant document which extends the common BaseCombatant model.
+     * The Combatant embedded document within a Combat document which extends the BaseRollTable abstraction.
+     * Each Combatant belongs to the effects collection of its parent Document.
+     * Each Combatant contains a CombatantData object which provides its source data.
      *
-     * @see {@link Combat}                  The Combat document which contains Combatant embedded documents
-     * @see {@link CombatantConfig}         The application which configures a Combatant.
+     * @see {@link data.CombatantData} The Combatant data schema
+     * @see {@link documents.Combat}   The Combat document which contains Combatant embedded documents
      */
     class Combatant<
-        TParent extends Combat | null,
-        TTokenDocument extends TokenDocument<Scene | null> | null = TokenDocument<Scene | null> | null
-    > extends ClientBaseCombatant<TParent> {
-        constructor(data: PreCreate<foundry.documents.CombatantSource>, context?: DocumentConstructionContext<TParent>);
+        TParent extends Combat | null = Combat | null,
+        TActor extends Actor | null = Actor | null
+    > extends CombatantConstructor {
+        constructor(data: PreCreate<foundry.data.CombatantSource>, context?: DocumentConstructionContext<TParent>);
+
+        /** A cached reference to the Token which this Combatant represents, if any */
+        protected _token: NonNullable<TActor>["parent"];
+
+        /** A cached reference to the Actor which this Combatant represents, if any */
+        protected _actor: TActor;

         /** The current value of the special tracked resource which pertains to this Combatant */
         resource: { value: number } | null;
@@ -38,10 +46,10 @@ declare global {
         get isVisible(): boolean;

         /** A reference to the Actor document which this Combatant represents, if any */
-        get actor(): NonNullable<TTokenDocument>["actor"];
+        get actor(): TActor;

         /** A reference to the Token document which this Combatant represents, if any */
-        get token(): TTokenDocument;
+        get token(): NonNullable<TActor>["parent"];

         /** An array of User documents who have ownership of this Document */
         get players(): User[];
@@ -54,7 +62,7 @@ declare global {
         /* -------------------------------------------- */

         override testUserPermission(
-            user: User,
+            user: foundry.documents.BaseUser,
             permission: DocumentOwnershipString | DocumentOwnershipLevel,
             { exact }?: { exact?: boolean }
         ): boolean;
@@ -86,10 +94,11 @@ declare global {
         _getInitiativeFormula(): string;
     }

-    interface Combatant<
-        TParent extends Combat | null,
-        TTokenDocument extends TokenDocument<Scene | null> | null = TokenDocument<Scene | null> | null
-    > extends ClientBaseCombatant<TParent> {
+    interface Combatant<TParent extends Combat | null = Combat | null, TActor extends Actor | null = Actor | null> {
+        readonly data: foundry.data.CombatantData<this>;
+
+        readonly parent: TParent;
+
         _sheet: CombatantConfig<this>;
     }
 }

diff --git a/node_modules/foundry-types/client/documents/drawing-document.d.ts b/node_modules/foundry-types/client/documents/drawing-document.d.ts
index 7c4b40b..6faf11f 100644
--- a/node_modules/foundry-types/client/documents/drawing-document.d.ts
+++ b/node_modules/foundry-types/client/documents/drawing-document.d.ts
@@ -1,4 +1,4 @@
-import { CanvasBaseDrawing } from "./client-base-mixes.mjs";
+import { DrawingConstructor } from "./constructors";

 declare global {
     /**
@@ -9,7 +9,7 @@ declare global {
      * @see {@link applications.DrawingConfig}    The Drawing configuration application
      *
      */
-    class DrawingDocument<TParent extends Scene | null> extends CanvasBaseDrawing<TParent> {
+    class DrawingDocument extends DrawingConstructor {
         /** A reference to the User who created the Drawing document. */
         get author(): User | undefined;

@@ -17,7 +17,9 @@ declare global {
         override get isOwner(): boolean;
     }

-    interface DrawingDocument<TParent extends Scene | null> extends CanvasBaseDrawing<TParent> {
-        readonly _object: Drawing<this> | null;
+    interface DrawingDocument {
+        readonly parent: Scene | null;
+
+        readonly _object: Drawing;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/fog-exploration.d.ts b/node_modules/foundry-types/client/documents/fog-exploration.d.ts
index 15d54e7..fad0ac7 100644
--- a/node_modules/foundry-types/client/documents/fog-exploration.d.ts
+++ b/node_modules/foundry-types/client/documents/fog-exploration.d.ts
@@ -1,15 +1,15 @@
+import { FogExplorationConstructor } from "./constructors";
 import * as io from "socket.io";
-import { ClientBaseFogExploration } from "./client-base-mixes.mjs";

 declare global {
     /**
      * The client-side FogExploration document which extends the common BaseFogExploration abstraction.
      * Each FogExploration document contains FogExplorationData which defines its data schema.
      */
-    class FogExploration extends ClientBaseFogExploration {
+    class FogExploration<TToken extends Token = Token> extends FogExplorationConstructor {
         constructor(
-            data?: PreCreate<foundry.documents.FogExplorationSource>,
-            context?: DocumentConstructionContext<null>
+            data?: PreCreate<foundry.data.FogExplorationSource>,
+            context?: DocumentConstructionContext<FogExploration>
         );

         /**
@@ -18,7 +18,7 @@ declare global {
          * @param [force=false] Force the position to be re-explored
          * @returns Is the source position newly explored?
          */

diff --git a/node_modules/foundry-types/client/documents/item.d.ts b/node_modules/foundry-types/client/documents/item.d.ts
index 1805dc2..905d709 100644
--- a/node_modules/foundry-types/client/documents/item.d.ts
+++ b/node_modules/foundry-types/client/documents/item.d.ts
@@ -1,4 +1,4 @@
-import { ClientBaseItem } from "./client-base-mixes.mjs";
+import { ItemConstructor } from "./constructors";

 declare global {
     /**
@@ -8,9 +8,9 @@ declare global {
      * @see {@link documents.Items}            The world-level collection of Item documents
      * @see {@link applications.ItemSheet}     The Item configuration application
      */
-    class Item<TParent extends Actor<TokenDocument<Scene | null> | null> | null> extends ClientBaseItem<TParent> {
+    class Item<TParent extends Actor = Actor> extends ItemConstructor {
         /** A convenience alias of Item#parent which is more semantically intuitive */
-        get actor(): TParent;
+        get actor(): this["parent"];

         img: ImageFilePath;

@@ -31,20 +31,24 @@ declare global {

         protected override _getSheetClass(): ConstructorOf<NonNullable<this["_sheet"]>>;

-        protected static override _onCreateDocuments<TDocument extends foundry.abstract.Document>(
-            this: ConstructorOf<TDocument>,
-            items: TDocument[],
-            context: DocumentModificationContext<TDocument["parent"]>
+        protected static override _onCreateDocuments<T extends Item>(
+            this: ConstructorOf<T>,
+            items: T[],
+            context: DocumentModificationContext<T>
         ): void;

-        protected static override _onDeleteDocuments<TDocument extends foundry.abstract.Document>(
-            this: ConstructorOf<TDocument>,
-            items: TDocument[],
-            context: DocumentModificationContext<TDocument["parent"]>
+        protected static override _onDeleteDocuments<T extends Item>(
+            this: ConstructorOf<T>,
+            items: T[],
+            context: DocumentModificationContext<T>
         ): void;
     }

-    interface Item<TParent extends Actor<TokenDocument<Scene | null> | null> | null> extends ClientBaseItem<TParent> {
+    interface Item<TParent extends Actor = Actor> {
+        readonly parent: TParent | null;
+
+        get collection(): Items<this>;
+
         get uuid(): ItemUUID;

         _sheet: ItemSheet<this> | null;
@@ -53,5 +57,5 @@ declare global {
     }

     type EmbeddedItemUUID = `Actor.${string}.Item.${string}`;
-    type ItemUUID = WorldDocumentUUID<Item<null>> | EmbeddedItemUUID | CompendiumUUID;
+    type ItemUUID = WorldDocumentUUID<Item> | EmbeddedItemUUID | CompendiumUUID;
 }
diff --git a/node_modules/foundry-types/client/documents/journal-entry-page.d.ts b/node_modules/foundry-types/client/documents/journal-entry-page.d.ts
index ee0011c..d457bff 100644
--- a/node_modules/foundry-types/client/documents/journal-entry-page.d.ts
+++ b/node_modules/foundry-types/client/documents/journal-entry-page.d.ts
@@ -1,4 +1,4 @@
-import { ClientBaseJournalEntryPage } from "./client-base-mixes.mjs";
+export {};

 declare global {
     /**
@@ -6,7 +6,7 @@ declare global {
      *
      * @see {@link JournalEntry}  The JournalEntry document type which contains JournalEntryPage embedded documents.
      */
-    class JournalEntryPage<TParent extends JournalEntry | null> extends ClientBaseJournalEntryPage<TParent> {
+    class JournalEntryPage<TParent extends JournalEntry | null> extends foundry.abstract.Document<TParent> {
         /** The table of contents for this JournalEntryPage. */
         get toc(): JournalEntryPageHeading;

@@ -61,14 +61,19 @@ declare global {

         protected override _onUpdate(
             data: DeepPartial<this["_source"]>,
-            options: DocumentModificationContext<TParent>,
+            options: DocumentModificationContext<this>,
             userId: string
         ): void;
     }

-    interface JournalEntryPage<TParent extends JournalEntry | null> extends ClientBaseJournalEntryPage<TParent> {
+    interface JournalEntryPage<TParent extends JournalEntry | null, TType extends string = string, TSystemSource extends object = object>
+        extends BaseDocumentWithOmissions<foundry.documents.BaseJournalEntryPage<TParent>>,
+            foundry.abstract.Document<TParent> {
+        readonly _source: foundry.documents.JournalEntryPageSource<TType,TSystemSource>;
+
+        system: TSystemSource
+
         get documentName(): "JournalEntryPage";
-        get sheet(): JournalPageSheet<this>;
     }

     interface JournalEntryPageHeading {
@@ -84,3 +89,5 @@ declare global {
         children: string[];
     }
 }
+
+type JournalEntryPageTypeMap = Record<string, JournalEntryPage>;
diff --git a/node_modules/foundry-types/client/documents/journal-entry.d.ts b/node_modules/foundry-types/client/documents/journal-entry.d.ts
index 47313dd..90a65ea 100644
--- a/node_modules/foundry-types/client/documents/journal-entry.d.ts
+++ b/node_modules/foundry-types/client/documents/journal-entry.d.ts
@@ -1,4 +1,4 @@
-import { ClientBaseJournalEntry } from "./client-base-mixes.mjs";
+export {};

 declare global {
     /**
@@ -7,7 +7,7 @@ declare global {
      * @see {@link Journal}                       The world-level collection of JournalEntry documents
      * @see {@link JournalSheet}                  The JournalEntry configuration application
      */
-    class JournalEntry extends ClientBaseJournalEntry {
+    class JournalEntry extends foundry.abstract.Documentct.Document2<null> {
         /* -------------------------------------------- */
         /*  Properties                                  */
         /* -------------------------------------------- */
@@ -52,16 +52,20 @@ declare global {

         protected override _onUpdate(
             changed: DeepPartial<this["_source"]>,
-            options: DocumentUpdateContext<null>,
+            options: DocumentModificationContext,
             userId: string
         ): void;

-        protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
+        protected override _onDelete(options: DocumentModificationContext, userId: string): void;
     }

-    interface JournalEntry extends ClientBaseJournalEntry {
+    interface JournalEntry
+        extends BaseDocumentWithOmissions<foundry.documents.BaseJournalEntry>,
+            foundry.abstract.Documentct.Document2<null> {
+        readonly _source: foundry.documents.JournalEntrySource;
         readonly pages: foundry.abstract.EmbeddedCollection<JournalEntryPage<this>>;

+        get documentName(): "JournalEntry";
         get sheet(): JournalSheet<this>;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/macro.d.ts b/node_modules/foundry-types/client/documents/macro.d.ts
index 8e9d615..0d2574b 100644
--- a/node_modules/foundry-types/client/documents/macro.d.ts
+++ b/node_modules/foundry-types/client/documents/macro.d.ts
@@ -1,15 +1,16 @@
-import { ClientBaseMacro } from "./client-base-mixes.mjs";
+import { MacroConstructor } from "./constructors";

 declare global {
     /**
-     * The client-side Folder document which extends the common BaseFolder model.
+     * The client-side Macro document which extends the common BaseMacro abstraction.
+     * Each Macro document contains MacroData which defines its data schema.
      *
-     * @see {@link Folders}                     The world-level collection of Folder documents
-     * @see {@link FolderConfig}                The Folder configuration application
+     * @see {@link data.MacroData}              The Macro data schema
+     * @see {@link documents.Macros}            The world-level collection of Macro documents
+     * @see {@link applications.MacroConfig}    The Macro configuration application
      */
-    class Macro extends ClientBaseMacro {
+    class Macro extends MacroConstructor {
         command: string;
-
         /* -------------------------------------------- */
         /*  Properties                                  */
         /* -------------------------------------------- */
@@ -27,30 +28,18 @@ declare global {
          * @param [scope.actor] An Actor who is the protagonist of the executed action
          * @param [scope.token] A Token which is the protagonist of the executed action
          */
-        execute({ actor, token }?: { actor?: Actor<TokenDocument<Scene | null> | null>; token?: Token }): void;
+        execute({ actor, token }?: { actor?: Actor; token?: Token }): void;

         /**
          * Execute the command as a chat macro.
          * Chat macros simulate the process of the command being entered into the Chat Log input textarea.
          */
-        protected _executeChat({
-            actor,
-            token,
-        }?: {
-            actor?: Actor<TokenDocument<Scene | null> | null>;
-            token?: Token;
-        }): void;
+        protected _executeChat({ actor, token }?: { actor?: Actor; token?: Token }): void;

         /**
          * Execute the command as a script macro.
          * Script Macros are wrapped in an async IIFE to allow the use of asynchronous commands and await statements.
          */
-        protected _executeScript({
-            actor,
-            token,
-        }?: {
-            actor?: Actor<TokenDocument<Scene | null> | null>;
-            token?: Token;
-        }): void;
+        protected _executeScript({ actor, token }?: { actor?: Actor; token?: Token }): void;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/measured-template-document.d.ts b/node_modules/foundry-types/client/documents/measured-template-document.d.ts
index fdb90c4..d2a9ae2 100644
--- a/node_modules/foundry-types/client/documents/measured-template-document.d.ts
+++ b/node_modules/foundry-types/client/documents/measured-template-document.d.ts
@@ -1,26 +1,27 @@
-import { CanvasBaseMeasuredTemplate } from "./client-base-mixes.mjs";
+import { MeasuredTemplateDocumentConstructor } from "./constructors";

 declare global {
     /**
-     * The client-side MeasuredTemplate document which extends the common BaseMeasuredTemplate document model.
-     *
-     * @see {@link Scene}                     The Scene document type which contains MeasuredTemplate documents
-     * @see {@link MeasuredTemplateConfig}    The MeasuredTemplate configuration application
+     * The client-side MeasuredTemplate embedded document which extends the common BaseMeasuredTemplate abstraction.
+     * Each MeasuredTemplate document contains MeasuredTemplateData which defines its data schema.
      */
-    class MeasuredTemplateDocument<TParent extends Scene | null> extends CanvasBaseMeasuredTemplate<TParent> {
+    class MeasuredTemplateDocument extends MeasuredTemplateDocumentConstructor {
         /* -------------------------------------------- */
-        /*  Model Properties                            */
+        /*  Properties                                  */
         /* -------------------------------------------- */

-        /** A reference to the User who created the MeasuredTemplate document. */
-        get author(): User;
-
-        /** Rotation is an alias for direction */
-        get rotation(): number;
+        /** A flag for whether the current User has full ownership over the MeasuredTemplate document. */
+        override get isOwner(): boolean;
     }

-    interface MeasuredTemplateDocument<TParent extends Scene | null> extends CanvasBaseMeasuredTemplate<TParent> {
-        _sheet: MeasuredTemplateConfig<this> | null;
-        _object: MeasuredTemplate<this> | null;
+    interface MeasuredTemplateDocument {
+        readonly parent: Scene | null;
+
+        _sheet: MeasuredTemplateConfig | null;
+
+        /** A reference to the User who created the MeasuredTemplate document. */
+        readonly author: User | undefined;
+
+        readonly _object: MeasuredTemplate<MeasuredTemplateDocument> | null;
     }
 }

diff --git a/node_modules/foundry-types/scripts/generate-client-base-mixes.ts b/node_modules/foundry-types/client/documents/mixins/client-document-mixin2.d.ts
similarity index 70%
rename from node_modules/foundry-types/scripts/generate-client-base-mixes.ts
rename to node_modules/foundry-types/client/documents/mixins/client-document-mixin2.d.ts
index 73cf658..5dedea3 100644
--- a/node_modules/foundry-types/scripts/generate-client-base-mixes.ts
+++ b/node_modules/foundry-types/client/documents/mixins/client-document-mixin2.d.ts
@@ -1,24 +1,7 @@
-type ParentData = { name: string; hasParents: boolean };
-
-const genClientBase = (
-    className: string,
-    {
-        hasSheet = true,
-        isCanvasDoc = false,
-        parents = isCanvasDoc ? [{ name: "Scene", hasParents: false }] : [],
-    }: { hasSheet?: boolean; isCanvasDoc?: boolean; parents?: ParentData[] }
-) => {
-    const declareOrExportClientBase = isCanvasDoc ? "declare" : "export";
-    const clientBaseName = `ClientBase${className}`;
-    const typeParamName = parents
-        .map((p) => (p.hasParents ? `ClientBase${p.name}<any>` : `ClientBase${p.name}`))
-        .join(" | ");
-    const typeParams = typeParamName ? `<TParent extends ${typeParamName} | null>` : "";
-    const tParentOrBlank = typeParamName ? "<TParent>" : "";
-    const tParentOrNull = typeParamName ? "TParent" : "null";
-    console.log(String.raw`${declareOrExportClientBase} class ${clientBaseName}${typeParams} extends foundry.documents.Base${className}${tParentOrBlank} {
-    protected _sheet: FormApplication<this> | null;
-
+/** System note: refactored `foundry.abstract.Document` mixin typing approach in testing */
+// eslint-disable-next-line @typescript-eslint/no-explicit-any
+declare class foundry.abstract.Document<TParent extends foundry.abstract.Document<any> | null = foundry.abstract.Document<any> | null> extends foundry
+    .abstract.Document {
     /**
      * A collection of Application instances which should be re-rendered whenever this document is updated.
      * The keys of this object are the application ids and the values are Application instances. Each
@@ -27,11 +10,10 @@ const genClientBase = (
      */
     apps: { [K in number]?: Application };

-    constructor(data: object, context?: DocumentConstructionContext<${tParentOrNull}>);
+    constructor(data: object, context: DocumentConstructionContext<TParent>);

     static override name: string;

-
     protected override _initialize(options?: Record<string, unknown>): void;

     /* -------------------------------------------- */
@@ -64,16 +46,16 @@ const genClientBase = (
      * See the CONST.DOCUMENT_OWNERSHIP_LEVELS object for an enumeration of these levels.
      *
      * @example Get the permission level the current user has for a document
-     * \`\`\`js
+     * ```js
      * game.user.id; // "dkasjkkj23kjf"
      * actor.data.permission; // {default: 1, "dkasjkkj23kjf": 2};
      * actor.permission; // 2
-     * \`\`\`
+     * ```
      */
     get permission(): DocumentOwnershipLevel;

     /** Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available. */
-    get sheet(): ${hasSheet ? "FormApplication<this>" : "null"};
+    get sheet(): FormApplication<this> | null;

     /** A Universally Unique Identifier (uuid) for this Document instance. */
     get uuid(): DocumentUUID;
@@ -104,7 +86,7 @@ const genClientBase = (

     /**
      * Prepare all embedded Document instances which exist within this primary Document.
-     * @memberof ClientDocumentMixin#
+     * @memberof foundry.abstract.DocumentMixin#
      */
     prepareEmbeddedDocuments(): void;

@@ -130,14 +112,14 @@ const genClientBase = (
      * @param [sortOptions]        Options which are passed to the SortingHelpers.performIntegerSort method
      * @returns The Document after it has been re-sorted
      */
-    sortRelative({ updateData, ...sortOptions }: { updateData?: object } & SortingOptions<this>): Promise<void>;
+    sortRelative({ updateData, ...sortOptions }: { updateData?: object; sortOptions?: object }): Promise<void>;

     /**
      * Construct a UUID relative to another document.
      * @param doc The document to compare against.
      */
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    getRelativeUUID(doc: foundry.abstract.Document): string;
+    getRelativeUUID(doc: foundry.abstract.Document<any>): string;

     /**
      * Handle clicking on a content link for this document.
@@ -151,17 +133,17 @@ const genClientBase = (

     protected override _onCreate(
         data: this["_source"],
-        options: DocumentModificationContext<${tParentOrNull}>,
+        options: DocumentModificationContext<this>,
         userId: string
     ): void;

     protected override _onUpdate(
         data: DeepPartial<this["_source"]>,
-        options: DocumentModificationContext<${tParentOrNull}>,
+        options: DocumentModificationContext<this>,
         userId: string
     ): void;

-    protected override _onDelete(options: DocumentModificationContext<${tParentOrNull}>, userId: string): void;
+    protected override _onDelete(options: DocumentModificationContext<this>, userId: string): void;

     /**
      * Preliminary actions taken before a set of embedded Documents in this parent Document are created.
@@ -247,7 +229,7 @@ const genClientBase = (
      */
     protected _onDeleteEmbeddedDocuments(
         embeddedName: string,
-        documents: foundry.abstract.Document<this>[],
+        documents: foundry.abstract.Document[],
         result: string[],
         options: DocumentModificationContext<this>,
         userId: string
@@ -267,14 +249,18 @@ const genClientBase = (
      * @param [context={}] Additional context options or dialog positioning options
      * @returns A Promise which resolves to the created Document, or null if the dialog was closed.
      */
-    static createDialog<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
+    static createDialog(
         data?: Record<string, unknown>,
-        context?: {
-            parent?: TDocument["parent"];
-            pack?: Collection<TDocument> | null;
-        } & Partial<FormApplicationOptions>
-    ): Promise<TDocument | null>;
+        {
+            parent,
+            pack,
+            ...options
+        }?: {
+            parent: foundry.abstract.Document | null;
+            pack: CompendiumCollection<CompendiumDocument> | null;
+            options?: Record<string, unknown>;
+        }
+    ): Promise<InstanceType<typeof this> | null>;

     /**
      * Present a Dialog form to confirm deletion of this Document.
@@ -285,7 +271,7 @@ const genClientBase = (

     /**
      * Export document data to a JSON file which can be saved by the client and later imported into a different session.
-     * @param [options] Additional options passed to the {@link ClientDocumentMixin#toCompendium} method
+     * @param [options] Additional options passed to the {@link foundry.abstract.DocumentMixin#toCompendium} method
      */
     exportToJSON(options?: Record<string, unknown>): void;

@@ -310,24 +296,21 @@ const genClientBase = (
      * Serialize salient information about this Document when dragging it.
      * @returns An object of drag data.
      */
-    toDragData(): { type: string; [key: string]: unknown };
+    toDragData(): object;

     /**
      * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.
      * The dropped data could have:
      * 1. A data object explicitly provided
      * 2. A UUID
+     * @memberof foundry.abstract.DocumentMixin
      *
      * @param data    The data object extracted from a DataTransfer event
      * @param options Additional options which affect drop data behavior
      * @returns The resolved Document
      * @throws If a Document could not be retrieved from the provided data.
      */
-    static fromDropData<TDocument extends foundry.abstract.Document>(
-        this: ConstructorOf<TDocument>,
-        data: object,
-        options?: Record<string, unknown>
-    ): Promise<TDocument | undefined>;
+    static fromDropData(data?: object, options?: Record<string, unknown>): Promise<foundry.abstract.Document>;

     /**
      * Update this Document using a provided JSON string.
@@ -362,109 +345,26 @@ const genClientBase = (
         }
     ): this["_source"];
 }
-`);
-
-    if (isCanvasDoc) {
-        const canvasBaseName = `CanvasBase${className}`;
-
-        console.log(String.raw`/**
- * A specialized sub-class of the ClientDocumentMixin which is used for document types that are intended to be
- * represented upon the game Canvas.
- * @category - Mixins
- */
-export class ${canvasBaseName}<
-    TParent extends ClientBaseScene | null
-> extends ${clientBaseName}<TParent> {
-    /** A reference to the PlaceableObject instance which represents this Embedded Document. */
-    _object: PlaceableObject<this> | null;
-
-    /** Has this object been deliberately destroyed as part of the deletion workflow? */
-    protected _destroyed: boolean;
-
-    constructor(data: object, context: DocumentConstructionContext<TParent>);
-
-    /* -------------------------------------------- */
-    /*  Properties                                  */
-    /* -------------------------------------------- */
-
-    /** A lazily constructed PlaceableObject instance which can represent this Document on the game canvas. */
-    get object(): this["_object"];
-
-    /** A reference to the CanvasLayer which contains Document objects of this type. */
-    get layer(): NonNullable<this["object"]>["layer"] | null;

-    /** An indicator for whether this document is currently rendered on the game canvas. */
-    get rendered(): boolean;
-
-    /* -------------------------------------------- */
-    /*  Event Handlers                              */
-    /* -------------------------------------------- */
-
-    /**
-     * @see abstract.Document#_onCreate
-     */
-    protected override _onCreate(data: this["_source"], options: DocumentModificationContext<TParent>, userId: string): void;
-
-    /**
-     * @see abstract.Document#_onUpdate
-     */
-    protected override _onUpdate(
-        changed: DeepPartial<this["_source"]>,
-        options: DocumentUpdateContext<TParent>,
-        userId: string
-    ): void;
-
-    /**
-     * @see abstract.Document#_onDelete
-     */
-    protected _onDelete(options: DocumentModificationContext<TParent>, userId: string): void;
+// eslint-disable-next-line @typescript-eslint/no-explicit-any
+declare interface foundry.abstract.Document<TParent extends foundry.abstract.Document<any> | null = foundry.abstract.Document<any> | null>
+    extends foundry.abstract.Document {
+    readonly parent: TParent;
 }

-export interface ${canvasBaseName}<
-    TParent extends ClientBaseScene | null
-> extends ${clientBaseName}<TParent> {
-    // System note: in most but not all canvas documents
-    hidden?: boolean;
-}
-`);
-    }
-};
-
-const clientDocs: Record<string, { hasSheet?: boolean; isCanvasDoc?: boolean; parents?: ParentData[] }> = {
-    AmbientLight: { isCanvasDoc: true },
-    AmbientSound: { isCanvasDoc: true },
-    ActiveEffect: {
-        parents: [
-            { name: "Actor", hasParents: true },
-            { name: "Item", hasParents: true },
-        ],
-    },
-    Actor: { parents: [{ name: "Token", hasParents: true }] },
-    Adventure: {},
-    Cards: {},
-    ChatMessage: {},
-    Combat: {},
-    Combatant: { parents: [{ name: "Combat", hasParents: false }] },
-    Drawing: { isCanvasDoc: true },
-    FogExploration: { hasSheet: false },
-    Folder: {},
-    Item: { parents: [{ name: "Actor", hasParents: true }] },
-    JournalEntry: {},
-    JournalEntryPage: { parents: [{ name: "JournalEntry", hasParents: false }] },
-    Macro: {},
-    MeasuredTemplate: { isCanvasDoc: true },
-    Note: { isCanvasDoc: true },
-    Playlist: {},
-    PlaylistSound: { parents: [{ name: "Playlist", hasParents: false }] },
-    RollTable: {},
-    Scene: {},
-    TableResult: { parents: [{ name: "RollTable", hasParents: false }] },
-    Tile: { isCanvasDoc: true },
-    Token: { isCanvasDoc: true },
-    User: {},
-    Wall: { isCanvasDoc: true },
-};
-
-for (const [className, data] of Object.entries(clientDocs)) {
-    genClientBase(className, data);
-}
+type BaseDocumentWithOmissions<TDocument extends foundry.abstract.Document> = Omit<
+    TDocument,
+    | "_initialize"
+    | "_source"
+    | "clone"
+    | "delete"
+    | "documentName"
+    | "getUserLevel"
+    | "parent"
+    | "setFlag"
+    | "toJSON"
+    | "toObject"
+    | "unsetFlag"
+    | "update"
+    | "updateSource"
+>;

diff --git a/node_modules/foundry-types/client/documents/note-document.d.ts b/node_modules/foundry-types/client/documents/note-document.d.ts
index 1f607b3..ca39f92 100644
--- a/node_modules/foundry-types/client/documents/note-document.d.ts
+++ b/node_modules/foundry-types/client/documents/note-document.d.ts
@@ -1,4 +1,4 @@
-import { CanvasBaseNote } from "./client-base-mixes.mjs";
+import { NoteDocumentConstructor } from "./constructors";

 declare global {
     /**
@@ -8,7 +8,7 @@ declare global {
      * @see {@link documents.Scene}               The Scene document type which contains Note embedded documents
      * @see {@link applications.NoteConfig}       The Note configuration application
      */
-    class NoteDocument<TParent extends Scene | null> extends CanvasBaseNote<TParent> {
+    class NoteDocument extends NoteDocumentConstructor {
         /** The associated JournalEntry which is referenced by this Note */
         get entry(): JournalEntry;

@@ -16,7 +16,9 @@ declare global {
         get label(): string;
     }

-    interface NoteDocument<TParent extends Scene | null> extends CanvasBaseNote<TParent> {
-        readonly _object: Note<this> | null;
+    interface NoteDocument {
+        readonly parent: Scene | null;
+
+        readonly _object: Note;
     }
 }

diff --git a/node_modules/foundry-types/client/documents/table-result.d.ts b/node_modules/foundry-types/client/documents/table-result.d.ts
index 8444c3f..ebb857b 100644
--- a/node_modules/foundry-types/client/documents/table-result.d.ts
+++ b/node_modules/foundry-types/client/documents/table-result.d.ts
@@ -1,12 +1,14 @@
-import { ClientBaseTableResult } from "./client-base-mixes.mjs";
-
+import { TableResultConstructor } from "./constructors";
 declare global {
     /**
-     * The client-side TableResult document which extends the common BaseTableResult document model.
+     * The TableResult embedded document within a RollTable document which extends the BaseRollTable abstraction.
+     * Each TableResult belongs to the results collection of a RollTable entity.
+     * Each TableResult contains a TableResultData object which provides its source data.
      *
-     * @see {@link RollTable} The RollTable document type which contains TableResult documents
+     * @see {@link data.TableResultData}        The TableResult data schema
+     * @see {@link documents.RollTable}         The RollTable document which contains TableResult embedded documents
      */
-    class TableResult<TParent extends RollTable> extends ClientBaseTableResult<TParent> {
+    class TableResult extends TableResultConstructor {
         /** A path reference to the icon image used to represent this result */
         get icon(): string;

@@ -16,4 +18,8 @@ declare global {
          */
         getChatText(): string;
     }
+
+    interface TableResult {
+        readonly parent: RollTable | null;
+    }
 }
diff --git a/node_modules/foundry-types/client/documents/tile-document.d.ts b/node_modules/foundry-types/client/documents/tile-document.d.ts
index 0ca5726..9c8bb44 100644
--- a/node_modules/foundry-types/client/documents/tile-document.d.ts
+++ b/node_modules/foundry-types/client/documents/tile-document.d.ts
@@ -1,9 +1,11 @@
-import { CanvasBaseTile } from "./client-base-mixes.mjs";
+import { TileDocumentConstructor } from "./constructors";

 declare global {
-    class TileDocument<TParent extends Scene | null> extends CanvasBaseTile<TParent> {}
+    class TileDocument extends TileDocumentConstructor {}

-    interface TileDocument<TParent extends Scene | null> extends CanvasBaseTile<TParent> {
-        readonly _object: Tile<this> | null;
+    interface TileDocument {
+        readonly parent: Scene | null;
+
+        readonly _object: Tile;
     }
 }
diff --git a/node_modules/foundry-types/client/documents/token-document.d.ts b/node_modules/foundry-types/client/documents/token-document.d.ts
index d106e4e..9990c8a 100644
--- a/node_modules/foundry-types/client/documents/token-document.d.ts
+++ b/node_modules/foundry-types/client/documents/token-document.d.ts
@@ -1,10 +1,12 @@
-import { CanvasBaseToken } from "./client-base-mixes.mjs";
+import { TokenDocumentConstructor } from "./constructors";
+
+type _Actor = Actor<TokenDocument<_Actor>>;

 declare global {
-    class TokenDocument<TParent extends Scene | null> extends CanvasBaseToken<TParent> {
+    class TokenDocument<TActor extends Actor = _Actor> extends TokenDocumentConstructor {
         constructor(
-            data: PreCreate<foundry.documents.TokenSource>,
-            context?: TokenDocumentConstructionContext<TParent, Actor<TokenDocument<Scene | null>> | null>
+            data: PreCreate<foundry.data.TokenSource>,
+            context?: TokenDocumentConstructionContext<Scene | null, TActor | null>
         );

         /** An array of detection modes which are available to this Token */
@@ -12,12 +14,18 @@ declare global {

         sort: number;

+        /**
+         * A cached reference to the Actor document that this Token modifies.
+         * This may be a "synthetic" unlinked Token Actor which does not exist in the World.
+         */
+        protected _actor: TActor | null;
+
         /**
          * A lazily evaluated reference to the Actor this Token modifies.
-         * If actorLink is true, then the document is the primary Actor document.
-         * Otherwise, the Actor document is a synthetic (ephemeral) document constructed using the Token's actorData.
+         * If actorLink is true, then the entity is the primary Actor document.
+         * Otherwise the Actor entity is a synthetic (ephemeral) document constructed using the Token's actorData.
          */
-        get actor(): Actor<this | null> | null;
+        get actor(): TActor | null;

         /** An indicator for whether or not the current User has full control over this Token document. */
         override get isOwner(): boolean;
@@ -26,7 +34,7 @@ declare global {
         get isLinked(): this["actorLink"];

         /** Return a reference to a Combatant that represents this Token, if one is present in the current encounter. */
-        get combatant(): Combatant<Combat, this> | null;
+        get combatant(): Combatant<Combat> | null;

         /** An indicator for whether or not this Token is currently involved in the active combat encounter. */
         get inCombat(): boolean;
@@ -44,21 +52,24 @@ declare global {
         protected _prepareDetectionModes(): void;

         override clone(
-            data: DeepPartial<this["_source"]> | undefined,
+            data: DeepPartial<foundry.data.TokenSource> | undefined,
             options: { save: true; keepId?: boolean }
         ): Promise<this>;
-        override clone(data?: DeepPartial<this["_source"]>, options?: { save?: false; keepId?: boolean }): this;
         override clone(
-            data?: DeepPartial<this["_source"]>,
+            data?: DeepPartial<foundry.data.TokenSource>,
+            options?: { save?: false; keepId?: boolean }
+        ): this;
+        override clone(
+            data?: DeepPartial<foundry.data.TokenSource>,
             options?: { save?: boolean; keepId?: boolean }
         ): this | Promise<this>;

         /**
          * Create a synthetic Actor using a provided Token instance
-         * If the Token data is linked, return the true Actor document
+         * If the Token data is linked, return the true Actor entity
          * If the Token data is not linked, create a synthetic Actor using the Token's actorData override
          */
-        getActor(): Actor<this | null> | null;
+        getActor(): TActor | null;

         /**
          * A helper method to retrieve the underlying data behind one of the Token's attribute bars
@@ -87,10 +98,11 @@ declare global {
          * @param options  Provided options which modify the update request
          * @returns The updated un-linked Actor instance
          */
-        modifyActorDocument(
-            update: Record<string, unknown>,
-            options: DocumentModificationContext<this>
-        ): Promise<Actor<this>[]>;
+        modifyActorDocument(update: Record<string, unknown>, options: DocumentModificationContext): Promise<TActor[]>;
+
+        override getEmbeddedCollection(
+            embeddedName: "Item" | "ActiveEffect"
+        ): ReturnType<TActor["getEmbeddedCollection"]>;

         /**
          * Redirect creation of Documents within a synthetic Token Actor to instead update the tokenData override object.
@@ -101,9 +113,9 @@ declare global {
          */
         createActorEmbeddedDocuments(
             embeddedName: "ActiveEffect" | "Item",
-            data: PreCreate<foundry.documents.ActiveEffectSource>[] | Partial<foundry.documents.ActiveEffectSource>[],
-            options?: DocumentModificationContext<this>
-        ): ActiveEffect<Actor<this>> | Item<Actor<this>>[];
+            data: PreCreate<foundry.data.ActiveEffectSource>[] | Partial<foundry.data.ActiveEffectSource>[],
+            options?: DocumentModificationContext
+        ): ActiveEffect | Item[];

         /**
          * Redirect updating of Documents within a synthetic Token Actor to instead update the tokenData override object.
@@ -114,9 +126,9 @@ declare global {
          */
         updateActorEmbeddedDocuments(
             embeddedName: "ActiveEffect" | "Item",
-            updates: EmbeddedDocumentUpdateData<ActiveEffect<Actor<this>> | Item<Actor<this>>>[],
-            options: DocumentModificationContext<this>
-        ): Promise<ActiveEffect<Actor<this>>[] | Item<Actor<this>>[]>;
+            updates: EmbeddedDocumentUpdateData<ActiveEffect | Item>[],
+            options: DocumentModificationContext
+        ): Promise<ActiveEffect[] | Item[]>;

         /**
          * Redirect deletion of Documents within a synthetic Token Actor to instead update the tokenData override object.
@@ -128,8 +140,8 @@ declare global {
         deleteActorEmbeddedDocuments(
             embeddedName: "ActiveEffect" | "Item",
             ids: string[],
-            options: DocumentModificationContext<this>
-        ): Promise<ActiveEffect<Actor<this>>[] | Item<Actor<this>>[]>;
+            options: DocumentModificationContext
+        ): Promise<ActiveEffect[] | Item[]>;

         /* -------------------------------------------- */
         /*  Event Handlers                              */
@@ -137,30 +149,30 @@ declare global {

         protected override _preUpdate(
             data: DocumentUpdateData<this>,
-            options: TokenUpdateContext<TParent>,
+            options: DocumentModificationContext<this>,
             user: User
         ): Promise<void>;

         /** When the Actor data overrides change for an un-linked Token Actor, simulate the pre-update process. */
         protected _preUpdateTokenActor(
-            data: DocumentUpdateData<Actor<this>>,
-            options: TokenUpdateContext<TParent>,
+            data: DocumentUpdateData<TActor>,
+            options: TokenUpdateContext<this>,
             userId: string
         ): Promise<void>;

         protected override _onUpdate(
             changed: DeepPartial<this["_source"]>,
-            options: DocumentModificationContext<TParent>,
+            options: DocumentModificationContext,
             userId: string
         ): void;

         /** When the base Actor for a TokenDocument changes, we may need to update its Actor instance */
-        _onUpdateBaseActor(update?: Record<string, unknown>, options?: DocumentModificationContext<null>): void;
+        _onUpdateBaseActor(update?: Record<string, unknown>, options?: DocumentModificationContext<Actor>): void;

         /** When the Actor data overrides change for an un-linked Token Actor, simulate the post-update process. */
         protected _onUpdateTokenActor(
             data: DeepPartial<this["_source"]["actorData"]>,
-            options: DocumentModificationContext<TParent>,
+            options: DocumentModificationContext,
             userId: string
         ): void;

@@ -171,24 +183,35 @@ declare global {
         static getTrackedAttributeChoices(attributes: TokenAttributes): TokenAttributes;
     }

-    interface TokenDocument<TParent extends Scene | null> extends CanvasBaseToken<TParent> {
-        get object(): Token<this> | null;
-        get sheet(): TokenConfig<this>;
+    interface TokenDocument {
+        readonly data: foundry.data.TokenData<this>;
+
+        readonly parent: Scene | null;
+
+        // V10 shim
+        readonly flags: this["data"]["flags"];
+
         get uuid(): TokenDocumentUUID;
+
+        _sheet: TokenConfig<TokenDocument> | null;
+
+        readonly _object: Token<TokenDocument> | null;
     }

-    interface TokenDocumentConstructionContext<
-        TParent extends Scene | null,
-        TActor extends Actor<TokenDocument<Scene | null>> | null
-    > extends DocumentConstructionContext<TParent> {
+    interface TokenDocumentConstructionContext<TParent extends Scene | null, TActor extends Actor | null>
+        extends DocumentConstructionContext<TParent> {
         actor?: TActor;
     }

-    interface TokenUpdateContext<TParent extends Scene | null> extends DocumentModificationContext<TParent> {
+    interface TokenUpdateContext<T extends TokenDocument> extends DocumentModificationContext<T> {
         action?: "create" | "update" | "delete";
         embedded?: { embeddedName: string; hookData: { _id?: string }[] };
     }

+    namespace TokenDocument {
+        function _canUpdate(user: User, doc: TokenDocument, data: foundry.data.TokenData<TokenDocument>): boolean;
+    }
+
     type TokenDocumentUUID = `Scene.${string}.Token.${string}`;

     interface TokenAttributes {
diff --git a/node_modules/foundry-types/client/documents/user.d.ts b/node_modules/foundry-types/client/documents/user.d.ts
index 559d6e0..c2e7fb3 100644
--- a/node_modules/foundry-types/client/documents/user.d.ts
+++ b/node_modules/foundry-types/client/documents/user.d.ts
@@ -1,24 +1,21 @@
-import { ClientBaseUser } from "./client-base-mixes.mjs";
+import { UserConstructor } from "./constructors";

 declare global {
     /**
      * The client-side User document which extends the common BaseUser model.
      * Each User document contains UserData which defines its data schema.
      *
-     * @extends documents.BaseUser
-     * @mixes ClientDocumentMixin
-     *
      * @see {@link documents.Users}             The world-level collection of User documents
      * @see {@link applications.UserConfig}     The User configuration application
      */
-    class User extends ClientBaseUser {
+    class User<TActor extends Actor = Actor> extends UserConstructor {
         constructor(data: PreCreate<foundry.documents.UserSource>, context?: DocumentConstructionContext<null>);

         /** Track whether the user is currently active in the game */
         active: boolean;

         /** Track references to the current set of Tokens which are targeted by the User */
-        targets: Set<Token>;
+        targets: Set<NonNullable<NonNullable<TActor["token"]>["object"]>>;

         /** Track the ID of the Scene that is currently being viewed by the User */
         viewedScene: string | null;
@@ -88,15 +85,15 @@ declare global {

         protected override _onUpdate(
             changed: DeepPartial<foundry.documents.UserSource>,
-            options: DocumentModificationContext<null>,
+            options: DocumentModificationContext<this>,
             userId: string
         ): void;

-        protected override _onDelete(options: DocumentModificationContext<null>, userId: string): void;
+        protected override _onDelete(options: DocumentModificationContext<this>, userId: string): void;
     }

-    interface User extends ClientBaseUser {
-        character: Actor<null> | null;
+    interface User<TActor extends Actor = Actor> {
+        character: TActor | null | undefined;
     }

     interface UserActivity {
diff --git a/node_modules/foundry-types/client/documents/wall-document.d.ts b/node_modules/foundry-types/client/documents/wall-document.d.ts
index 9c4dbd6..314568d 100644
--- a/node_modules/foundry-types/client/documents/wall-document.d.ts
+++ b/node_modules/foundry-types/client/documents/wall-document.d.ts
@@ -1,9 +1,11 @@
-import { CanvasBaseWall } from "./client-base-mixes.mjs";
+import { WallDocumentConstructor } from "./constructors";

 declare global {
-    class WallDocument<TParent extends Scene | null> extends CanvasBaseWall<TParent> {}
+    class WallDocument<TParent extends Scene | null> extends WallDocumentConstructor {}

-    interface WallDocument<TParent extends Scene | null> extends CanvasBaseWall<TParent> {
-        get object(): Wall<this> | null;
+    interface WallDocument<TParent extends Scene | null> {
+        readonly parent: TParent;
+
+        readonly _object: Wall<this>;
     }
 }
diff --git a/node_modules/foundry-types/client/game.d.ts b/node_modules/foundry-types/client/game.d.ts
index 9e20318..0243f7f 100644
--- a/node_modules/foundry-types/client/game.d.ts
+++ b/node_modules/foundry-types/client/game.d.ts
@@ -14,14 +14,14 @@ declare global {
      * @param socket    The open web-socket which should be used to transact game-state data
      */
     class Game<
-        TActor extends Actor<null>,
+        TActor extends Actor,
         TActors extends Actors<TActor>,
-        TChatMessage extends ChatMessage,
+        TChatMessage extends ChatMessage<TActor>,
         TCombat extends Combat,
-        TItem extends Item<null>,
+        TItem extends Item<TActor>,
         TMacro extends Macro,
         TScene extends Scene,
-        TUser extends User
+        TUser extends User<TActor>
     > {
         /**
          * The named view which is currently active.
@@ -36,11 +36,11 @@ declare global {
         data: {
             actors: TActor["_source"][];
             items: TItem["_source"][];
-            macros: TMacro["_source"][];
-            messages: TChatMessage["_source"][];
+            macros: foundry.data.MacroSource[];
+            messages: foundry.data.ChatMessageSource[];
             packs: CompendiumMetadata[];
-            tables: foundry.documents.RollTableSource[];
-            users: TUser["_source"][];
+            tables: foundry.data.RollTableSource[];
+            users: foundry.documents.UserSource[];
             version: string;
         };

@@ -163,9 +163,7 @@ declare global {
          * Fetch World data and return a Game instance
          * @return A Promise which resolves to the created Game instance
          */
-        static create(): Promise<
-            Game<Actor<null>, Actors<Actor<null>>, ChatMessage, Combat, Item<null>, Macro, Scene, User>
-        >;
+        static create(): Promise<Game<Actor, Actors<Actor>, ChatMessage, Combat, Item, Macro, Scene, User>>;

         /** Request World data from server and return it */
         static getWorldData(socket: io.Socket): Promise<object>;
diff --git a/node_modules/foundry-types/client/keyboard/client-keybindings.d.ts b/node_modules/foundry-types/client/keyboard/client-keybindings.d.ts
index 64cefe6..f2d7a2d 100644
--- a/node_modules/foundry-types/client/keyboard/client-keybindings.d.ts
+++ b/node_modules/foundry-types/client/keyboard/client-keybindings.d.ts
@@ -157,9 +157,7 @@ declare global {
         private static _onToggleCharacterSheet(
             event: KeyboardEvent,
             context: KeyboardEventContext
-        ):
-            | ActorSheet<Actor<TokenDocument<Scene | null> | null>>
-            | Promise<ActorSheet<Actor<TokenDocument<Scene | null> | null>>>;
+        ): ActorSheet | Promise<ActorSheet>;

         /**
          * Handle action to target the currently hovered token.
@@ -179,7 +177,7 @@ declare global {
          * @param context The context data of the event
          * @param layer   The Placeables layer
          */
-        private _handleMovement(context: KeyboardEventContext, layer: TokenLayer<Token> | TilesLayer<Tile>): void;
+        private _handleMovement(context: KeyboardEventContext, layer: TokenLayer | BackgroundLayer): void;

         /** Handle panning the canvas using CTRL + directional keys */
         private _handleCanvasPan(): Promise<void>;
diff --git a/node_modules/foundry-types/client/pixi/canvas.d.ts b/node_modules/foundry-types/client/pixi/canvas.d.ts
index afb30e6..eafbbf2 100644
--- a/node_modules/foundry-types/client/pixi/canvas.d.ts
+++ b/node_modules/foundry-types/client/pixi/canvas.d.ts
@@ -92,14 +92,15 @@ declare global {
         primary: PrimaryCanvasGroup;

         // Layers
+        background: BackgroundLayer;
         controls: ControlsLayer;
         drawings: DrawingsLayer;
+        foreground: ForegroundLayer;
         grid: GridLayer;
         lighting: TAmbientLight["layer"];
         notes: NotesLayer;
         sounds: SoundsLayer;
         templates: TMeasuredTemplate["layer"];
-        tiles: Tile["layer"];
         tokens: TToken["layer"];
         walls: WallsLayer;

diff --git a/node_modules/foundry-types/client/pixi/helpers/point-source/base.d.ts b/node_modules/foundry-types/client/pixi/helpers/point-source/base.d.ts
index 766462d..cd27ade 100644
--- a/node_modules/foundry-types/client/pixi/helpers/point-source/base.d.ts
+++ b/node_modules/foundry-types/client/pixi/helpers/point-source/base.d.ts
@@ -5,7 +5,7 @@ declare global {
      * A helper class used by the Sight Layer to represent a source of vision or illumination.
      * @param object The object responsible for the PointSource
      */
-    abstract class PointSource<TObject extends Maybe<PlaceableObject> = Maybe<PlaceableObject>> {
+    abstract class PointSource<TObject extends PlaceableObject | undefined = PlaceableObject | undefined> {
         constructor(object: TObject);

         /** The PlaceableObject which is the origin of this PointSource. */
diff --git a/node_modules/foundry-types/client/pixi/helpers/point-source/light-source.d.ts b/node_modules/foundry-types/client/pixi/helpers/point-source/light-source.d.ts
index e73cc34..e62f235 100644
--- a/node_modules/foundry-types/client/pixi/helpers/point-source/light-source.d.ts
+++ b/node_modules/foundry-types/client/pixi/helpers/point-source/light-source.d.ts
@@ -5,7 +5,7 @@ declare global {
      * A specialized subclass of the PointSource abstraction which is used to control the rendering of light sources.
      * @param object The light-emitting object that generates this light source
      */
-    class LightSource<TObject extends Maybe<AmbientLight | Token>> extends PointSource<TObject> {
+    class LightSource<TObject extends AmbientLight | Token | undefined> extends PointSource<TObject> {
         constructor(object: TObject);

         /** The light or darkness container for this source */
diff --git a/node_modules/foundry-types/client/pixi/perception/vision-mode.d.ts b/node_modules/foundry-types/client/pixi/perception/vision-mode.d.ts
index dfc6540..bbca401 100644
--- a/node_modules/foundry-types/client/pixi/perception/vision-mode.d.ts
+++ b/node_modules/foundry-types/client/pixi/perception/vision-mode.d.ts
@@ -49,10 +49,7 @@ declare global {
                 adaptive: boolean;
             };
             defaults: Partial<
-                Pick<
-                    TokenDocument<Scene | null>["sight"],
-                    "attenuation" | "brightness" | "saturation" | "contrast" | "range"
-                >
+                Pick<TokenDocument["sight"], "attenuation" | "brightness" | "saturation" | "contrast" | "range">
             >;
         };

diff --git a/node_modules/foundry-types/client/pixi/placeable-object/ambient-light.d.ts b/node_modules/foundry-types/client/pixi/placeable-object/ambient-light.d.ts
index 523c4e4..3e5bf6d 100644
--- a/node_modules/foundry-types/client/pixi/placeable-object/ambient-light.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeable-object/ambient-light.d.ts
@@ -1,5 +1,5 @@
 declare class AmbientLight<
-    TDocument extends AmbientLightDocument<Scene | null> = AmbientLightDocument<Scene | null>
+    TDocument extends AmbientLightDocument = AmbientLightDocument
 > extends PlaceableObject<TDocument> {
     constructor(document: TDocument);

@@ -36,8 +36,6 @@ declare class AmbientLight<

     override refresh(): this;

-    protected override _refresh(options: object): void;
-
     /** Refresh the display of the ControlIcon for this AmbientLight source */
     refreshControl(): void;

@@ -59,19 +57,19 @@ declare class AmbientLight<
     /*  Socket Listeners and Handlers               */
     /* -------------------------------------------- */

-    protected override _onCreate(
+    override _onCreate(
         data: TDocument["_source"],
-        options: DocumentModificationContext<TDocument["parent"]>,
+        options: DocumentModificationContext<TDocument>,
         userId: string
     ): void;

-    protected override _onUpdate(
-        changed: DeepPartial<TDocument["_source"]>,
-        options: DocumentModificationContext<TDocument["parent"]>,
+    override _onUpdate(
+        changed: DocumentUpdateData<TDocument>,
+        options: DocumentModificationContext<TDocument>,
         userId: string
     ): void;

-    protected override _onDelete(options: DocumentModificationContext<TDocument["parent"]>, userId: string): void;
+    override _onDelete(options: DocumentModificationContext<TDocument>, userId: string): void;

     /* -------------------------------------------- */
     /*  Mouse Interaction Handlers                  */
diff --git a/node_modules/foundry-types/client/pixi/placeable-object/ambient-sound.d.ts b/node_modules/foundry-types/client/pixi/placeable-object/ambient-sound.d.ts
index 2f916e7..ab3f805 100644
--- a/node_modules/foundry-types/client/pixi/placeable-object/ambient-sound.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeable-object/ambient-sound.d.ts
@@ -1,94 +1,5 @@
 declare class AmbientSound<
-    TDocument extends AmbientSoundDocument<Scene | null> = AmbientSoundDocument<Scene | null>
+    TDocument extends AmbientSoundDocument = AmbientSoundDocument
 > extends PlaceableObject<TDocument> {
-    /** The Sound which manages playback for this AmbientSound effect */
-    sound: Sound | null;
-
-    /** A SoundSource object which manages the area of effect for this ambient sound */
-    source: SoundSource<this>;
-
-    static override embeddedName: "AmbientSound";
-
-    /** Create a Sound used to play this AmbientSound object */
-    protected _createSound(): Sound | null;
-
-    /* -------------------------------------------- */
-    /* Properties                                   */
-    /* -------------------------------------------- */
-
-    /** Is this ambient sound is currently audible based on its hidden state and the darkness level of the Scene? */
-    get isAudible(): boolean;
-
-    override get bounds(): PIXI.Rectangle;
-
-    /** A convenience accessor for the sound radius in pixels */
-    get radius(): number;
-
-    /* -------------------------------------------- */
-    /* Methods                                      */
-    /* -------------------------------------------- */
-
-    /**
-     * Toggle playback of the sound depending on whether or not it is audible
-     * @param isAudible    Is the sound audible?
-     * @param volume       The target playback volume
-     * @param [options={}] Additional options which affect sound synchronization
-     * @param [options.fade=250] A duration in milliseconds to fade volume transition
-     */
-    sync(isAudible: boolean, volume: number, options?: { fade?: number }): void;
-
-    /* -------------------------------------------- */
-    /* Rendering                                    */
-    /* -------------------------------------------- */
-
-    override clear(): this;
-
-    protected override _draw(): Promise<void>;
-
-    protected override _destroy(options: object): void;
-
-    protected _drawControlIcon(): ControlIcon;
-
-    protected override _refresh(options: object): void;
-
-    /** Refresh the display of the ControlIcon for this AmbientSound source */
-    refreshControl(): void;
-
-    /**
-     * Compute the field-of-vision for an object, determining its effective line-of-sight and field-of-vision polygons
-     * @param [options={}]   Options which modify how the audio source is updated
-     * @param [options.defer]    Defer refreshing the SoundsLayer to manually call that refresh later.
-     * @param [options.deleted]  Indicate that this SoundSource has been deleted.
-     */
-    updateSource(options?: { defer?: boolean; deleted?: boolean }): void;
-
-    /* -------------------------------------------- */
-    /*  Document Event Handlers                     */
-    /* -------------------------------------------- */
-
-    protected override _onCreate(
-        data: TDocument["_source"],
-        options: DocumentModificationContext<TDocument["parent"]>,
-        userId: string
-    ): void;
-
-    protected override _onUpdate(
-        changed: DeepPartial<TDocument["_source"]>,
-        options: DocumentUpdateContext<TDocument["parent"]>,
-        userId: string
-    ): void;
-
-    protected override _onDelete(options: DocumentModificationContext<TDocument["parent"]>, userId: string): void;
-
-    /* -------------------------------------------- */
-    /*  Interaction Event Handlers                  */
-    /* -------------------------------------------- */
-
-    protected override _canHUD(user: User, event: PIXI.InteractionEvent): boolean;
-
-    protected override _canConfigure(user: User, event: PIXI.InteractionEvent): boolean;
-
-    protected override _onClickRight(event: PIXI.InteractionEvent): void;
-
-    protected override _onDragLeftMove(event: PIXI.InteractionEvent): void;
+    protected _draw(): Promise<void>;
 }
diff --git a/node_modules/foundry-types/client/pixi/placeable-object/base.d.ts b/node_modules/foundry-types/client/pixi/placeable-object/base.d.ts
index c5c5fee..f7c5002 100644
--- a/node_modules/foundry-types/client/pixi/placeable-object/base.d.ts
+++ b/node_modules/foundry-types/client/pixi/placeable-object/base.d.ts
@@ -5,7 +5,9 @@ declare global {
      * An Abstract Base Class which defines a Placeable Object which represents an Entity placed on the Canvas
      * @param document The Document instance which is represented by this object
      */
-    abstract class PlaceableObject<TDocument extends CanvasDocument = CanvasDocument> extends PIXI.Container {
+    abstract class PlaceableObject<
+        TDocument extends CanvasDocument | CanvasDocument2 = CanvasDocument | CanvasDocument2
+    > extends PIXI.Container {
         constructor(document: TDocument);

         /** Retain a reference to the Scene within which this Placeable Object resides */
@@ -156,30 +158,18 @@ declare global {
          */
         refresh(): this;

-        /**
-         * The inner _refresh method which must be defined by each PlaceableObject subclass.
-         * @param options Options which may modify the refresh workflow
-         */
-        protected abstract _refresh(options: object): void;
-
         /** Register pending canvas operations which should occur after a new PlaceableObject of this type is created */
-        protected _onCreate(
-            data: TDocument["_source"],
-            options: DocumentModificationContext<TDocument["parent"]>,
-            userId: string
-        ): void;
+        _onCreate(data: TDocument["_source"], options: DocumentModificationContext<TDocument>, userId: string): void;

         /** Define additional steps taken when an existing placeable object of this type is updated with new data */
-
-        protected _onUpdate(
-            changed: DeepPartial<TDocument["_source"]>,
-            options: DocumentUpdateContext<TDocument["parent"]>,
+        _onUpdate(
+            changed: DocumentUpdateData<TDocument>,
+            options: DocumentModificationContext<TDocument>,
             userId: string
         ): void;

         /** Define additional steps taken when an existing placeable object of this type is deleted */
-
-        protected _onDelete(options: DocumentModificationContext<TDocument["parent"]>, userId: string): void;
+        _onDelete(options: DocumentModificationContext<TDocument>, userId: string): void;

         /* -------------------------------------------- */
         /*  Methods                                     */
@@ -299,7 +289,8 @@ declare global {
         protected _onDragLeftCancel(event: PIXI.InteractionEvent): void;
     }

-    interface PlaceableObject<TDocument extends CanvasDocument = CanvasDocument> extends PIXI.Container {
+    interface PlaceableObject<TDocument extends CanvasDocument | CanvasDocument2 = CanvasDocument | CanvasDocument2>
+        extends PIXI.Container {
         hitArea: PIXI.Rectangle;
     }
 }

